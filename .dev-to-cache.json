[{"type_of":"article","id":592011,"title":"5 places to get pre-crafted Tailwind CSS components for free","description":"One of my favourite reasons to use Tailwind CSS is the vast amount of premade components available - for free. I've made a list of the best places to find them.","published":true,"published_at":"2021-02-10T17:50:06.773Z","slug":"5-places-to-get-pre-crafted-tailwind-css-components-for-free-3jlg","path":"/jameswallis/5-places-to-get-pre-crafted-tailwind-css-components-for-free-3jlg","url":"https://dev.to/jameswallis/5-places-to-get-pre-crafted-tailwind-css-components-for-free-3jlg","comments_count":3,"public_reactions_count":45,"page_views_count":368,"published_timestamp":"2021-02-10T17:50:06Z","body_markdown":"---\ndescription: \"One of my favourite reasons to use Tailwind CSS is the vast amount of premade components available - for free. I've made a list of the best places to find them.\"\n---\n##Introduction\nI've been using [Tailwind CSS](https://tailwindcss.com) pretty heavily in the last few months. I've been using it both at work and at home on personal projects, [most recently when I created my Dev.to powered personal website](https://dev.to/jameswallis/i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje).\n\nOne of the best things about using Tailwind CSS to style your application is the large variety of premade components scattered across the web. Need a design for a form? Chances are a designer, likely more skilled than yourself (in my case anyway), has already created one that you can just copy into your app - **no extra dependencies, no modifying existing functionality**.\n\n**I intend for this article to be a living list that I can update each time I find a new high-quality Tailwind CSS component supplier.** Most of the websites listed below I've accidentally stumbled onto so this article will help me find them in the future. I've provided a summary for each website to highlight my favourite components both for you and so I know for the future!\n\n##Sites you should check out 🤩\nBelow, I have selected five websites that, to my knowledge, provide the highest quality components available online - **completely for free**.\n\n1. **[Tailblocks](https://tailblocks.cc)**.\n    * Contains over 60 components.\n    * Each component comes with dark mode, responsive sizing and colour variants.\n    * All the components are high quality. In fact, the website itself provides a great user experience. You can select the emphasis colour and navigate through all the components using the arrow keys on your keyboard.\n\n1. **[Tailwind Components](https://tailwindcomponents.com/)**.\n    * Components made by the community.\n    * The quality is hit and miss but it's good to check on when searching for a component as you never know what will be added.\n    * Does contain some paid \"premium\" components but these are mainly page layouts - not the components themselves.\n\n1. **[Meraki UI Components](https://merakiui.com)**.\n    * Meraki contains 49 components.\n    * Although they supply a relatively small amount of components, I especially like their design of components that are half image, half content.\n\n1. **[Tailwind Kit](https://www.tailwind-kit.com/)**. \n    * Tailwind Kit contains over 200 components.\n    * Originally announced on [Dev.to earlier this year by a French developer named Charlie](https://dev.to/charlie85270/tail-kit-200-tailwind-css-components-templates-38ol). \n    * There is the ability to [request components](https://www.tailwind-kit.com/request) based on existing designs from places like Dribbble.\n\n1. **[Tailwind Toolbox](https://www.tailwindtoolbox.com)**.\n    * More components made by the community. Additionally has templates, builder kits, generators, plugins and useful tools for use with Tailwind projects.\n    * Can suggest components to add to the site.\n\n##Bonus\nBit of a half baked bonus...\n\n1. **[Tailwind UI - from the creators of TailwindCSS](https://tailwindui.com/)**. \n    * This site contains over 300 of the most polished pre-made components around - they're made by Tailwind experts. \n    * [The few free components they supply look incredible](https://tailwindui.com/preview). *However*, only a few are free and the rest are part of a paid offering. The price for full access is over $150, likely too much for anyone but serious frontend developers who use Tailwind CSS at work every day. If you purchase access to the library, they promise more components every month until they run out of ideas.\n    * Personally, *I'm tempted*. If I can justify the cost in the future (i.e. use Tailwind CSS more at work) I'd 💯 purchase access to the library. It would take my website designs to the next level without having to invest hours of time fiddling with CSS styling.\n\n##Final words\nThese are just a few places that you can get premade Tailwind CSS components from. I'll keep adding more as and when I find them!\n\nIf you know another source of components, drop them in a comment and I'll add them to the list!\n\nLiked this article? Hit the like button!\n\nThanks for reading!","positive_reactions_count":45,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--wItrmFEH--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/9txqlyg261jiu8blq1mj.jpg","tag_list":["react","css","tailwindcss"],"canonical_url":"https://wallis.dev/blog/5-places-to-get-free-tailwind-css-components","user":{"name":"James Wallis","username":"jameswallis","twitter_username":null,"github_username":"james-wallis","website_url":"https://wallis.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--aDpGiyQ3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436375/3c47ee9b-9ceb-4a43-b28a-3ac3e65d0173.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--Lbolzeyu--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436375/3c47ee9b-9ceb-4a43-b28a-3ac3e65d0173.jpeg"},"localSlug":"5-places-to-get-free-tailwind-css-components","markdown":"---\ndescription: \"One of my favourite reasons to use Tailwind CSS is the vast amount of premade components available - for free. I've made a list of the best places to find them.\"\n---\n## Introduction\nI've been using [Tailwind CSS](https://tailwindcss.com) pretty heavily in the last few months. I've been using it both at work and at home on personal projects, [most recently when I created my Dev.to powered personal website](https://dev.to/jameswallis/i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje).\n\nOne of the best things about using Tailwind CSS to style your application is the large variety of premade components scattered across the web. Need a design for a form? Chances are a designer, likely more skilled than yourself (in my case anyway), has already created one that you can just copy into your app - **no extra dependencies, no modifying existing functionality**.\n\n**I intend for this article to be a living list that I can update each time I find a new high-quality Tailwind CSS component supplier.** Most of the websites listed below I've accidentally stumbled onto so this article will help me find them in the future. I've provided a summary for each website to highlight my favourite components both for you and so I know for the future!\n\n## Sites you should check out 🤩\nBelow, I have selected five websites that, to my knowledge, provide the highest quality components available online - **completely for free**.\n\n1. **[Tailblocks](https://tailblocks.cc)**.\n    * Contains over 60 components.\n    * Each component comes with dark mode, responsive sizing and colour variants.\n    * All the components are high quality. In fact, the website itself provides a great user experience. You can select the emphasis colour and navigate through all the components using the arrow keys on your keyboard.\n\n1. **[Tailwind Components](https://tailwindcomponents.com/)**.\n    * Components made by the community.\n    * The quality is hit and miss but it's good to check on when searching for a component as you never know what will be added.\n    * Does contain some paid \"premium\" components but these are mainly page layouts - not the components themselves.\n\n1. **[Meraki UI Components](https://merakiui.com)**.\n    * Meraki contains 49 components.\n    * Although they supply a relatively small amount of components, I especially like their design of components that are half image, half content.\n\n1. **[Tailwind Kit](https://www.tailwind-kit.com/)**. \n    * Tailwind Kit contains over 200 components.\n    * Originally announced on [Dev.to earlier this year by a French developer named Charlie](https://dev.to/charlie85270/tail-kit-200-tailwind-css-components-templates-38ol). \n    * There is the ability to [request components](https://www.tailwind-kit.com/request) based on existing designs from places like Dribbble.\n\n1. **[Tailwind Toolbox](https://www.tailwindtoolbox.com)**.\n    * More components made by the community. Additionally has templates, builder kits, generators, plugins and useful tools for use with Tailwind projects.\n    * Can suggest components to add to the site.\n\n## Bonus\nBit of a half baked bonus...\n\n1. **[Tailwind UI - from the creators of TailwindCSS](https://tailwindui.com/)**. \n    * This site contains over 300 of the most polished pre-made components around - they're made by Tailwind experts. \n    * [The few free components they supply look incredible](https://tailwindui.com/preview). *However*, only a few are free and the rest are part of a paid offering. The price for full access is over $150, likely too much for anyone but serious frontend developers who use Tailwind CSS at work every day. If you purchase access to the library, they promise more components every month until they run out of ideas.\n    * Personally, *I'm tempted*. If I can justify the cost in the future (i.e. use Tailwind CSS more at work) I'd 💯 purchase access to the library. It would take my website designs to the next level without having to invest hours of time fiddling with CSS styling.\n\n## Final words\nThese are just a few places that you can get premade Tailwind CSS components from. I'll keep adding more as and when I find them!\n\nIf you know another source of components, drop them in a comment and I'll add them to the list!\n\nLiked this article? Hit the like button!\n\nThanks for reading!","html":"<h2>Introduction</h2>\n<p>I've been using <a href=\"https://tailwindcss.com\">Tailwind CSS</a> pretty heavily in the last few months. I've been using it both at work and at home on personal projects, <a href=\"https://dev.to/jameswallis/i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje\">most recently when I created my Dev.to powered personal website</a>.</p>\n<p>One of the best things about using Tailwind CSS to style your application is the large variety of premade components scattered across the web. Need a design for a form? Chances are a designer, likely more skilled than yourself (in my case anyway), has already created one that you can just copy into your app - <strong>no extra dependencies, no modifying existing functionality</strong>.</p>\n<p><strong>I intend for this article to be a living list that I can update each time I find a new high-quality Tailwind CSS component supplier.</strong> Most of the websites listed below I've accidentally stumbled onto so this article will help me find them in the future. I've provided a summary for each website to highlight my favourite components both for you and so I know for the future!</p>\n<h2>Sites you should check out 🤩</h2>\n<p>Below, I have selected five websites that, to my knowledge, provide the highest quality components available online - <strong>completely for free</strong>.</p>\n<ol>\n<li>\n<p><strong><a href=\"https://tailblocks.cc\">Tailblocks</a></strong>.</p>\n<ul>\n<li>Contains over 60 components.</li>\n<li>Each component comes with dark mode, responsive sizing and colour variants.</li>\n<li>All the components are high quality. In fact, the website itself provides a great user experience. You can select the emphasis colour and navigate through all the components using the arrow keys on your keyboard.</li>\n</ul>\n</li>\n<li>\n<p><strong><a href=\"https://tailwindcomponents.com/\">Tailwind Components</a></strong>.</p>\n<ul>\n<li>Components made by the community.</li>\n<li>The quality is hit and miss but it's good to check on when searching for a component as you never know what will be added.</li>\n<li>Does contain some paid \"premium\" components but these are mainly page layouts - not the components themselves.</li>\n</ul>\n</li>\n<li>\n<p><strong><a href=\"https://merakiui.com\">Meraki UI Components</a></strong>.</p>\n<ul>\n<li>Meraki contains 49 components.</li>\n<li>Although they supply a relatively small amount of components, I especially like their design of components that are half image, half content.</li>\n</ul>\n</li>\n<li>\n<p><strong><a href=\"https://www.tailwind-kit.com/\">Tailwind Kit</a></strong>.</p>\n<ul>\n<li>Tailwind Kit contains over 200 components.</li>\n<li>Originally announced on <a href=\"https://dev.to/charlie85270/tail-kit-200-tailwind-css-components-templates-38ol\">Dev.to earlier this year by a French developer named Charlie</a>.</li>\n<li>There is the ability to <a href=\"https://www.tailwind-kit.com/request\">request components</a> based on existing designs from places like Dribbble.</li>\n</ul>\n</li>\n<li>\n<p><strong><a href=\"https://www.tailwindtoolbox.com\">Tailwind Toolbox</a></strong>.</p>\n<ul>\n<li>More components made by the community. Additionally has templates, builder kits, generators, plugins and useful tools for use with Tailwind projects.</li>\n<li>Can suggest components to add to the site.</li>\n</ul>\n</li>\n</ol>\n<h2>Bonus</h2>\n<p>Bit of a half baked bonus...</p>\n<ol>\n<li><strong><a href=\"https://tailwindui.com/\">Tailwind UI - from the creators of TailwindCSS</a></strong>.\n<ul>\n<li>This site contains over 300 of the most polished pre-made components around - they're made by Tailwind experts.</li>\n<li><a href=\"https://tailwindui.com/preview\">The few free components they supply look incredible</a>. <em>However</em>, only a few are free and the rest are part of a paid offering. The price for full access is over $150, likely too much for anyone but serious frontend developers who use Tailwind CSS at work every day. If you purchase access to the library, they promise more components every month until they run out of ideas.</li>\n<li>Personally, <em>I'm tempted</em>. If I can justify the cost in the future (i.e. use Tailwind CSS more at work) I'd 💯 purchase access to the library. It would take my website designs to the next level without having to invest hours of time fiddling with CSS styling.</li>\n</ul>\n</li>\n</ol>\n<h2>Final words</h2>\n<p>These are just a few places that you can get premade Tailwind CSS components from. I'll keep adding more as and when I find them!</p>\n<p>If you know another source of components, drop them in a comment and I'll add them to the list!</p>\n<p>Liked this article? Hit the like button!</p>\n<p>Thanks for reading!</p>\n"},{"type_of":"article","id":588193,"title":"I completely rewrote my personal website using Dev.to as a CMS","description":"I spent a weekend rebuilding my website from scratch using TypeScript, Next.js, Tailwind CSS and Dev.to as a CMS for my blog and portfolio pages.","published":true,"published_at":"2021-02-03T19:40:55.235Z","slug":"i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje","path":"/jameswallis/i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje","url":"https://dev.to/jameswallis/i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje","comments_count":10,"public_reactions_count":195,"page_views_count":3320,"published_timestamp":"2021-02-03T19:40:55Z","body_markdown":"---\ndescription: \"I spent a weekend rebuilding my website from scratch using TypeScript, Next.js, Tailwind CSS and Dev.to as a CMS for my blog and portfolio pages.\"\n---\nThe final weekend of January 2021 was uneventful in comparison with other years - in the UK we were in full lockdown due to the Coronavirus. It was, however, the perfect opportunity to completely rewrite [my personal website](https://wallis.dev).\n\n##Why?\nI decided to redesign and rewrite my website for several reasons:\n* I wanted to move from JavaScript to TypeScript.\n* The website was styled using [styled-jsx](https://github.com/vercel/styled-jsx), which can be a pain to maintain and IMO is a bit messy. At the moment I'm using Tailwind CSS and so far loving it and its utility-style nature; I wanted my personal website to reflect this.\n* I no longer liked the design and wanted it to be cleaner and simpler.\n* I wanted my blog and portfolio to be loaded dynamically from a CMS rather than having to copy+paste a new page for each entry - See the *`Originally published at wallis.dev`* at the top of this article.\n\n<figure>\n  <img src=\"https://dev-to-uploads.s3.amazonaws.com/i/rs1bvowr8eyxg3gly85p.png\" alt=\"The old wallis.dev home page\">\n  <figcaption>My old home page</figcaption>\n</figure>\n\n##Technologies used\n* **[TypeScript](https://www.typescriptlang.org)** - Since being introduced to TypeScript at work, I've started to understand the benefits over plain JavaScript.\n* **[Next.js](https://nextjs.org)** - I don't try to hide the fact that I love Next.js, it's so simple to use and to date [most of my articles contain Next.js in some way](https://dev.to/jameswallis).\n* **[Tailwind CSS](https://tailwindcss.com)** - Lately I've been using Tailwind CSS heavily. To quote their homepage, it enables me to \"rapidly build modern websites without ever leaving [my React component]\". Tailwind CSS also made it incredibly easy to add a [dark mode](https://tailwindcss.com/docs/dark-mode). Also [Tailwind Typography](https://github.com/tailwindlabs/tailwindcss-typography).\n* **[Dev.to API](https://docs.dev.to/api)** to dynamically build the blog and portfolio pages ⬅️  *My favourite feature*.\n\n##Using Dev.to as a CMS\nMy favourite part of my website is the use of Dev.to as a Content Management System for the blog and portfolio pages. I've seen the Dev.to API utilised before to display a user's articles on their website but, AFAIK, not quite in the same way as I've applied it.\n\nThe benefits of using Dev.to as a CMS are:\n1. Dev.to stores the articles and any images that are uploaded and used.\n1. I can use Dev.to's editor and the ability to draft an article and publish it later.\n1. Has a built-in RSS feed that I can use to share my articles to other sites such as [CodeNewbie](https://community.codenewbie.org/) and Medium.\n1. Although Dev.to has the article first, the use of a canonical URL ensures that Google and other sites see my personal website as the source site for the articles.\n1. ~~Converts the article into HTML for me.~~ *I ended up rendering the HTML from the article markdown myself, as it required fewer requests to the Dev.to API.*\n\n###Disclaimer\nBefore I continue I want to *stress* that I intend to use Dev.to purely for my blog and portfolio (past projects / `showdev`). **I won't be using Dev.to to create pages which are not articles** and would cause Dev.to to become cluttered with spam if others follow suit. For example, the about section on the home page is hardcoded into the website and if I created a page for my education history, I'd keep that purely for the website and wouldn't post it to Dev.to - [I'd probably use Markdown for these](https://dev.to/jameswallis/combining-markdown-and-dynamic-routes-to-make-a-more-maintainable-next-js-website-3ogl).\n\n###How it works\n[View the code on GitHub](https://github.com/james-wallis/wallis.dev)\n\nBuilt using Next.js, the website uses two dynamic routing functions ([`getStaticPaths`](https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation) and [`getStaticProps`](https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation)) to generate the [blog](https://github.com/james-wallis/wallis.dev/blob/master/pages/blog/%5Bslug%5D.tsx) and [portfolio](https://github.com/james-wallis/wallis.dev/blob/master/pages/portfolio/%5Bslug%5D.tsx) pages.\n\nBefore an article is displayed on my website, it must meet the two following requirements:\n1. Must be published (obviously)\n1. Must have a canonical URL directing to my website. This enables me to pick which articles are displayed, what the article's path will be on my website (not the post ID). Moreover, an article with a canonical URL pointing to `https://wallis.dev/blog/...` will be built as part of my blog whereas, if its canonical URL is `https://wallis.dev/portfolio/...` it will be a portfolio piece.\n\nFor every article that meets the requirements, the subsequent build process is followed:\n1. At build time, Next.js calls the `getStaticPaths` function which \n    1. Fetches a list of my published articles using the Dev.to API ([`/api/articles/me`](https://docs.dev.to/api/#operation/getUserArticles)).\n    1. Converts the article's markdown to HTML.\n    1. Saves the articles to a cache file for use in the next step. \n    1. A dynamic page is created within the Next.js context for each article - the page `slug` will be the canonical URL path.\n\n1. For each page, Next.js calls `getStaticProps` which fetches the page's article from the cache. The article contains the name, description and HTML. \n    * *I also attempted making another API request to the Dev.to API ([`/api/articles/{id}`](https://docs.dev.to/api/#operation/getArticleById)) to fetch the page's article, so I could use the HTML rendered by Dev.to. However, this caused build failures as I was making too many API requests at once - so now I render the markdown using [`remark-html`](https://github.com/remarkjs/remark-html).*\n1. Finally, the page is rendered. I use custom elements to display the article `name` and `description` and then display the HTML I [rendered earlier in `getStaticPaths` using `remark-html`](https://github.com/james-wallis/wallis.dev/blob/master/lib/markdown.ts#L19-L29). For styling, I use the [Tailwind Typography plugin](https://github.com/tailwindlabs/tailwindcss-typography).\n\nTo ensure that the website is always in sync with my articles on Dev.to, I use a [Vercel Deploy hook](https://vercel.com/docs/more/deploy-hooks) which is triggered each time I create or update an article using a [Dev.to webhook](https://docs.dev.to/api/#tag/webhooks). I use a Deploy Hook rather than [Incremental Static Regeneration](https://nextjs.org/blog/next-9-5#stable-incremental-static-regeneration) so that the blog is only rebuilt when something has changed rather than at random intervals.\n\n*Note: I use Dev.to APIs that require authorisation as they seem to have a higher request limit compared to the public routes. When using public APIs and fetching each article via the article API, I found that my builds were failing with a `429` error which is Dev.to rate-limiting requests. - I probably could switch to using public APIs now that I'm using a cache to read the articles from.*\n\n**I'm currently writing a detailed article which describes in greater detail how my website utilises Dev.to as a CMS, stay tuned (and follow on Dev.to to be notified when I release it)!**\n\n\n###How it looks\n[Visit wallis.dev](https://wallis.dev)\n\n<figure>\n  <img src=\"https://dev-to-uploads.s3.amazonaws.com/i/7apbs7bdr6o1fwiouwc5.gif\" alt=\"Navigating through my website\">\n  <figcaption>Navigating through wallis.dev</figcaption>\n</figure>\n\n###Future improvements\n1. ~~Add syntax highlighting to code blocks like on Dev.to.~~ [Completed using `highlight.js` and `remark-highlight.js`](https://github.com/james-wallis/wallis.dev/blob/master/lib/markdown.ts#L24).\n1. Add a [contact form using EmailJS](https://dev.to/jameswallis/using-emailjs-with-captcha-verification-in-a-next-js-application-1g1g).\n1. Only rebuild the website if the content of an article has changed or one is created - reduces the website being needlessly redeployed.\n\n##Summary\nIn this article, I discussed rewriting my personal website from the ground up using Dev.to as a Content Management System for the blog and portfolio pages.\n\nLike the idea of using Dev.to as a CMS for your blog? React! Found something I could improve or that you would have done differently? Let me know in the comments.\n\nThanks for reading!\n\n**[By the way, you can view this article live on my website here.](https://wallis.dev/blog/rewriting-my-website-with-a-devto-cms)**\n\n","positive_reactions_count":195,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--uchyF_zE--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/syqrfb4e2kbsid9elpkh.png","tag_list":["showdev","javascript","react","nextjs"],"canonical_url":"https://wallis.dev/blog/rewriting-my-website-with-a-devto-cms","user":{"name":"James Wallis","username":"jameswallis","twitter_username":null,"github_username":"james-wallis","website_url":"https://wallis.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--aDpGiyQ3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436375/3c47ee9b-9ceb-4a43-b28a-3ac3e65d0173.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--Lbolzeyu--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436375/3c47ee9b-9ceb-4a43-b28a-3ac3e65d0173.jpeg"},"flare_tag":{"name":"showdev","bg_color_hex":"#091b47","text_color_hex":"#b2ffe1"},"localSlug":"rewriting-my-website-with-a-devto-cms","markdown":"---\ndescription: \"I spent a weekend rebuilding my website from scratch using TypeScript, Next.js, Tailwind CSS and Dev.to as a CMS for my blog and portfolio pages.\"\n---\nThe final weekend of January 2021 was uneventful in comparison with other years - in the UK we were in full lockdown due to the Coronavirus. It was, however, the perfect opportunity to completely rewrite [my personal website](https://wallis.dev).\n\n## Why?\nI decided to redesign and rewrite my website for several reasons:\n* I wanted to move from JavaScript to TypeScript.\n* The website was styled using [styled-jsx](https://github.com/vercel/styled-jsx), which can be a pain to maintain and IMO is a bit messy. At the moment I'm using Tailwind CSS and so far loving it and its utility-style nature; I wanted my personal website to reflect this.\n* I no longer liked the design and wanted it to be cleaner and simpler.\n* I wanted my blog and portfolio to be loaded dynamically from a CMS rather than having to copy+paste a new page for each entry - See the *`Originally published at wallis.dev`* at the top of this article.\n\n<figure>\n  <img src=\"https://dev-to-uploads.s3.amazonaws.com/i/rs1bvowr8eyxg3gly85p.png\" alt=\"The old wallis.dev home page\">\n  <figcaption>My old home page</figcaption>\n</figure>\n\n## Technologies used\n* **[TypeScript](https://www.typescriptlang.org)** - Since being introduced to TypeScript at work, I've started to understand the benefits over plain JavaScript.\n* **[Next.js](https://nextjs.org)** - I don't try to hide the fact that I love Next.js, it's so simple to use and to date [most of my articles contain Next.js in some way](https://dev.to/jameswallis).\n* **[Tailwind CSS](https://tailwindcss.com)** - Lately I've been using Tailwind CSS heavily. To quote their homepage, it enables me to \"rapidly build modern websites without ever leaving [my React component]\". Tailwind CSS also made it incredibly easy to add a [dark mode](https://tailwindcss.com/docs/dark-mode). Also [Tailwind Typography](https://github.com/tailwindlabs/tailwindcss-typography).\n* **[Dev.to API](https://docs.dev.to/api)** to dynamically build the blog and portfolio pages ⬅️  *My favourite feature*.\n\n## Using Dev.to as a CMS\nMy favourite part of my website is the use of Dev.to as a Content Management System for the blog and portfolio pages. I've seen the Dev.to API utilised before to display a user's articles on their website but, AFAIK, not quite in the same way as I've applied it.\n\nThe benefits of using Dev.to as a CMS are:\n1. Dev.to stores the articles and any images that are uploaded and used.\n1. I can use Dev.to's editor and the ability to draft an article and publish it later.\n1. Has a built-in RSS feed that I can use to share my articles to other sites such as [CodeNewbie](https://community.codenewbie.org/) and Medium.\n1. Although Dev.to has the article first, the use of a canonical URL ensures that Google and other sites see my personal website as the source site for the articles.\n1. ~~Converts the article into HTML for me.~~ *I ended up rendering the HTML from the article markdown myself, as it required fewer requests to the Dev.to API.*\n\n### Disclaimer\nBefore I continue I want to *stress* that I intend to use Dev.to purely for my blog and portfolio (past projects / `showdev`). **I won't be using Dev.to to create pages which are not articles** and would cause Dev.to to become cluttered with spam if others follow suit. For example, the about section on the home page is hardcoded into the website and if I created a page for my education history, I'd keep that purely for the website and wouldn't post it to Dev.to - [I'd probably use Markdown for these](https://dev.to/jameswallis/combining-markdown-and-dynamic-routes-to-make-a-more-maintainable-next-js-website-3ogl).\n\n### How it works\n[View the code on GitHub](https://github.com/james-wallis/wallis.dev)\n\nBuilt using Next.js, the website uses two dynamic routing functions ([`getStaticPaths`](https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation) and [`getStaticProps`](https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation)) to generate the [blog](https://github.com/james-wallis/wallis.dev/blob/master/pages/blog/%5Bslug%5D.tsx) and [portfolio](https://github.com/james-wallis/wallis.dev/blob/master/pages/portfolio/%5Bslug%5D.tsx) pages.\n\nBefore an article is displayed on my website, it must meet the two following requirements:\n1. Must be published (obviously)\n1. Must have a canonical URL directing to my website. This enables me to pick which articles are displayed, what the article's path will be on my website (not the post ID). Moreover, an article with a canonical URL pointing to `https://wallis.dev/blog/...` will be built as part of my blog whereas, if its canonical URL is `https://wallis.dev/portfolio/...` it will be a portfolio piece.\n\nFor every article that meets the requirements, the subsequent build process is followed:\n1. At build time, Next.js calls the `getStaticPaths` function which \n    1. Fetches a list of my published articles using the Dev.to API ([`/api/articles/me`](https://docs.dev.to/api/#operation/getUserArticles)).\n    1. Converts the article's markdown to HTML.\n    1. Saves the articles to a cache file for use in the next step. \n    1. A dynamic page is created within the Next.js context for each article - the page `slug` will be the canonical URL path.\n\n1. For each page, Next.js calls `getStaticProps` which fetches the page's article from the cache. The article contains the name, description and HTML. \n    * *I also attempted making another API request to the Dev.to API ([`/api/articles/{id}`](https://docs.dev.to/api/#operation/getArticleById)) to fetch the page's article, so I could use the HTML rendered by Dev.to. However, this caused build failures as I was making too many API requests at once - so now I render the markdown using [`remark-html`](https://github.com/remarkjs/remark-html).*\n1. Finally, the page is rendered. I use custom elements to display the article `name` and `description` and then display the HTML I [rendered earlier in `getStaticPaths` using `remark-html`](https://github.com/james-wallis/wallis.dev/blob/master/lib/markdown.ts#L19-L29). For styling, I use the [Tailwind Typography plugin](https://github.com/tailwindlabs/tailwindcss-typography).\n\nTo ensure that the website is always in sync with my articles on Dev.to, I use a [Vercel Deploy hook](https://vercel.com/docs/more/deploy-hooks) which is triggered each time I create or update an article using a [Dev.to webhook](https://docs.dev.to/api/#tag/webhooks). I use a Deploy Hook rather than [Incremental Static Regeneration](https://nextjs.org/blog/next-9-5#stable-incremental-static-regeneration) so that the blog is only rebuilt when something has changed rather than at random intervals.\n\n*Note: I use Dev.to APIs that require authorisation as they seem to have a higher request limit compared to the public routes. When using public APIs and fetching each article via the article API, I found that my builds were failing with a `429` error which is Dev.to rate-limiting requests. - I probably could switch to using public APIs now that I'm using a cache to read the articles from.*\n\n**I'm currently writing a detailed article which describes in greater detail how my website utilises Dev.to as a CMS, stay tuned (and follow on Dev.to to be notified when I release it)!**\n\n\n### How it looks\n[Visit wallis.dev](https://wallis.dev)\n\n<figure>\n  <img src=\"https://dev-to-uploads.s3.amazonaws.com/i/7apbs7bdr6o1fwiouwc5.gif\" alt=\"Navigating through my website\">\n  <figcaption>Navigating through wallis.dev</figcaption>\n</figure>\n\n### Future improvements\n1. ~~Add syntax highlighting to code blocks like on Dev.to.~~ [Completed using `highlight.js` and `remark-highlight.js`](https://github.com/james-wallis/wallis.dev/blob/master/lib/markdown.ts#L24).\n1. Add a [contact form using EmailJS](https://dev.to/jameswallis/using-emailjs-with-captcha-verification-in-a-next-js-application-1g1g).\n1. Only rebuild the website if the content of an article has changed or one is created - reduces the website being needlessly redeployed.\n\n## Summary\nIn this article, I discussed rewriting my personal website from the ground up using Dev.to as a Content Management System for the blog and portfolio pages.\n\nLike the idea of using Dev.to as a CMS for your blog? React! Found something I could improve or that you would have done differently? Let me know in the comments.\n\nThanks for reading!\n\n**[By the way, you can view this article live on my website here.](https://wallis.dev/blog/rewriting-my-website-with-a-devto-cms)**\n\n","html":"<p>The final weekend of January 2021 was uneventful in comparison with other years - in the UK we were in full lockdown due to the Coronavirus. It was, however, the perfect opportunity to completely rewrite <a href=\"https://wallis.dev\">my personal website</a>.</p>\n<h2>Why?</h2>\n<p>I decided to redesign and rewrite my website for several reasons:</p>\n<ul>\n<li>I wanted to move from JavaScript to TypeScript.</li>\n<li>The website was styled using <a href=\"https://github.com/vercel/styled-jsx\">styled-jsx</a>, which can be a pain to maintain and IMO is a bit messy. At the moment I'm using Tailwind CSS and so far loving it and its utility-style nature; I wanted my personal website to reflect this.</li>\n<li>I no longer liked the design and wanted it to be cleaner and simpler.</li>\n<li>I wanted my blog and portfolio to be loaded dynamically from a CMS rather than having to copy+paste a new page for each entry - See the <em><code>Originally published at wallis.dev</code></em> at the top of this article.</li>\n</ul>\n<figure>\n  <img src=\"https://dev-to-uploads.s3.amazonaws.com/i/rs1bvowr8eyxg3gly85p.png\" alt=\"The old wallis.dev home page\">\n  <figcaption>My old home page</figcaption>\n</figure>\n<h2>Technologies used</h2>\n<ul>\n<li><strong><a href=\"https://www.typescriptlang.org\">TypeScript</a></strong> - Since being introduced to TypeScript at work, I've started to understand the benefits over plain JavaScript.</li>\n<li><strong><a href=\"https://nextjs.org\">Next.js</a></strong> - I don't try to hide the fact that I love Next.js, it's so simple to use and to date <a href=\"https://dev.to/jameswallis\">most of my articles contain Next.js in some way</a>.</li>\n<li><strong><a href=\"https://tailwindcss.com\">Tailwind CSS</a></strong> - Lately I've been using Tailwind CSS heavily. To quote their homepage, it enables me to \"rapidly build modern websites without ever leaving [my React component]\". Tailwind CSS also made it incredibly easy to add a <a href=\"https://tailwindcss.com/docs/dark-mode\">dark mode</a>. Also <a href=\"https://github.com/tailwindlabs/tailwindcss-typography\">Tailwind Typography</a>.</li>\n<li><strong><a href=\"https://docs.dev.to/api\">Dev.to API</a></strong> to dynamically build the blog and portfolio pages ⬅️  <em>My favourite feature</em>.</li>\n</ul>\n<h2>Using Dev.to as a CMS</h2>\n<p>My favourite part of my website is the use of Dev.to as a Content Management System for the blog and portfolio pages. I've seen the Dev.to API utilised before to display a user's articles on their website but, AFAIK, not quite in the same way as I've applied it.</p>\n<p>The benefits of using Dev.to as a CMS are:</p>\n<ol>\n<li>Dev.to stores the articles and any images that are uploaded and used.</li>\n<li>I can use Dev.to's editor and the ability to draft an article and publish it later.</li>\n<li>Has a built-in RSS feed that I can use to share my articles to other sites such as <a href=\"https://community.codenewbie.org/\">CodeNewbie</a> and Medium.</li>\n<li>Although Dev.to has the article first, the use of a canonical URL ensures that Google and other sites see my personal website as the source site for the articles.</li>\n<li><del>Converts the article into HTML for me.</del> <em>I ended up rendering the HTML from the article markdown myself, as it required fewer requests to the Dev.to API.</em></li>\n</ol>\n<h3>Disclaimer</h3>\n<p>Before I continue I want to <em>stress</em> that I intend to use Dev.to purely for my blog and portfolio (past projects / <code>showdev</code>). <strong>I won't be using Dev.to to create pages which are not articles</strong> and would cause Dev.to to become cluttered with spam if others follow suit. For example, the about section on the home page is hardcoded into the website and if I created a page for my education history, I'd keep that purely for the website and wouldn't post it to Dev.to - <a href=\"https://dev.to/jameswallis/combining-markdown-and-dynamic-routes-to-make-a-more-maintainable-next-js-website-3ogl\">I'd probably use Markdown for these</a>.</p>\n<h3>How it works</h3>\n<p><a href=\"https://github.com/james-wallis/wallis.dev\">View the code on GitHub</a></p>\n<p>Built using Next.js, the website uses two dynamic routing functions (<a href=\"https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation\"><code>getStaticPaths</code></a> and <a href=\"https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation\"><code>getStaticProps</code></a>) to generate the <a href=\"https://github.com/james-wallis/wallis.dev/blob/master/pages/blog/%5Bslug%5D.tsx\">blog</a> and <a href=\"https://github.com/james-wallis/wallis.dev/blob/master/pages/portfolio/%5Bslug%5D.tsx\">portfolio</a> pages.</p>\n<p>Before an article is displayed on my website, it must meet the two following requirements:</p>\n<ol>\n<li>Must be published (obviously)</li>\n<li>Must have a canonical URL directing to my website. This enables me to pick which articles are displayed, what the article's path will be on my website (not the post ID). Moreover, an article with a canonical URL pointing to <code>https://wallis.dev/blog/...</code> will be built as part of my blog whereas, if its canonical URL is <code>https://wallis.dev/portfolio/...</code> it will be a portfolio piece.</li>\n</ol>\n<p>For every article that meets the requirements, the subsequent build process is followed:</p>\n<ol>\n<li>\n<p>At build time, Next.js calls the <code>getStaticPaths</code> function which</p>\n<ol>\n<li>Fetches a list of my published articles using the Dev.to API (<a href=\"https://docs.dev.to/api/#operation/getUserArticles\"><code>/api/articles/me</code></a>).</li>\n<li>Converts the article's markdown to HTML.</li>\n<li>Saves the articles to a cache file for use in the next step.</li>\n<li>A dynamic page is created within the Next.js context for each article - the page <code>slug</code> will be the canonical URL path.</li>\n</ol>\n</li>\n<li>\n<p>For each page, Next.js calls <code>getStaticProps</code> which fetches the page's article from the cache. The article contains the name, description and HTML.</p>\n<ul>\n<li><em>I also attempted making another API request to the Dev.to API (<a href=\"https://docs.dev.to/api/#operation/getArticleById\"><code>/api/articles/{id}</code></a>) to fetch the page's article, so I could use the HTML rendered by Dev.to. However, this caused build failures as I was making too many API requests at once - so now I render the markdown using <a href=\"https://github.com/remarkjs/remark-html\"><code>remark-html</code></a>.</em></li>\n</ul>\n</li>\n<li>\n<p>Finally, the page is rendered. I use custom elements to display the article <code>name</code> and <code>description</code> and then display the HTML I <a href=\"https://github.com/james-wallis/wallis.dev/blob/master/lib/markdown.ts#L19-L29\">rendered earlier in <code>getStaticPaths</code> using <code>remark-html</code></a>. For styling, I use the <a href=\"https://github.com/tailwindlabs/tailwindcss-typography\">Tailwind Typography plugin</a>.</p>\n</li>\n</ol>\n<p>To ensure that the website is always in sync with my articles on Dev.to, I use a <a href=\"https://vercel.com/docs/more/deploy-hooks\">Vercel Deploy hook</a> which is triggered each time I create or update an article using a <a href=\"https://docs.dev.to/api/#tag/webhooks\">Dev.to webhook</a>. I use a Deploy Hook rather than <a href=\"https://nextjs.org/blog/next-9-5#stable-incremental-static-regeneration\">Incremental Static Regeneration</a> so that the blog is only rebuilt when something has changed rather than at random intervals.</p>\n<p><em>Note: I use Dev.to APIs that require authorisation as they seem to have a higher request limit compared to the public routes. When using public APIs and fetching each article via the article API, I found that my builds were failing with a <code>429</code> error which is Dev.to rate-limiting requests. - I probably could switch to using public APIs now that I'm using a cache to read the articles from.</em></p>\n<p><strong>I'm currently writing a detailed article which describes in greater detail how my website utilises Dev.to as a CMS, stay tuned (and follow on Dev.to to be notified when I release it)!</strong></p>\n<h3>How it looks</h3>\n<p><a href=\"https://wallis.dev\">Visit wallis.dev</a></p>\n<figure>\n  <img src=\"https://dev-to-uploads.s3.amazonaws.com/i/7apbs7bdr6o1fwiouwc5.gif\" alt=\"Navigating through my website\">\n  <figcaption>Navigating through wallis.dev</figcaption>\n</figure>\n<h3>Future improvements</h3>\n<ol>\n<li><del>Add syntax highlighting to code blocks like on Dev.to.</del> <a href=\"https://github.com/james-wallis/wallis.dev/blob/master/lib/markdown.ts#L24\">Completed using <code>highlight.js</code> and <code>remark-highlight.js</code></a>.</li>\n<li>Add a <a href=\"https://dev.to/jameswallis/using-emailjs-with-captcha-verification-in-a-next-js-application-1g1g\">contact form using EmailJS</a>.</li>\n<li>Only rebuild the website if the content of an article has changed or one is created - reduces the website being needlessly redeployed.</li>\n</ol>\n<h2>Summary</h2>\n<p>In this article, I discussed rewriting my personal website from the ground up using Dev.to as a Content Management System for the blog and portfolio pages.</p>\n<p>Like the idea of using Dev.to as a CMS for your blog? React! Found something I could improve or that you would have done differently? Let me know in the comments.</p>\n<p>Thanks for reading!</p>\n<p><strong><a href=\"https://wallis.dev/blog/rewriting-my-website-with-a-devto-cms\">By the way, you can view this article live on my website here.</a></strong></p>\n"},{"type_of":"article","id":582548,"title":"5 built-in Next.js features you absolutely should check out","description":"When you start to use Next.js, it’s easy to overlook some incredible built-in features such as exporting as a static app and Incremental Static Regeneration","published":true,"published_at":"2021-01-26T23:42:27.568Z","slug":"5-built-in-next-js-features-you-absolutely-should-check-out-4k8e","path":"/jameswallis/5-built-in-next-js-features-you-absolutely-should-check-out-4k8e","url":"https://dev.to/jameswallis/5-built-in-next-js-features-you-absolutely-should-check-out-4k8e","comments_count":3,"public_reactions_count":50,"page_views_count":1146,"published_timestamp":"2021-01-26T23:42:27Z","body_markdown":"---\ndescription: \"When you start to use Next.js, it’s easy to overlook some incredible built-in features such as exporting as a static app and Incremental Static Regeneration\"\n---\n##Introduction\n\nRecently I've been using [Next.js](https://nextjs.org/) both at work and on after-work projects. Next.js is React framework that enables functionality such as server-side rendering and generating static websites. It has become my go-to technology when I'm building a frontend application, overtaking plain old React. \n\nWith Next.js you get many things out of the box such as built-in routing, automatic code splitting and it will even decide whether your app can be statically rendered or needs to be rendered server-side on every request - all of this without any configuration. In fact, when creating a new React application I default to using [`create-next-app`](https://nextjs.org/docs/api-reference/create-next-app) as opposed to [`create-react-app`](https://github.com/facebook/create-react-app).\n\nDuring my time developing with Next.js I discovered a few features which are easy to miss when you're just getting started. Some of these features helped me solve some problems I was having with my application. \n\n##Features you should check out 🤩\n\n1. **Export your Next.js application into [static HTML using `next export`](https://nextjs.org/docs/advanced-features/static-html-export)**. \n    * Giving you the ability to run it without a running Node.js server while still being able to make data-fetching requests at build time using `getStaticProps`. This feature bridges the gap between Next.js and its longtime alternative [Gatsby](https://www.gatsbyjs.com/) which is exclusively a static site generator.\n    * *I've used `next export` to host a Next.js site on GitHub Pages (although with issues that were solved with the subsequent feature).*\n\n1. **The `next.config.js` [`assetPrefix`](https://nextjs.org/docs/api-reference/next.config.js/cdn-support-with-asset-prefix) and [`basePath`](https://nextjs.org/docs/api-reference/next.config.js/basepath) options**. \n    * On its own `assetPrefix` allows you to prefix all URLs to assets, like images, so that you can use assets hosted on a CDN. While `basePath` provides the ability to host the app on the subpath of a domain such as `https://domain.com/app-on-this-subpath`.\n    * *[In the past I've utilised `next export`, `assetPrefix` and `basePath` together to host a Next.js app on GitHub Pages](https://dev.to/jameswallis/next-js-basepath-and-why-its-awesome-for-github-pages-and-static-sites-41ba) - without `assetPrefix` and `basePath` you are unable to host a Next.js project on GitHub pages (without a custom domain) as it puts them on a subpath.*\n\n1. **[Incremental Static Regeneration](https://nextjs.org/docs/basic-features/data-fetching#incremental-static-regeneration)**. \n    * A feature of `getStaticProps` which allows you to regenerate a static page while your app is running. It works by triggering a page rebuild in the background, which fetches updated page data, and replaces the existing HTML page with the newly generated one once the build has completed.\n    * *I haven't tried this feature but will in the future as it is a better alternative to completely rebuilding a static Next.js application each time data that it relies on changes.*\n\n1. **[Internationalized (i18n) routing](https://nextjs.org/docs/advanced-features/i18n-routing)**. \n    * If you're building a website that will be available in different countries, this feature is a game-changer. It makes supporting multiple languages simpler by enabling you to provide a list of supported locales which Next.js can read and automatically set up routing to ensure that users see the correct locale for their country. You can assign a default locale that will be used when no matching locale is detected for a user. Next.js supports both domain routing (`example.com`, `example.fr`) and subpath routing (`example.com/en`, `example.com/fr`) meaning it doesn't restrict how you plan to host your application.\n    * *If I ever decide to make my website multi-lingual or work on a global project, this is a feature I will definitely be using.*\n\n1. **[Measuring Performance - `reportWebVitals`](https://nextjs.org/docs/advanced-features/measuring-performance)**.\n    * Next.js contains a built-in relayer allowing you to analyse and measure the performance of your application. To activate this you use the built-in function `reportWebVitals`. Next.js calls `reportWebVitals` with a single `metrics` parameter, an object containing various properties such as an `id`, the `startTime` of a metric and a `value` which can be the duration of a metric. This function will be called when running on the client-side. In development, you can simply log out the values to easily measure the performance of your application. In production, however, [you can use this function to send the `metrics` to your own analytical service](https://nextjs.org/docs/advanced-features/measuring-performance#sending-results-to-analytics). They supply an example of this for use with Google Analytics.\n    * *~~I haven't used `reportWebVitals` but~~ in the future I'll add it to [my Google Analytics article](https://dev.to/jameswallis/adding-google-analytics-to-any-next-js-app-46h1). I use `reportWebVitals` on [my personal website](https://dev.to/jameswallis/i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje).*\n    * Using the following function should provide more accurate metrics than plain Google Analytics usage:\n```javascript\nexport function reportWebVitals({ id, name, label, value }) {\n  // Use `window.gtag` if you initialized Google Analytics as this example:\n  // https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/pages/_document.js\n  window.gtag('event', name, {\n    event_category:\n      label === 'web-vital' ? 'Web Vitals' : 'Next.js custom metric',\n    value: Math.round(name === 'CLS' ? value * 1000 : value), // values must be integers\n    event_label: id, // id unique to current page load\n    non_interaction: true, // avoids affecting bounce rate.\n  })\n}\n```\n\n##Bonus\n* **The incredible amount of examples available in the Next.js GitHub repository**.\n    * If you haven't already stumbled onto them, the [Next.js GitHub repository contains an examples directory](https://github.com/vercel/next.js/tree/canary/examples) that is full of examples. These show you how to use technologies such as [Tailwind CSS](https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss), [TypeScript](https://github.com/vercel/next.js/tree/canary/examples/with-typescript) and various CMSs such as [Contentful](https://github.com/vercel/next.js/tree/canary/examples/cms-contentful) with Next.js. You can use `create-next-app` to download an example.\n\n    * *When I am incorporating new technology into an existing Next.js application, the example directory is the first place I check for guidance on how to integrate it.*\n\n##Final words\nThese are just a few of the features that Next.js includes that can automatically improve your application without having to install any external dependencies.\n\nIf you liked this article, hit the like button. Something I can do better? Leave a comment!\n\nThanks for reading!","positive_reactions_count":50,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--rFOZu6vi--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/nywah7c3642ro5euoaqs.png","tag_list":["webdev","javascript","nextjs","react"],"canonical_url":"https://wallis.dev/blog/5-built-in-nextjs-features-to-check-out","user":{"name":"James Wallis","username":"jameswallis","twitter_username":null,"github_username":"james-wallis","website_url":"https://wallis.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--aDpGiyQ3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436375/3c47ee9b-9ceb-4a43-b28a-3ac3e65d0173.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--Lbolzeyu--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436375/3c47ee9b-9ceb-4a43-b28a-3ac3e65d0173.jpeg"},"localSlug":"5-built-in-nextjs-features-to-check-out","markdown":"---\ndescription: \"When you start to use Next.js, it’s easy to overlook some incredible built-in features such as exporting as a static app and Incremental Static Regeneration\"\n---\n## Introduction\n\nRecently I've been using [Next.js](https://nextjs.org/) both at work and on after-work projects. Next.js is React framework that enables functionality such as server-side rendering and generating static websites. It has become my go-to technology when I'm building a frontend application, overtaking plain old React. \n\nWith Next.js you get many things out of the box such as built-in routing, automatic code splitting and it will even decide whether your app can be statically rendered or needs to be rendered server-side on every request - all of this without any configuration. In fact, when creating a new React application I default to using [`create-next-app`](https://nextjs.org/docs/api-reference/create-next-app) as opposed to [`create-react-app`](https://github.com/facebook/create-react-app).\n\nDuring my time developing with Next.js I discovered a few features which are easy to miss when you're just getting started. Some of these features helped me solve some problems I was having with my application. \n\n## Features you should check out 🤩\n\n1. **Export your Next.js application into [static HTML using `next export`](https://nextjs.org/docs/advanced-features/static-html-export)**. \n    * Giving you the ability to run it without a running Node.js server while still being able to make data-fetching requests at build time using `getStaticProps`. This feature bridges the gap between Next.js and its longtime alternative [Gatsby](https://www.gatsbyjs.com/) which is exclusively a static site generator.\n    * *I've used `next export` to host a Next.js site on GitHub Pages (although with issues that were solved with the subsequent feature).*\n\n1. **The `next.config.js` [`assetPrefix`](https://nextjs.org/docs/api-reference/next.config.js/cdn-support-with-asset-prefix) and [`basePath`](https://nextjs.org/docs/api-reference/next.config.js/basepath) options**. \n    * On its own `assetPrefix` allows you to prefix all URLs to assets, like images, so that you can use assets hosted on a CDN. While `basePath` provides the ability to host the app on the subpath of a domain such as `https://domain.com/app-on-this-subpath`.\n    * *[In the past I've utilised `next export`, `assetPrefix` and `basePath` together to host a Next.js app on GitHub Pages](https://dev.to/jameswallis/next-js-basepath-and-why-its-awesome-for-github-pages-and-static-sites-41ba) - without `assetPrefix` and `basePath` you are unable to host a Next.js project on GitHub pages (without a custom domain) as it puts them on a subpath.*\n\n1. **[Incremental Static Regeneration](https://nextjs.org/docs/basic-features/data-fetching#incremental-static-regeneration)**. \n    * A feature of `getStaticProps` which allows you to regenerate a static page while your app is running. It works by triggering a page rebuild in the background, which fetches updated page data, and replaces the existing HTML page with the newly generated one once the build has completed.\n    * *I haven't tried this feature but will in the future as it is a better alternative to completely rebuilding a static Next.js application each time data that it relies on changes.*\n\n1. **[Internationalized (i18n) routing](https://nextjs.org/docs/advanced-features/i18n-routing)**. \n    * If you're building a website that will be available in different countries, this feature is a game-changer. It makes supporting multiple languages simpler by enabling you to provide a list of supported locales which Next.js can read and automatically set up routing to ensure that users see the correct locale for their country. You can assign a default locale that will be used when no matching locale is detected for a user. Next.js supports both domain routing (`example.com`, `example.fr`) and subpath routing (`example.com/en`, `example.com/fr`) meaning it doesn't restrict how you plan to host your application.\n    * *If I ever decide to make my website multi-lingual or work on a global project, this is a feature I will definitely be using.*\n\n1. **[Measuring Performance - `reportWebVitals`](https://nextjs.org/docs/advanced-features/measuring-performance)**.\n    * Next.js contains a built-in relayer allowing you to analyse and measure the performance of your application. To activate this you use the built-in function `reportWebVitals`. Next.js calls `reportWebVitals` with a single `metrics` parameter, an object containing various properties such as an `id`, the `startTime` of a metric and a `value` which can be the duration of a metric. This function will be called when running on the client-side. In development, you can simply log out the values to easily measure the performance of your application. In production, however, [you can use this function to send the `metrics` to your own analytical service](https://nextjs.org/docs/advanced-features/measuring-performance#sending-results-to-analytics). They supply an example of this for use with Google Analytics.\n    * *~~I haven't used `reportWebVitals` but~~ in the future I'll add it to [my Google Analytics article](https://dev.to/jameswallis/adding-google-analytics-to-any-next-js-app-46h1). I use `reportWebVitals` on [my personal website](https://dev.to/jameswallis/i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje).*\n    * Using the following function should provide more accurate metrics than plain Google Analytics usage:\n```javascript\nexport function reportWebVitals({ id, name, label, value }) {\n  // Use `window.gtag` if you initialized Google Analytics as this example:\n  // https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/pages/_document.js\n  window.gtag('event', name, {\n    event_category:\n      label === 'web-vital' ? 'Web Vitals' : 'Next.js custom metric',\n    value: Math.round(name === 'CLS' ? value * 1000 : value), // values must be integers\n    event_label: id, // id unique to current page load\n    non_interaction: true, // avoids affecting bounce rate.\n  })\n}\n```\n\n## Bonus\n* **The incredible amount of examples available in the Next.js GitHub repository**.\n    * If you haven't already stumbled onto them, the [Next.js GitHub repository contains an examples directory](https://github.com/vercel/next.js/tree/canary/examples) that is full of examples. These show you how to use technologies such as [Tailwind CSS](https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss), [TypeScript](https://github.com/vercel/next.js/tree/canary/examples/with-typescript) and various CMSs such as [Contentful](https://github.com/vercel/next.js/tree/canary/examples/cms-contentful) with Next.js. You can use `create-next-app` to download an example.\n\n    * *When I am incorporating new technology into an existing Next.js application, the example directory is the first place I check for guidance on how to integrate it.*\n\n## Final words\nThese are just a few of the features that Next.js includes that can automatically improve your application without having to install any external dependencies.\n\nIf you liked this article, hit the like button. Something I can do better? Leave a comment!\n\nThanks for reading!","html":"<h2>Introduction</h2>\n<p>Recently I've been using <a href=\"https://nextjs.org/\">Next.js</a> both at work and on after-work projects. Next.js is React framework that enables functionality such as server-side rendering and generating static websites. It has become my go-to technology when I'm building a frontend application, overtaking plain old React.</p>\n<p>With Next.js you get many things out of the box such as built-in routing, automatic code splitting and it will even decide whether your app can be statically rendered or needs to be rendered server-side on every request - all of this without any configuration. In fact, when creating a new React application I default to using <a href=\"https://nextjs.org/docs/api-reference/create-next-app\"><code>create-next-app</code></a> as opposed to <a href=\"https://github.com/facebook/create-react-app\"><code>create-react-app</code></a>.</p>\n<p>During my time developing with Next.js I discovered a few features which are easy to miss when you're just getting started. Some of these features helped me solve some problems I was having with my application.</p>\n<h2>Features you should check out 🤩</h2>\n<ol>\n<li>\n<p><strong>Export your Next.js application into <a href=\"https://nextjs.org/docs/advanced-features/static-html-export\">static HTML using <code>next export</code></a></strong>.</p>\n<ul>\n<li>Giving you the ability to run it without a running Node.js server while still being able to make data-fetching requests at build time using <code>getStaticProps</code>. This feature bridges the gap between Next.js and its longtime alternative <a href=\"https://www.gatsbyjs.com/\">Gatsby</a> which is exclusively a static site generator.</li>\n<li><em>I've used <code>next export</code> to host a Next.js site on GitHub Pages (although with issues that were solved with the subsequent feature).</em></li>\n</ul>\n</li>\n<li>\n<p><strong>The <code>next.config.js</code> <a href=\"https://nextjs.org/docs/api-reference/next.config.js/cdn-support-with-asset-prefix\"><code>assetPrefix</code></a> and <a href=\"https://nextjs.org/docs/api-reference/next.config.js/basepath\"><code>basePath</code></a> options</strong>.</p>\n<ul>\n<li>On its own <code>assetPrefix</code> allows you to prefix all URLs to assets, like images, so that you can use assets hosted on a CDN. While <code>basePath</code> provides the ability to host the app on the subpath of a domain such as <code>https://domain.com/app-on-this-subpath</code>.</li>\n<li><em><a href=\"https://dev.to/jameswallis/next-js-basepath-and-why-its-awesome-for-github-pages-and-static-sites-41ba\">In the past I've utilised <code>next export</code>, <code>assetPrefix</code> and <code>basePath</code> together to host a Next.js app on GitHub Pages</a> - without <code>assetPrefix</code> and <code>basePath</code> you are unable to host a Next.js project on GitHub pages (without a custom domain) as it puts them on a subpath.</em></li>\n</ul>\n</li>\n<li>\n<p><strong><a href=\"https://nextjs.org/docs/basic-features/data-fetching#incremental-static-regeneration\">Incremental Static Regeneration</a></strong>.</p>\n<ul>\n<li>A feature of <code>getStaticProps</code> which allows you to regenerate a static page while your app is running. It works by triggering a page rebuild in the background, which fetches updated page data, and replaces the existing HTML page with the newly generated one once the build has completed.</li>\n<li><em>I haven't tried this feature but will in the future as it is a better alternative to completely rebuilding a static Next.js application each time data that it relies on changes.</em></li>\n</ul>\n</li>\n<li>\n<p><strong><a href=\"https://nextjs.org/docs/advanced-features/i18n-routing\">Internationalized (i18n) routing</a></strong>.</p>\n<ul>\n<li>If you're building a website that will be available in different countries, this feature is a game-changer. It makes supporting multiple languages simpler by enabling you to provide a list of supported locales which Next.js can read and automatically set up routing to ensure that users see the correct locale for their country. You can assign a default locale that will be used when no matching locale is detected for a user. Next.js supports both domain routing (<code>example.com</code>, <code>example.fr</code>) and subpath routing (<code>example.com/en</code>, <code>example.com/fr</code>) meaning it doesn't restrict how you plan to host your application.</li>\n<li><em>If I ever decide to make my website multi-lingual or work on a global project, this is a feature I will definitely be using.</em></li>\n</ul>\n</li>\n<li>\n<p><strong><a href=\"https://nextjs.org/docs/advanced-features/measuring-performance\">Measuring Performance - <code>reportWebVitals</code></a></strong>.</p>\n<ul>\n<li>Next.js contains a built-in relayer allowing you to analyse and measure the performance of your application. To activate this you use the built-in function <code>reportWebVitals</code>. Next.js calls <code>reportWebVitals</code> with a single <code>metrics</code> parameter, an object containing various properties such as an <code>id</code>, the <code>startTime</code> of a metric and a <code>value</code> which can be the duration of a metric. This function will be called when running on the client-side. In development, you can simply log out the values to easily measure the performance of your application. In production, however, <a href=\"https://nextjs.org/docs/advanced-features/measuring-performance#sending-results-to-analytics\">you can use this function to send the <code>metrics</code> to your own analytical service</a>. They supply an example of this for use with Google Analytics.</li>\n<li><em><del>I haven't used <code>reportWebVitals</code> but</del> in the future I'll add it to <a href=\"https://dev.to/jameswallis/adding-google-analytics-to-any-next-js-app-46h1\">my Google Analytics article</a>. I use <code>reportWebVitals</code> on <a href=\"https://dev.to/jameswallis/i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje\">my personal website</a>.</em></li>\n<li>Using the following function should provide more accurate metrics than plain Google Analytics usage:</li>\n</ul>\n</li>\n</ol>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reportWebVitals</span>(<span class=\"hljs-params\">{ id, name, label, value }</span>) </span>{\n  <span class=\"hljs-comment\">// Use `window.gtag` if you initialized Google Analytics as this example:</span>\n  <span class=\"hljs-comment\">// https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/pages/_document.js</span>\n  <span class=\"hljs-built_in\">window</span>.gtag(<span class=\"hljs-string\">'event'</span>, name, {\n    <span class=\"hljs-attr\">event_category</span>:\n      label === <span class=\"hljs-string\">'web-vital'</span> ? <span class=\"hljs-string\">'Web Vitals'</span> : <span class=\"hljs-string\">'Next.js custom metric'</span>,\n    <span class=\"hljs-attr\">value</span>: <span class=\"hljs-built_in\">Math</span>.round(name === <span class=\"hljs-string\">'CLS'</span> ? value * <span class=\"hljs-number\">1000</span> : value), <span class=\"hljs-comment\">// values must be integers</span>\n    <span class=\"hljs-attr\">event_label</span>: id, <span class=\"hljs-comment\">// id unique to current page load</span>\n    <span class=\"hljs-attr\">non_interaction</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// avoids affecting bounce rate.</span>\n  })\n}</code></pre>\n<h2>Bonus</h2>\n<ul>\n<li><strong>The incredible amount of examples available in the Next.js GitHub repository</strong>.\n<ul>\n<li>\n<p>If you haven't already stumbled onto them, the <a href=\"https://github.com/vercel/next.js/tree/canary/examples\">Next.js GitHub repository contains an examples directory</a> that is full of examples. These show you how to use technologies such as <a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss\">Tailwind CSS</a>, <a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-typescript\">TypeScript</a> and various CMSs such as <a href=\"https://github.com/vercel/next.js/tree/canary/examples/cms-contentful\">Contentful</a> with Next.js. You can use <code>create-next-app</code> to download an example.</p>\n</li>\n<li>\n<p><em>When I am incorporating new technology into an existing Next.js application, the example directory is the first place I check for guidance on how to integrate it.</em></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Final words</h2>\n<p>These are just a few of the features that Next.js includes that can automatically improve your application without having to install any external dependencies.</p>\n<p>If you liked this article, hit the like button. Something I can do better? Leave a comment!</p>\n<p>Thanks for reading!</p>\n"},{"type_of":"article","id":571577,"title":"How to use Socket.io with Next.js, Express and TypeScript (ES6 import instead of require statements)","description":"I'm currently working on a TypeScript project that is using Socket.io to communicate between a Next.j...","published":true,"published_at":"2021-01-14T17:41:55.721Z","slug":"how-to-use-socket-io-with-next-js-express-and-typescript-es6-import-instead-of-require-statements-1n0k","path":"/jameswallis/how-to-use-socket-io-with-next-js-express-and-typescript-es6-import-instead-of-require-statements-1n0k","url":"https://dev.to/jameswallis/how-to-use-socket-io-with-next-js-express-and-typescript-es6-import-instead-of-require-statements-1n0k","comments_count":3,"public_reactions_count":17,"page_views_count":498,"published_timestamp":"2021-01-14T17:41:55Z","body_markdown":"I'm currently working on a TypeScript project that is using Socket.io to communicate between a Next.js frontend and a custom Express server backend.\n\nWhile setting up Socket.io I struggled to find documentation explaining how you could set up Socket.io in a TypeScript project using the ES6 `import` syntax rather than `require`. It was even more difficult to find anything that explained how it should all fit together with Next.js.\n\n*And so this post was born...*\n\n## If you're starting from scratch...\n\nIf you want to make a TypeScript/Express custom server Next.js project, mine was created by combining the [custom Express Server example](https://github.com/vercel/next.js/tree/canary/examples/custom-server-express) and [custom TypeScript Server example](https://github.com/vercel/next.js/blob/canary/examples/custom-server-typescript/server/index.ts) located in the Next.js repository.\n\nFirst I created the project using the command `npx create-next-app --example custom-server-typescript` to create the custom TypeScript server. Then I retrofitted Express into it by looking at the custom Express server example. The resulting `server.ts` is at the bottom of this post.\n\n## Why didn't I follow another example?\n\nMost of the examples I saw online want you to do something like the following:\n\n```javascript\nimport express from 'express';\n\nconst app = express();\nconst server = require('http').Server(app);\nconst io = require('socket.io')(server);\n```\n\nBut I didn't want two or any random `require` statements in my TypeScript code if I thought they could be avoided.\n\n## My `server.ts` with only ES6 import\n\nThe dependencies you need (In addition to Next.js/React/TypeScript):\n```bash\nnpm install -s express @types/express socket-io\n```\n\nThe code you've been waiting for:\n\n```typescript\nimport express, { Express, Request, Response } from 'express';\nimport * as http from 'http';\nimport next, { NextApiHandler } from 'next';\nimport * as socketio from 'socket.io';\n\nconst port: number = parseInt(process.env.PORT || '3000', 10);\nconst dev: boolean = process.env.NODE_ENV !== 'production';\nconst nextApp = next({ dev });\nconst nextHandler: NextApiHandler = nextApp.getRequestHandler();\n\nnextApp.prepare().then(async() => {\n    const app: Express = express();\n    const server: http.Server = http.createServer(app);\n    const io: socketio.Server = new socketio.Server();\n    io.attach(server);\n\n    app.get('/hello', async (_: Request, res: Response) => {\n        res.send('Hello World')\n    });\n\n    io.on('connection', (socket: socketio.Socket) => {\n        console.log('connection');\n        socket.emit('status', 'Hello from Socket.io');\n\n        socket.on('disconnect', () => {\n            console.log('client disconnected');\n        })\n    });\n\n    app.all('*', (req: any, res: any) => nextHandler(req, res));\n\n    server.listen(port, () => {\n        console.log(`> Ready on http://localhost:${port}`);\n    });\n});\n```\n\n### `server.ts` explanation\n\nThe main difference between my `server.ts` and the ones produced by the Next.js examples is the use of the `http` module to run the server whereas before Express ran it. This is required so that Socket.io can attach to the server once it's setup.\n\nAdditional changes:\n* Changed `app` to be `nextApp` so that it is clearer that it was a `next` app, also changed `handler` to `nextHandler` for the same reason. In addition, it's the convention to use the `app` variable with Express.\n* Used `http.CreateServer()` rather than `const server = require(\"http\").Server(app);` to create the HTTP server.\n* Used `io.attach()` to attach to the HTTP server rather than using require e.g. `const io = require(\"socket.io\")(server);`.\n\n## Summary\n\nThis post demonstrates how to use Socket.io with a Next.js custom server using ES6 `import` rather than `require`.\n\nIf this post helped you drop me a reaction! Found something I could improve? Let me know in the comments.\n\nThanks for reading!\n\n<img width=\"70%\" style=\"width:70%\" src=\"https://media.giphy.com/media/xUPOqo6E1XvWXwlCyQ/giphy.gif\">\n","positive_reactions_count":17,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--64f1pRnW--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/7vw9o474rip6cz4nat0c.png","tag_list":["javascript","tutorial","nextjs","typescript"],"canonical_url":"https://wallis.dev/blog/socketio-with-nextjs-and-es6-import","user":{"name":"James Wallis","username":"jameswallis","twitter_username":null,"github_username":"james-wallis","website_url":"https://wallis.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--aDpGiyQ3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436375/3c47ee9b-9ceb-4a43-b28a-3ac3e65d0173.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--Lbolzeyu--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436375/3c47ee9b-9ceb-4a43-b28a-3ac3e65d0173.jpeg"},"localSlug":"socketio-with-nextjs-and-es6-import","markdown":"I'm currently working on a TypeScript project that is using Socket.io to communicate between a Next.js frontend and a custom Express server backend.\n\nWhile setting up Socket.io I struggled to find documentation explaining how you could set up Socket.io in a TypeScript project using the ES6 `import` syntax rather than `require`. It was even more difficult to find anything that explained how it should all fit together with Next.js.\n\n*And so this post was born...*\n\n## If you're starting from scratch...\n\nIf you want to make a TypeScript/Express custom server Next.js project, mine was created by combining the [custom Express Server example](https://github.com/vercel/next.js/tree/canary/examples/custom-server-express) and [custom TypeScript Server example](https://github.com/vercel/next.js/blob/canary/examples/custom-server-typescript/server/index.ts) located in the Next.js repository.\n\nFirst I created the project using the command `npx create-next-app --example custom-server-typescript` to create the custom TypeScript server. Then I retrofitted Express into it by looking at the custom Express server example. The resulting `server.ts` is at the bottom of this post.\n\n## Why didn't I follow another example?\n\nMost of the examples I saw online want you to do something like the following:\n\n```javascript\nimport express from 'express';\n\nconst app = express();\nconst server = require('http').Server(app);\nconst io = require('socket.io')(server);\n```\n\nBut I didn't want two or any random `require` statements in my TypeScript code if I thought they could be avoided.\n\n## My `server.ts` with only ES6 import\n\nThe dependencies you need (In addition to Next.js/React/TypeScript):\n```bash\nnpm install -s express @types/express socket-io\n```\n\nThe code you've been waiting for:\n\n```typescript\nimport express, { Express, Request, Response } from 'express';\nimport * as http from 'http';\nimport next, { NextApiHandler } from 'next';\nimport * as socketio from 'socket.io';\n\nconst port: number = parseInt(process.env.PORT || '3000', 10);\nconst dev: boolean = process.env.NODE_ENV !== 'production';\nconst nextApp = next({ dev });\nconst nextHandler: NextApiHandler = nextApp.getRequestHandler();\n\nnextApp.prepare().then(async() => {\n    const app: Express = express();\n    const server: http.Server = http.createServer(app);\n    const io: socketio.Server = new socketio.Server();\n    io.attach(server);\n\n    app.get('/hello', async (_: Request, res: Response) => {\n        res.send('Hello World')\n    });\n\n    io.on('connection', (socket: socketio.Socket) => {\n        console.log('connection');\n        socket.emit('status', 'Hello from Socket.io');\n\n        socket.on('disconnect', () => {\n            console.log('client disconnected');\n        })\n    });\n\n    app.all('*', (req: any, res: any) => nextHandler(req, res));\n\n    server.listen(port, () => {\n        console.log(`> Ready on http://localhost:${port}`);\n    });\n});\n```\n\n### `server.ts` explanation\n\nThe main difference between my `server.ts` and the ones produced by the Next.js examples is the use of the `http` module to run the server whereas before Express ran it. This is required so that Socket.io can attach to the server once it's setup.\n\nAdditional changes:\n* Changed `app` to be `nextApp` so that it is clearer that it was a `next` app, also changed `handler` to `nextHandler` for the same reason. In addition, it's the convention to use the `app` variable with Express.\n* Used `http.CreateServer()` rather than `const server = require(\"http\").Server(app);` to create the HTTP server.\n* Used `io.attach()` to attach to the HTTP server rather than using require e.g. `const io = require(\"socket.io\")(server);`.\n\n## Summary\n\nThis post demonstrates how to use Socket.io with a Next.js custom server using ES6 `import` rather than `require`.\n\nIf this post helped you drop me a reaction! Found something I could improve? Let me know in the comments.\n\nThanks for reading!\n\n<img width=\"70%\" style=\"width:70%\" src=\"https://media.giphy.com/media/xUPOqo6E1XvWXwlCyQ/giphy.gif\">\n","html":"<p>I'm currently working on a TypeScript project that is using Socket.io to communicate between a Next.js frontend and a custom Express server backend.</p>\n<p>While setting up Socket.io I struggled to find documentation explaining how you could set up Socket.io in a TypeScript project using the ES6 <code>import</code> syntax rather than <code>require</code>. It was even more difficult to find anything that explained how it should all fit together with Next.js.</p>\n<p><em>And so this post was born...</em></p>\n<h2>If you're starting from scratch...</h2>\n<p>If you want to make a TypeScript/Express custom server Next.js project, mine was created by combining the <a href=\"https://github.com/vercel/next.js/tree/canary/examples/custom-server-express\">custom Express Server example</a> and <a href=\"https://github.com/vercel/next.js/blob/canary/examples/custom-server-typescript/server/index.ts\">custom TypeScript Server example</a> located in the Next.js repository.</p>\n<p>First I created the project using the command <code>npx create-next-app --example custom-server-typescript</code> to create the custom TypeScript server. Then I retrofitted Express into it by looking at the custom Express server example. The resulting <code>server.ts</code> is at the bottom of this post.</p>\n<h2>Why didn't I follow another example?</h2>\n<p>Most of the examples I saw online want you to do something like the following:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> express <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'express'</span>;\n\n<span class=\"hljs-keyword\">const</span> app = express();\n<span class=\"hljs-keyword\">const</span> server = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>).Server(app);\n<span class=\"hljs-keyword\">const</span> io = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'socket.io'</span>)(server);</code></pre>\n<p>But I didn't want two or any random <code>require</code> statements in my TypeScript code if I thought they could be avoided.</p>\n<h2>My <code>server.ts</code> with only ES6 import</h2>\n<p>The dependencies you need (In addition to Next.js/React/TypeScript):</p>\n<pre><code class=\"hljs language-bash\">npm install -s express @types/express socket-io</code></pre>\n<p>The code you've been waiting for:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> express, { Express, Request, Response } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'express'</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> http <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'http'</span>;\n<span class=\"hljs-keyword\">import</span> next, { NextApiHandler } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next'</span>;\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> socketio <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'socket.io'</span>;\n\n<span class=\"hljs-keyword\">const</span> port: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-built_in\">parseInt</span>(process.env.PORT || <span class=\"hljs-string\">'3000'</span>, <span class=\"hljs-number\">10</span>);\n<span class=\"hljs-keyword\">const</span> dev: <span class=\"hljs-built_in\">boolean</span> = process.env.NODE_ENV !== <span class=\"hljs-string\">'production'</span>;\n<span class=\"hljs-keyword\">const</span> nextApp = next({ dev });\n<span class=\"hljs-keyword\">const</span> nextHandler: NextApiHandler = nextApp.getRequestHandler();\n\nnextApp.prepare().then(<span class=\"hljs-keyword\">async</span>() => {\n    <span class=\"hljs-keyword\">const</span> app: Express = express();\n    <span class=\"hljs-keyword\">const</span> server: http.Server = http.createServer(app);\n    <span class=\"hljs-keyword\">const</span> io: socketio.Server = <span class=\"hljs-keyword\">new</span> socketio.Server();\n    io.attach(server);\n\n    app.get(<span class=\"hljs-string\">'/hello'</span>, <span class=\"hljs-keyword\">async</span> (_: Request, <span class=\"hljs-attr\">res</span>: Response) => {\n        res.send(<span class=\"hljs-string\">'Hello World'</span>)\n    });\n\n    io.on(<span class=\"hljs-string\">'connection'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">socket: socketio.Socket</span>) =></span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'connection'</span>);\n        socket.emit(<span class=\"hljs-string\">'status'</span>, <span class=\"hljs-string\">'Hello from Socket.io'</span>);\n\n        socket.on(<span class=\"hljs-string\">'disconnect'</span>, <span class=\"hljs-function\">() =></span> {\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'client disconnected'</span>);\n        })\n    });\n\n    app.all(<span class=\"hljs-string\">'*'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req: <span class=\"hljs-built_in\">any</span>, res: <span class=\"hljs-built_in\">any</span></span>) =></span> nextHandler(req, res));\n\n    server.listen(port, <span class=\"hljs-function\">() =></span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`> Ready on http://localhost:<span class=\"hljs-subst\">${port}</span>`</span>);\n    });\n});</code></pre>\n<h3><code>server.ts</code> explanation</h3>\n<p>The main difference between my <code>server.ts</code> and the ones produced by the Next.js examples is the use of the <code>http</code> module to run the server whereas before Express ran it. This is required so that Socket.io can attach to the server once it's setup.</p>\n<p>Additional changes:</p>\n<ul>\n<li>Changed <code>app</code> to be <code>nextApp</code> so that it is clearer that it was a <code>next</code> app, also changed <code>handler</code> to <code>nextHandler</code> for the same reason. In addition, it's the convention to use the <code>app</code> variable with Express.</li>\n<li>Used <code>http.CreateServer()</code> rather than <code>const server = require(\"http\").Server(app);</code> to create the HTTP server.</li>\n<li>Used <code>io.attach()</code> to attach to the HTTP server rather than using require e.g. <code>const io = require(\"socket.io\")(server);</code>.</li>\n</ul>\n<h2>Summary</h2>\n<p>This post demonstrates how to use Socket.io with a Next.js custom server using ES6 <code>import</code> rather than <code>require</code>.</p>\n<p>If this post helped you drop me a reaction! Found something I could improve? Let me know in the comments.</p>\n<p>Thanks for reading!</p>\n<img width=\"70%\" style=\"width:70%\" src=\"https://media.giphy.com/media/xUPOqo6E1XvWXwlCyQ/giphy.gif\">\n"},{"type_of":"article","id":566589,"title":"Deploying a Next.js project on Vercel in less than three minutes - with a custom domain","description":"My personal website, wallis.dev, used to be hosted in a Docker container on a Digital Ocean droplet t...","published":true,"published_at":"2021-01-10T14:24:38.934Z","slug":"deploying-a-next-js-project-on-vercel-in-less-than-three-minutes-with-a-custom-domain-568o","path":"/jameswallis/deploying-a-next-js-project-on-vercel-in-less-than-three-minutes-with-a-custom-domain-568o","url":"https://dev.to/jameswallis/deploying-a-next-js-project-on-vercel-in-less-than-three-minutes-with-a-custom-domain-568o","comments_count":0,"public_reactions_count":13,"page_views_count":162,"published_timestamp":"2021-01-10T14:24:38Z","body_markdown":"[My personal website, wallis.dev,](https://wallis.dev) used to be hosted in a Docker container on a Digital Ocean droplet that cost me about £5 a month and a few hours each year of effort to maintain. Last week I deployed a website onto Vercel and was immediately impressed with the seamless deployment process - even with the knowledge that Vercel is the company behind Next.js. Since then, I've deployed my website onto Vercel and sunset my Digital Ocean droplet.\n\n## In this blog\n1. [How I used to host my website](#preface)\n1. [Motivations behind moving to Vercel](#motivation)\n1. [Deploying a GitHub project to Vercel](#deploy)\n1. [Adding a custom domain to a Vercel project](#domain)\n\n## Preface <a name=\"preface\"></a>\n\nI first developed [wallis.dev](https://wallis.dev) just over 2 years ago using Next.js 7.0.2. At the time static exporting didn't exist and, as far as I can remember, Vercel's hosting (then Zeit) was in its infancy. As a result, I hosted it as a constantly running Docker container on a Digital Ocean droplet.\n\nMy site had been hosted on Digital Ocean droplet ever since. Not once did I run into issues aside from having to update versions of software I was using to host the site, such as Docker and [Traefik](https://traefik.io/traefik/). However, after researching Vercel and deploying another project on it, it was totally obvious that the droplet was overkill, an item of unnecessary expenditure and a waste of time maintaining it.\n\n## Motivation behind moving to Vercel <a name=\"motivation\"></a>\n\n1. **Better CI/CD pipeline.** Through Vercel's first-class integration with GitHub I was able to move from having to `ssh` onto my droplet, `docker pull` my updated image and restart it's Docker container to just committing the code to GitHub and allowing Vercel automagically build and publish it for me. \n2. **Preview URLs.** Vercel automatically creates a preview URL for every pull request you make. Meaning I can send changes to other people for them to proofread and give feedback on changes without committing them to the main site itself. \n3. **No server maintenance required.** Currently I have to ensure that software on my droplet, such as Docker, Docker Compose and a [Traefik](https://traefik.io/traefik/) container (reverse proxy that makes the website accessible outside the droplet) is kept up-to-date. Moving to Vercel means I can delete the droplet and forget about the complicated Traefik setup.\n4. Last but not least, **to save money**. While £5 a month isn't a huge amount it adds up (£60 a year). If I could host my site for free why wouldn't I!\n\nThose are the 4 major reasons I decided to switch my deployment strategy. Now I'll take you through connecting Vercel and a GitHub repository and deploying your site for the first time.\n\n## Deploying my website onto Vercel for the first time <a name=\"deploy\"></a>\n\nFirst, create an account with Vercel if don't already have one. Then navigate to https://vercel.com/new - the site that is used to create a new project with Vercel.\n\nOnce you've navigated to https://vercel.com/new you should see an `Import Git Repository` input that looks like the following:\n\n![Import Git Repository screen](https://dev-to-uploads.s3.amazonaws.com/i/wq065v0sko16iexzv1tq.png)\n\nYou want to select the `Import` button next to the GitHub repository of your choice. If it isn't appearing use the search to locate your repository:\n\n![Import Git Repository screen narrowed down using search](https://dev-to-uploads.s3.amazonaws.com/i/tdbbx2d06bib197vfqm3.png)\n\nNext, you'll be asked to `Select Vercel Scope`. As this is my personal website I'll be using my `Personal Account` - If you like you can create a team but beware this costs money! I'd stick to your personal account unless you know what you're doing.\n\n![Select Vercel Scope screen](https://dev-to-uploads.s3.amazonaws.com/i/kkxm2tzrr9qursvsrbdn.png)\n\nThen you'll see the `Import Project` screen. Here you can name your project within Vercel and select the `Framework Preset`. If you're using a Next.js project it should auto-fill both the Name and Framework by scanning your GitHub repository. \n* If you're using a non-standard build command (i.e. not `npm run build`) or a non-standard build output directory you can enter those into the `Build and Output Settings` input area. This will advise Vercel on how to build your project and where to find it once it's built.\n* To use custom environment variables with your project add them through the `Environment Variables` input area.\n\nAside from changing the `Project Name`, I left all values as default. This is how my `Import Project` screen looked:\n\n![Import Project screen](https://dev-to-uploads.s3.amazonaws.com/i/a830ctjpmgjwbkbc3j5o.png)\n\nThen just hit `Deploy`! Vercel will verify that your project builds before creating an initial deployment for your website, publishing it to a placeholder URL which will look something like `personal-website.james-wallis.vercel.app`.\n\nWhen you clicked `Deploy` you should have seen the deployment screen appear alongside the, now greyed out, setup wizard:\n\n![Initial Deployment screen](https://dev-to-uploads.s3.amazonaws.com/i/i4rpetnnh9hitbhd6g1t.png)\n\nWhen the deploy has succeeded you will be greeted by this screen:\n\n![Congratulations screen](https://dev-to-uploads.s3.amazonaws.com/i/vwliv7jv61etk3yvhaxu.png)\n\nWell done, you've deployed your website onto Vercel! From the `Congratulations` screen, you can both visit it in your browser and see it live and also open the Vercel Dashboard to see the live state of your project.\n\n## Adding a custom domain to your Vercel project <a name=\"domain\"></a>\n\n*Prereqs: You already need to own the desired domain name and have access to its DNS records.*\n\nThe second step to hosting [wallis.dev](https://wallis.dev) through Vercel is to connect the `wallis.dev` domain name to my Vercel project.\n\nFollow these instructions to do this:\n\nNavigate to your Vercel Dashboard using the button in the last section. It'll look like this:\n\n![Vercel Dashboard screen](https://dev-to-uploads.s3.amazonaws.com/i/9akpxtzlh7e5fh5lzpi8.png)\n\nThen select `Settings` from the navigation and `Domains` in the side menu of Project Settings. The page should look like so:\n\n![Domain settings screen](https://dev-to-uploads.s3.amazonaws.com/i/h7tk6rw3ni9lcqwfzpw7.png)\n\nThis is the screen where you can add a custom domain to your Vercel project. Using the input box, enter your desired domain name. Then click `Add`. *I'm using `wallis.dev` but you can use a subdomain such as `www.youdomain.com` or `mywebsite.customdomain.com` if you prefer.*\n\n![Domain input](https://dev-to-uploads.s3.amazonaws.com/i/vrib8zsnc8bzcwsg1nsg.png)\n\nYour domain will be added but it will display an \"Invalid Configuration\" error because you need to modify your domain's DNS settings to point at Vercel. Fortunately, Vercel tells you exactly what you need to do to point your domain at your website.\n\nAs I'm using `wallis.dev` I need to add an `A` record to my DNS settings. You can do this by navigating to your domain providers website and you should be able to find provider-specific instructions online.\n\nIf you're using a subdomain such as `www.wallis.dev` you'll need to add a `CNAME` record instead of an `A` record.\n\n*By the way an A record uses a domain name to find the IP address of a computer connected to the internet. The A in A record stands for Address. A CNAME record is a Canonical Name record and maps one domain, rather than an IP address, to another.*\n\nOnce you've configured your DNS settings the Vercel dashboard should appear as the following:\n\n![Working domain screen](https://dev-to-uploads.s3.amazonaws.com/i/px9rw0jwu18ed2x7hwxj.png)\n\nDouble congratulations! You've successfully launched your website onto Vercel and configured it to use your custom domain. Don't worry if you can't reach your project using your custom domain straight away, it might likely take some time for DNS changes to apply - make a coffee and check again later.\n\n## Final words\nHopefully, this article has convinced you to drop whatever complicated hosting solution you created years ago and join the easy life on Vercel!\n\nI know for sure that my development cycle has been dramatically improved by the change, let me know in the comments if yours has too. Maybe you disagree with my motivations and prefer to be in total control? Let me know in any case!\n\nThanks for reading!\n\n## Read my Wallis Consultancy blogs?\n\nIf you've read my Wallis Consultancy blog you'd have seen that I [launched that Next.js project on GitHub Pages](https://dev.to/jameswallis/deploying-a-next-js-app-to-github-pages-24pn). Well since writing them I've moved it to Vercel as well so that I can take advantage of the greater settings available such as having multiple domain names that redirect to one website. \n\n![Wallis Consultancy launched](https://dev-to-uploads.s3.amazonaws.com/i/xz1q6txq43t3r251vztm.png)\n\n\n\n","positive_reactions_count":13,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--DWovAEyS--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/lr4rm1p2pcezmxqs5dqk.png","tag_list":["nextjs","javascript","tutorial","react"],"canonical_url":"https://wallis.dev/blog/deploy-nextjs-on-vercel","user":{"name":"James Wallis","username":"jameswallis","twitter_username":null,"github_username":"james-wallis","website_url":"https://wallis.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--aDpGiyQ3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436375/3c47ee9b-9ceb-4a43-b28a-3ac3e65d0173.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--Lbolzeyu--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436375/3c47ee9b-9ceb-4a43-b28a-3ac3e65d0173.jpeg"},"localSlug":"deploy-nextjs-on-vercel","markdown":"[My personal website, wallis.dev,](https://wallis.dev) used to be hosted in a Docker container on a Digital Ocean droplet that cost me about £5 a month and a few hours each year of effort to maintain. Last week I deployed a website onto Vercel and was immediately impressed with the seamless deployment process - even with the knowledge that Vercel is the company behind Next.js. Since then, I've deployed my website onto Vercel and sunset my Digital Ocean droplet.\n\n## In this blog\n1. [How I used to host my website](#preface)\n1. [Motivations behind moving to Vercel](#motivation)\n1. [Deploying a GitHub project to Vercel](#deploy)\n1. [Adding a custom domain to a Vercel project](#domain)\n\n## Preface <a name=\"preface\"></a>\n\nI first developed [wallis.dev](https://wallis.dev) just over 2 years ago using Next.js 7.0.2. At the time static exporting didn't exist and, as far as I can remember, Vercel's hosting (then Zeit) was in its infancy. As a result, I hosted it as a constantly running Docker container on a Digital Ocean droplet.\n\nMy site had been hosted on Digital Ocean droplet ever since. Not once did I run into issues aside from having to update versions of software I was using to host the site, such as Docker and [Traefik](https://traefik.io/traefik/). However, after researching Vercel and deploying another project on it, it was totally obvious that the droplet was overkill, an item of unnecessary expenditure and a waste of time maintaining it.\n\n## Motivation behind moving to Vercel <a name=\"motivation\"></a>\n\n1. **Better CI/CD pipeline.** Through Vercel's first-class integration with GitHub I was able to move from having to `ssh` onto my droplet, `docker pull` my updated image and restart it's Docker container to just committing the code to GitHub and allowing Vercel automagically build and publish it for me. \n2. **Preview URLs.** Vercel automatically creates a preview URL for every pull request you make. Meaning I can send changes to other people for them to proofread and give feedback on changes without committing them to the main site itself. \n3. **No server maintenance required.** Currently I have to ensure that software on my droplet, such as Docker, Docker Compose and a [Traefik](https://traefik.io/traefik/) container (reverse proxy that makes the website accessible outside the droplet) is kept up-to-date. Moving to Vercel means I can delete the droplet and forget about the complicated Traefik setup.\n4. Last but not least, **to save money**. While £5 a month isn't a huge amount it adds up (£60 a year). If I could host my site for free why wouldn't I!\n\nThose are the 4 major reasons I decided to switch my deployment strategy. Now I'll take you through connecting Vercel and a GitHub repository and deploying your site for the first time.\n\n## Deploying my website onto Vercel for the first time <a name=\"deploy\"></a>\n\nFirst, create an account with Vercel if don't already have one. Then navigate to https://vercel.com/new - the site that is used to create a new project with Vercel.\n\nOnce you've navigated to https://vercel.com/new you should see an `Import Git Repository` input that looks like the following:\n\n![Import Git Repository screen](https://dev-to-uploads.s3.amazonaws.com/i/wq065v0sko16iexzv1tq.png)\n\nYou want to select the `Import` button next to the GitHub repository of your choice. If it isn't appearing use the search to locate your repository:\n\n![Import Git Repository screen narrowed down using search](https://dev-to-uploads.s3.amazonaws.com/i/tdbbx2d06bib197vfqm3.png)\n\nNext, you'll be asked to `Select Vercel Scope`. As this is my personal website I'll be using my `Personal Account` - If you like you can create a team but beware this costs money! I'd stick to your personal account unless you know what you're doing.\n\n![Select Vercel Scope screen](https://dev-to-uploads.s3.amazonaws.com/i/kkxm2tzrr9qursvsrbdn.png)\n\nThen you'll see the `Import Project` screen. Here you can name your project within Vercel and select the `Framework Preset`. If you're using a Next.js project it should auto-fill both the Name and Framework by scanning your GitHub repository. \n* If you're using a non-standard build command (i.e. not `npm run build`) or a non-standard build output directory you can enter those into the `Build and Output Settings` input area. This will advise Vercel on how to build your project and where to find it once it's built.\n* To use custom environment variables with your project add them through the `Environment Variables` input area.\n\nAside from changing the `Project Name`, I left all values as default. This is how my `Import Project` screen looked:\n\n![Import Project screen](https://dev-to-uploads.s3.amazonaws.com/i/a830ctjpmgjwbkbc3j5o.png)\n\nThen just hit `Deploy`! Vercel will verify that your project builds before creating an initial deployment for your website, publishing it to a placeholder URL which will look something like `personal-website.james-wallis.vercel.app`.\n\nWhen you clicked `Deploy` you should have seen the deployment screen appear alongside the, now greyed out, setup wizard:\n\n![Initial Deployment screen](https://dev-to-uploads.s3.amazonaws.com/i/i4rpetnnh9hitbhd6g1t.png)\n\nWhen the deploy has succeeded you will be greeted by this screen:\n\n![Congratulations screen](https://dev-to-uploads.s3.amazonaws.com/i/vwliv7jv61etk3yvhaxu.png)\n\nWell done, you've deployed your website onto Vercel! From the `Congratulations` screen, you can both visit it in your browser and see it live and also open the Vercel Dashboard to see the live state of your project.\n\n## Adding a custom domain to your Vercel project <a name=\"domain\"></a>\n\n*Prereqs: You already need to own the desired domain name and have access to its DNS records.*\n\nThe second step to hosting [wallis.dev](https://wallis.dev) through Vercel is to connect the `wallis.dev` domain name to my Vercel project.\n\nFollow these instructions to do this:\n\nNavigate to your Vercel Dashboard using the button in the last section. It'll look like this:\n\n![Vercel Dashboard screen](https://dev-to-uploads.s3.amazonaws.com/i/9akpxtzlh7e5fh5lzpi8.png)\n\nThen select `Settings` from the navigation and `Domains` in the side menu of Project Settings. The page should look like so:\n\n![Domain settings screen](https://dev-to-uploads.s3.amazonaws.com/i/h7tk6rw3ni9lcqwfzpw7.png)\n\nThis is the screen where you can add a custom domain to your Vercel project. Using the input box, enter your desired domain name. Then click `Add`. *I'm using `wallis.dev` but you can use a subdomain such as `www.youdomain.com` or `mywebsite.customdomain.com` if you prefer.*\n\n![Domain input](https://dev-to-uploads.s3.amazonaws.com/i/vrib8zsnc8bzcwsg1nsg.png)\n\nYour domain will be added but it will display an \"Invalid Configuration\" error because you need to modify your domain's DNS settings to point at Vercel. Fortunately, Vercel tells you exactly what you need to do to point your domain at your website.\n\nAs I'm using `wallis.dev` I need to add an `A` record to my DNS settings. You can do this by navigating to your domain providers website and you should be able to find provider-specific instructions online.\n\nIf you're using a subdomain such as `www.wallis.dev` you'll need to add a `CNAME` record instead of an `A` record.\n\n*By the way an A record uses a domain name to find the IP address of a computer connected to the internet. The A in A record stands for Address. A CNAME record is a Canonical Name record and maps one domain, rather than an IP address, to another.*\n\nOnce you've configured your DNS settings the Vercel dashboard should appear as the following:\n\n![Working domain screen](https://dev-to-uploads.s3.amazonaws.com/i/px9rw0jwu18ed2x7hwxj.png)\n\nDouble congratulations! You've successfully launched your website onto Vercel and configured it to use your custom domain. Don't worry if you can't reach your project using your custom domain straight away, it might likely take some time for DNS changes to apply - make a coffee and check again later.\n\n## Final words\nHopefully, this article has convinced you to drop whatever complicated hosting solution you created years ago and join the easy life on Vercel!\n\nI know for sure that my development cycle has been dramatically improved by the change, let me know in the comments if yours has too. Maybe you disagree with my motivations and prefer to be in total control? Let me know in any case!\n\nThanks for reading!\n\n## Read my Wallis Consultancy blogs?\n\nIf you've read my Wallis Consultancy blog you'd have seen that I [launched that Next.js project on GitHub Pages](https://dev.to/jameswallis/deploying-a-next-js-app-to-github-pages-24pn). Well since writing them I've moved it to Vercel as well so that I can take advantage of the greater settings available such as having multiple domain names that redirect to one website. \n\n![Wallis Consultancy launched](https://dev-to-uploads.s3.amazonaws.com/i/xz1q6txq43t3r251vztm.png)\n\n\n\n","html":"<p><a href=\"https://wallis.dev\">My personal website, wallis.dev,</a> used to be hosted in a Docker container on a Digital Ocean droplet that cost me about £5 a month and a few hours each year of effort to maintain. Last week I deployed a website onto Vercel and was immediately impressed with the seamless deployment process - even with the knowledge that Vercel is the company behind Next.js. Since then, I've deployed my website onto Vercel and sunset my Digital Ocean droplet.</p>\n<h2>In this blog</h2>\n<ol>\n<li><a href=\"#preface\">How I used to host my website</a></li>\n<li><a href=\"#motivation\">Motivations behind moving to Vercel</a></li>\n<li><a href=\"#deploy\">Deploying a GitHub project to Vercel</a></li>\n<li><a href=\"#domain\">Adding a custom domain to a Vercel project</a></li>\n</ol>\n<h2>Preface <a name=\"preface\"></a></h2>\n<p>I first developed <a href=\"https://wallis.dev\">wallis.dev</a> just over 2 years ago using Next.js 7.0.2. At the time static exporting didn't exist and, as far as I can remember, Vercel's hosting (then Zeit) was in its infancy. As a result, I hosted it as a constantly running Docker container on a Digital Ocean droplet.</p>\n<p>My site had been hosted on Digital Ocean droplet ever since. Not once did I run into issues aside from having to update versions of software I was using to host the site, such as Docker and <a href=\"https://traefik.io/traefik/\">Traefik</a>. However, after researching Vercel and deploying another project on it, it was totally obvious that the droplet was overkill, an item of unnecessary expenditure and a waste of time maintaining it.</p>\n<h2>Motivation behind moving to Vercel <a name=\"motivation\"></a></h2>\n<ol>\n<li><strong>Better CI/CD pipeline.</strong> Through Vercel's first-class integration with GitHub I was able to move from having to <code>ssh</code> onto my droplet, <code>docker pull</code> my updated image and restart it's Docker container to just committing the code to GitHub and allowing Vercel automagically build and publish it for me.</li>\n<li><strong>Preview URLs.</strong> Vercel automatically creates a preview URL for every pull request you make. Meaning I can send changes to other people for them to proofread and give feedback on changes without committing them to the main site itself.</li>\n<li><strong>No server maintenance required.</strong> Currently I have to ensure that software on my droplet, such as Docker, Docker Compose and a <a href=\"https://traefik.io/traefik/\">Traefik</a> container (reverse proxy that makes the website accessible outside the droplet) is kept up-to-date. Moving to Vercel means I can delete the droplet and forget about the complicated Traefik setup.</li>\n<li>Last but not least, <strong>to save money</strong>. While £5 a month isn't a huge amount it adds up (£60 a year). If I could host my site for free why wouldn't I!</li>\n</ol>\n<p>Those are the 4 major reasons I decided to switch my deployment strategy. Now I'll take you through connecting Vercel and a GitHub repository and deploying your site for the first time.</p>\n<h2>Deploying my website onto Vercel for the first time <a name=\"deploy\"></a></h2>\n<p>First, create an account with Vercel if don't already have one. Then navigate to <a href=\"https://vercel.com/new\">https://vercel.com/new</a> - the site that is used to create a new project with Vercel.</p>\n<p>Once you've navigated to <a href=\"https://vercel.com/new\">https://vercel.com/new</a> you should see an <code>Import Git Repository</code> input that looks like the following:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/wq065v0sko16iexzv1tq.png\" alt=\"Import Git Repository screen\"></p>\n<p>You want to select the <code>Import</code> button next to the GitHub repository of your choice. If it isn't appearing use the search to locate your repository:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/tdbbx2d06bib197vfqm3.png\" alt=\"Import Git Repository screen narrowed down using search\"></p>\n<p>Next, you'll be asked to <code>Select Vercel Scope</code>. As this is my personal website I'll be using my <code>Personal Account</code> - If you like you can create a team but beware this costs money! I'd stick to your personal account unless you know what you're doing.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/kkxm2tzrr9qursvsrbdn.png\" alt=\"Select Vercel Scope screen\"></p>\n<p>Then you'll see the <code>Import Project</code> screen. Here you can name your project within Vercel and select the <code>Framework Preset</code>. If you're using a Next.js project it should auto-fill both the Name and Framework by scanning your GitHub repository.</p>\n<ul>\n<li>If you're using a non-standard build command (i.e. not <code>npm run build</code>) or a non-standard build output directory you can enter those into the <code>Build and Output Settings</code> input area. This will advise Vercel on how to build your project and where to find it once it's built.</li>\n<li>To use custom environment variables with your project add them through the <code>Environment Variables</code> input area.</li>\n</ul>\n<p>Aside from changing the <code>Project Name</code>, I left all values as default. This is how my <code>Import Project</code> screen looked:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/a830ctjpmgjwbkbc3j5o.png\" alt=\"Import Project screen\"></p>\n<p>Then just hit <code>Deploy</code>! Vercel will verify that your project builds before creating an initial deployment for your website, publishing it to a placeholder URL which will look something like <code>personal-website.james-wallis.vercel.app</code>.</p>\n<p>When you clicked <code>Deploy</code> you should have seen the deployment screen appear alongside the, now greyed out, setup wizard:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/i4rpetnnh9hitbhd6g1t.png\" alt=\"Initial Deployment screen\"></p>\n<p>When the deploy has succeeded you will be greeted by this screen:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/vwliv7jv61etk3yvhaxu.png\" alt=\"Congratulations screen\"></p>\n<p>Well done, you've deployed your website onto Vercel! From the <code>Congratulations</code> screen, you can both visit it in your browser and see it live and also open the Vercel Dashboard to see the live state of your project.</p>\n<h2>Adding a custom domain to your Vercel project <a name=\"domain\"></a></h2>\n<p><em>Prereqs: You already need to own the desired domain name and have access to its DNS records.</em></p>\n<p>The second step to hosting <a href=\"https://wallis.dev\">wallis.dev</a> through Vercel is to connect the <code>wallis.dev</code> domain name to my Vercel project.</p>\n<p>Follow these instructions to do this:</p>\n<p>Navigate to your Vercel Dashboard using the button in the last section. It'll look like this:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/9akpxtzlh7e5fh5lzpi8.png\" alt=\"Vercel Dashboard screen\"></p>\n<p>Then select <code>Settings</code> from the navigation and <code>Domains</code> in the side menu of Project Settings. The page should look like so:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/h7tk6rw3ni9lcqwfzpw7.png\" alt=\"Domain settings screen\"></p>\n<p>This is the screen where you can add a custom domain to your Vercel project. Using the input box, enter your desired domain name. Then click <code>Add</code>. <em>I'm using <code>wallis.dev</code> but you can use a subdomain such as <code>www.youdomain.com</code> or <code>mywebsite.customdomain.com</code> if you prefer.</em></p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/vrib8zsnc8bzcwsg1nsg.png\" alt=\"Domain input\"></p>\n<p>Your domain will be added but it will display an \"Invalid Configuration\" error because you need to modify your domain's DNS settings to point at Vercel. Fortunately, Vercel tells you exactly what you need to do to point your domain at your website.</p>\n<p>As I'm using <code>wallis.dev</code> I need to add an <code>A</code> record to my DNS settings. You can do this by navigating to your domain providers website and you should be able to find provider-specific instructions online.</p>\n<p>If you're using a subdomain such as <code>www.wallis.dev</code> you'll need to add a <code>CNAME</code> record instead of an <code>A</code> record.</p>\n<p><em>By the way an A record uses a domain name to find the IP address of a computer connected to the internet. The A in A record stands for Address. A CNAME record is a Canonical Name record and maps one domain, rather than an IP address, to another.</em></p>\n<p>Once you've configured your DNS settings the Vercel dashboard should appear as the following:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/px9rw0jwu18ed2x7hwxj.png\" alt=\"Working domain screen\"></p>\n<p>Double congratulations! You've successfully launched your website onto Vercel and configured it to use your custom domain. Don't worry if you can't reach your project using your custom domain straight away, it might likely take some time for DNS changes to apply - make a coffee and check again later.</p>\n<h2>Final words</h2>\n<p>Hopefully, this article has convinced you to drop whatever complicated hosting solution you created years ago and join the easy life on Vercel!</p>\n<p>I know for sure that my development cycle has been dramatically improved by the change, let me know in the comments if yours has too. Maybe you disagree with my motivations and prefer to be in total control? Let me know in any case!</p>\n<p>Thanks for reading!</p>\n<h2>Read my Wallis Consultancy blogs?</h2>\n<p>If you've read my Wallis Consultancy blog you'd have seen that I <a href=\"https://dev.to/jameswallis/deploying-a-next-js-app-to-github-pages-24pn\">launched that Next.js project on GitHub Pages</a>. Well since writing them I've moved it to Vercel as well so that I can take advantage of the greater settings available such as having multiple domain names that redirect to one website.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/xz1q6txq43t3r251vztm.png\" alt=\"Wallis Consultancy launched\"></p>\n"},{"type_of":"article","id":530778,"title":"Quickly adding Google Analytics to Next.js with FAQs","description":"This article not only demonstrates how to add Google Analytics to a Next.js app but also explains what you're actually doing.","published":true,"published_at":"2020-12-30T14:44:44.789Z","slug":"adding-google-analytics-to-any-next-js-app-46h1","path":"/jameswallis/adding-google-analytics-to-any-next-js-app-46h1","url":"https://dev.to/jameswallis/adding-google-analytics-to-any-next-js-app-46h1","comments_count":0,"public_reactions_count":18,"page_views_count":390,"published_timestamp":"2020-12-30T14:44:44Z","body_markdown":"---\ndescription: \"This article not only demonstrates how to add Google Analytics to a Next.js app but also explains what you're actually doing.\"\n---\nI use Google Analytics to track how many users are visiting websites that I develop on a weekly basis, how long they stay on the site and what are the most popular pages.\n\nIt's easy to add to your site and in minutes you'll go from having no clue how people are using your website to being able to record and analyse every detail on every interaction a user has with your website.\n\nI'll split this post up into 3 parts:\n1. What we're doing\n2. How to add Google Analytics to Next.js\n3. FAQs - A lot of the Google Analytics tutorials don't explain why you should do things a certain way. For example, why are we using this Next.js `_document.js` file and what does it do? or how to I get a `GA_MEASUREMENT_ID`?\n\n**Key takeaway** if you're glancing at this article:\n> *Adding Google Analytics to a Next.js project is easy and you can copy and paste the code below. I wouldn't use an external NPM module as you're just adding another dependency that can become outdated in the future.*\n\n## Why add Google Analytics\n\n> Google Analytics is a web analytics service offered by Google that tracks and reports website traffic.\n\nI've recently begun adding Google Analytics to every website that I've developed including [wallisconsultancy.co.uk which I recently developed alongside a series of tutorial blog posts](https://dev.to/jameswallis/modernising-an-existing-bootstrap-website-using-next-js-and-tailwind-css-c2g). Google Analytics is great at tracking website usage and more, although I currently use it purely to monitor user count, most popular pages and page performance which is all reported on the Google Analytics dashboard.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/3cew7a2pc9gsnwiq4fyt.png)\n*A Google Analytics dashboard*\n\nIn addition to the above, it's **free** and takes minutes to set up with a Next.js project (if you follow this post 😉).\n\n## Adding Google Analytics to a Next.js project\n\n### Prerequisites\n\n1. A Next.js project hosted on a domain that can be used with Google Analytics preferably with at least one page. - [Vercel (creators of Next.js) is the easiest place to host your website](https://vercel.com/solutions/nextjs).\n2. A Google Analytics account with a created property and the ID (known as a `GA_MEASUREMENT_ID`) that is given to you and is used to identify your website with Google. Keep the `GA_MEASUREMENT_ID` handy, you'll need it. - *I've covered this in the FAQs if you haven't used Google Analytics before*.\n\n### Add/modify the `_document.js` file in your Next.js project\n\nCreate a [custom `_document.js`](https://nextjs.org/docs/advanced-features/custom-document) file in your `pages` directory and add the following code:\n*If you're using TypeScript, check out this [custom `_document.tsx` on GitHub](https://github.com/james-wallis/TheVECentre/blob/main/pages/_document.tsx) instead.*\n\n```javascript\nimport Document, {\n  Html, Head, Main, NextScript,\n} from 'next/document';\n\nclass MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    const initialProps = await Document.getInitialProps(ctx);\n    return { ...initialProps };\n  }\n\n  render() {\n    const GA_MEASUREMENT_ID = 'GA_MEASUREMENT_ID'; // Paste your GTAG here\n    return (\n      <Html lang=\"en\">\n        <Head>\n          <script\n            async\n            src={`https://www.googletagmanager.com/gtag/js?id=${GA_MEASUREMENT_ID}`}\n          />\n          <script\n            // eslint-disable-next-line react/no-danger\n            dangerouslySetInnerHTML={{\n              __html: `\n                window.dataLayer = window.dataLayer || [];\n                function gtag(){dataLayer.push(arguments);}\n                gtag('js', new Date());\n                gtag('config', '${GA_MEASUREMENT_ID}', {\n                  page_path: window.location.pathname,\n                });\n              `,\n            }}\n          />\n        </Head>\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n\nexport default MyDocument;\n```\n\nIf you've already got a custom `_document.js` then the key parts are within the `Head` component (remember to add the `GA_MEASUREMENT_ID` variable):\n```javascript\n<Head>\n  <script\n    async\n    src={`https://www.googletagmanager.com/gtag/js?id=${GA_MEASUREMENT_ID}`}\n  />\n  <script\n    // eslint-disable-next-line react/no-danger\n    dangerouslySetInnerHTML={{\n      __html: `\n        window.dataLayer = window.dataLayer || [];\n        function gtag(){dataLayer.push(arguments);}\n        gtag('js', new Date());\n        gtag('config', '${GA_MEASUREMENT_ID}', {\n          page_path: window.location.pathname,\n        });\n      `,\n    }}\n  />\n</Head>\n```\n\nExplanation:\n* In the first `script` tag the Google Analytics JavaScript file is loaded into the browser.\n* In the second `script` tag the Google Analytics code is initialised and tracking is started on the current page.\n\nOnce you've added your `GA_MEASUREMENT_ID` and pushed your changes into a live environment such as Vercel, you should see data appearing on your Google Analytics dashboard - if you don't, try visiting your website!\n\nAnd that is all it takes to add Google Analytics to your Next.js application - told you it was easy! \n\n## FAQs\n\n**What does the code above load onto my website?**\nThe `gtag.js` is a script which allows you to send event data to Google, in this case it's used for Google Analytics. Read more about it and the `GA_MEASUREMENT_ID` at [Google Developers - `gtag.js`](https://developers.google.com/analytics/devguides/collection/gtagjs).\n\n**What is a `GA_MEASUREMENT_ID` and how do I get one?**\nThe `GA_MEASUREMENT_ID` is the ID of the Google Analytics property that you want to collect data for. To get a `GA_MEASUREMENT_ID` you need to create a new property on Google Analytics - you can follow this [Google Support article to learn how to sign up to Google Analytics and create a property](https://support.google.com/analytics/answer/10269537).\n\n**What are the `_document.js` and `_app.js` files in a Next.js project?**\nThe Next.js specific `_document.js` and `_app.js` are two special files that live in the `pages` directory but are not rendered as pages by Next.js (you can't reach `/_document` in your browser).\n\n*Note: The `Head` component used in `_document.js`'s `Head` different to `next/head` and should be used for common code on every page.*\n\n`_document.js` is rendered server-side only and controls the `<html>` and `<body>` tags of HTML. It can be used to add custom elements into your `<html>` tag that will be the same on every page such as the Google Analytics code or a favicon.\n\n`_app.js` is rendered client-side, potentially on every page change. It's essentially a wrapper around each Next.js page that you have. It can be used to maintain a consistent layout on each page, add a custom CSS stylesheet or persist state on a page change.\n\nYou can read more about these on the Next.js website:\n* [Custom `_document.js`](https://nextjs.org/docs/advanced-features/custom-document)\n* [Custom `_app.js`](https://nextjs.org/docs/advanced-features/custom-app)\n\n**Why use the `_document.js` file over `_app.js`?**\nThe `Head` component (from `next/document`) that is used in `_document.js` is rendered serverside whereas the `Head` component (from `next/head`) in `_app.js` will update on each page change meaning that the Google Analytics script may be reloaded which could slow down the site.","positive_reactions_count":18,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--DK3KN3Uz--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/mvf2e7bf9m74bgku1ovm.png","tag_list":["tutorial","react","javascript","nextjs"],"canonical_url":"https://wallis.dev/blog/nextjs-google-analytics","user":{"name":"James Wallis","username":"jameswallis","twitter_username":null,"github_username":"james-wallis","website_url":"https://wallis.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--aDpGiyQ3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436375/3c47ee9b-9ceb-4a43-b28a-3ac3e65d0173.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--Lbolzeyu--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436375/3c47ee9b-9ceb-4a43-b28a-3ac3e65d0173.jpeg"},"localSlug":"nextjs-google-analytics","markdown":"---\ndescription: \"This article not only demonstrates how to add Google Analytics to a Next.js app but also explains what you're actually doing.\"\n---\nI use Google Analytics to track how many users are visiting websites that I develop on a weekly basis, how long they stay on the site and what are the most popular pages.\n\nIt's easy to add to your site and in minutes you'll go from having no clue how people are using your website to being able to record and analyse every detail on every interaction a user has with your website.\n\nI'll split this post up into 3 parts:\n1. What we're doing\n2. How to add Google Analytics to Next.js\n3. FAQs - A lot of the Google Analytics tutorials don't explain why you should do things a certain way. For example, why are we using this Next.js `_document.js` file and what does it do? or how to I get a `GA_MEASUREMENT_ID`?\n\n**Key takeaway** if you're glancing at this article:\n> *Adding Google Analytics to a Next.js project is easy and you can copy and paste the code below. I wouldn't use an external NPM module as you're just adding another dependency that can become outdated in the future.*\n\n## Why add Google Analytics\n\n> Google Analytics is a web analytics service offered by Google that tracks and reports website traffic.\n\nI've recently begun adding Google Analytics to every website that I've developed including [wallisconsultancy.co.uk which I recently developed alongside a series of tutorial blog posts](https://dev.to/jameswallis/modernising-an-existing-bootstrap-website-using-next-js-and-tailwind-css-c2g). Google Analytics is great at tracking website usage and more, although I currently use it purely to monitor user count, most popular pages and page performance which is all reported on the Google Analytics dashboard.\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/3cew7a2pc9gsnwiq4fyt.png)\n*A Google Analytics dashboard*\n\nIn addition to the above, it's **free** and takes minutes to set up with a Next.js project (if you follow this post 😉).\n\n## Adding Google Analytics to a Next.js project\n\n### Prerequisites\n\n1. A Next.js project hosted on a domain that can be used with Google Analytics preferably with at least one page. - [Vercel (creators of Next.js) is the easiest place to host your website](https://vercel.com/solutions/nextjs).\n2. A Google Analytics account with a created property and the ID (known as a `GA_MEASUREMENT_ID`) that is given to you and is used to identify your website with Google. Keep the `GA_MEASUREMENT_ID` handy, you'll need it. - *I've covered this in the FAQs if you haven't used Google Analytics before*.\n\n### Add/modify the `_document.js` file in your Next.js project\n\nCreate a [custom `_document.js`](https://nextjs.org/docs/advanced-features/custom-document) file in your `pages` directory and add the following code:\n*If you're using TypeScript, check out this [custom `_document.tsx` on GitHub](https://github.com/james-wallis/TheVECentre/blob/main/pages/_document.tsx) instead.*\n\n```javascript\nimport Document, {\n  Html, Head, Main, NextScript,\n} from 'next/document';\n\nclass MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    const initialProps = await Document.getInitialProps(ctx);\n    return { ...initialProps };\n  }\n\n  render() {\n    const GA_MEASUREMENT_ID = 'GA_MEASUREMENT_ID'; // Paste your GTAG here\n    return (\n      <Html lang=\"en\">\n        <Head>\n          <script\n            async\n            src={`https://www.googletagmanager.com/gtag/js?id=${GA_MEASUREMENT_ID}`}\n          />\n          <script\n            // eslint-disable-next-line react/no-danger\n            dangerouslySetInnerHTML={{\n              __html: `\n                window.dataLayer = window.dataLayer || [];\n                function gtag(){dataLayer.push(arguments);}\n                gtag('js', new Date());\n                gtag('config', '${GA_MEASUREMENT_ID}', {\n                  page_path: window.location.pathname,\n                });\n              `,\n            }}\n          />\n        </Head>\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n\nexport default MyDocument;\n```\n\nIf you've already got a custom `_document.js` then the key parts are within the `Head` component (remember to add the `GA_MEASUREMENT_ID` variable):\n```javascript\n<Head>\n  <script\n    async\n    src={`https://www.googletagmanager.com/gtag/js?id=${GA_MEASUREMENT_ID}`}\n  />\n  <script\n    // eslint-disable-next-line react/no-danger\n    dangerouslySetInnerHTML={{\n      __html: `\n        window.dataLayer = window.dataLayer || [];\n        function gtag(){dataLayer.push(arguments);}\n        gtag('js', new Date());\n        gtag('config', '${GA_MEASUREMENT_ID}', {\n          page_path: window.location.pathname,\n        });\n      `,\n    }}\n  />\n</Head>\n```\n\nExplanation:\n* In the first `script` tag the Google Analytics JavaScript file is loaded into the browser.\n* In the second `script` tag the Google Analytics code is initialised and tracking is started on the current page.\n\nOnce you've added your `GA_MEASUREMENT_ID` and pushed your changes into a live environment such as Vercel, you should see data appearing on your Google Analytics dashboard - if you don't, try visiting your website!\n\nAnd that is all it takes to add Google Analytics to your Next.js application - told you it was easy! \n\n## FAQs\n\n**What does the code above load onto my website?**\nThe `gtag.js` is a script which allows you to send event data to Google, in this case it's used for Google Analytics. Read more about it and the `GA_MEASUREMENT_ID` at [Google Developers - `gtag.js`](https://developers.google.com/analytics/devguides/collection/gtagjs).\n\n**What is a `GA_MEASUREMENT_ID` and how do I get one?**\nThe `GA_MEASUREMENT_ID` is the ID of the Google Analytics property that you want to collect data for. To get a `GA_MEASUREMENT_ID` you need to create a new property on Google Analytics - you can follow this [Google Support article to learn how to sign up to Google Analytics and create a property](https://support.google.com/analytics/answer/10269537).\n\n**What are the `_document.js` and `_app.js` files in a Next.js project?**\nThe Next.js specific `_document.js` and `_app.js` are two special files that live in the `pages` directory but are not rendered as pages by Next.js (you can't reach `/_document` in your browser).\n\n*Note: The `Head` component used in `_document.js`'s `Head` different to `next/head` and should be used for common code on every page.*\n\n`_document.js` is rendered server-side only and controls the `<html>` and `<body>` tags of HTML. It can be used to add custom elements into your `<html>` tag that will be the same on every page such as the Google Analytics code or a favicon.\n\n`_app.js` is rendered client-side, potentially on every page change. It's essentially a wrapper around each Next.js page that you have. It can be used to maintain a consistent layout on each page, add a custom CSS stylesheet or persist state on a page change.\n\nYou can read more about these on the Next.js website:\n* [Custom `_document.js`](https://nextjs.org/docs/advanced-features/custom-document)\n* [Custom `_app.js`](https://nextjs.org/docs/advanced-features/custom-app)\n\n**Why use the `_document.js` file over `_app.js`?**\nThe `Head` component (from `next/document`) that is used in `_document.js` is rendered serverside whereas the `Head` component (from `next/head`) in `_app.js` will update on each page change meaning that the Google Analytics script may be reloaded which could slow down the site.","html":"<p>I use Google Analytics to track how many users are visiting websites that I develop on a weekly basis, how long they stay on the site and what are the most popular pages.</p>\n<p>It's easy to add to your site and in minutes you'll go from having no clue how people are using your website to being able to record and analyse every detail on every interaction a user has with your website.</p>\n<p>I'll split this post up into 3 parts:</p>\n<ol>\n<li>What we're doing</li>\n<li>How to add Google Analytics to Next.js</li>\n<li>FAQs - A lot of the Google Analytics tutorials don't explain why you should do things a certain way. For example, why are we using this Next.js <code>_document.js</code> file and what does it do? or how to I get a <code>GA_MEASUREMENT_ID</code>?</li>\n</ol>\n<p><strong>Key takeaway</strong> if you're glancing at this article:</p>\n<blockquote>\n<p><em>Adding Google Analytics to a Next.js project is easy and you can copy and paste the code below. I wouldn't use an external NPM module as you're just adding another dependency that can become outdated in the future.</em></p>\n</blockquote>\n<h2>Why add Google Analytics</h2>\n<blockquote>\n<p>Google Analytics is a web analytics service offered by Google that tracks and reports website traffic.</p>\n</blockquote>\n<p>I've recently begun adding Google Analytics to every website that I've developed including <a href=\"https://dev.to/jameswallis/modernising-an-existing-bootstrap-website-using-next-js-and-tailwind-css-c2g\">wallisconsultancy.co.uk which I recently developed alongside a series of tutorial blog posts</a>. Google Analytics is great at tracking website usage and more, although I currently use it purely to monitor user count, most popular pages and page performance which is all reported on the Google Analytics dashboard.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/3cew7a2pc9gsnwiq4fyt.png\" alt=\"Alt Text\">\n<em>A Google Analytics dashboard</em></p>\n<p>In addition to the above, it's <strong>free</strong> and takes minutes to set up with a Next.js project (if you follow this post 😉).</p>\n<h2>Adding Google Analytics to a Next.js project</h2>\n<h3>Prerequisites</h3>\n<ol>\n<li>A Next.js project hosted on a domain that can be used with Google Analytics preferably with at least one page. - <a href=\"https://vercel.com/solutions/nextjs\">Vercel (creators of Next.js) is the easiest place to host your website</a>.</li>\n<li>A Google Analytics account with a created property and the ID (known as a <code>GA_MEASUREMENT_ID</code>) that is given to you and is used to identify your website with Google. Keep the <code>GA_MEASUREMENT_ID</code> handy, you'll need it. - <em>I've covered this in the FAQs if you haven't used Google Analytics before</em>.</li>\n</ol>\n<h3>Add/modify the <code>_document.js</code> file in your Next.js project</h3>\n<p>Create a <a href=\"https://nextjs.org/docs/advanced-features/custom-document\">custom <code>_document.js</code></a> file in your <code>pages</code> directory and add the following code:\n<em>If you're using TypeScript, check out this <a href=\"https://github.com/james-wallis/TheVECentre/blob/main/pages/_document.tsx\">custom <code>_document.tsx</code> on GitHub</a> instead.</em></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> Document, {\n  Html, Head, Main, NextScript,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next/document'</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyDocument</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Document</span> </span>{\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-title\">getInitialProps</span>(<span class=\"hljs-params\">ctx</span>)</span> {\n    <span class=\"hljs-keyword\">const</span> initialProps = <span class=\"hljs-keyword\">await</span> Document.getInitialProps(ctx);\n    <span class=\"hljs-keyword\">return</span> { ...initialProps };\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">const</span> GA_MEASUREMENT_ID = <span class=\"hljs-string\">'GA_MEASUREMENT_ID'</span>; <span class=\"hljs-comment\">// Paste your GTAG here</span>\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Head</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>\n            <span class=\"hljs-attr\">async</span>\n            <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">https:</span>//<span class=\"hljs-attr\">www.googletagmanager.com</span>/<span class=\"hljs-attr\">gtag</span>/<span class=\"hljs-attr\">js</span>?<span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">${GA_MEASUREMENT_ID}</span>`}\n          /></span><span class=\"handlebars\"><span class=\"xml\">\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>\n            // <span class=\"hljs-attr\">eslint-disable-next-line</span> <span class=\"hljs-attr\">react</span>/<span class=\"hljs-attr\">no-danger</span>\n            <span class=\"hljs-attr\">dangerouslySetInnerHTML</span>=</span></span><span class=\"hljs-template-variable\">{{\n              <span class=\"hljs-name\">__html:</span> `\n                window.dataLayer = window.dataLayer || [];\n                function gtag(){dataLayer.push(<span class=\"hljs-name\">arguments</span>);}\n                gtag(<span class=\"hljs-name\">'js'</span>, new Date());\n                gtag(<span class=\"hljs-name\">'config'</span>, <span class=\"hljs-string\">'${GA_MEASUREMENT_ID}'</span>, {\n                  page_path: window.location.pathname,\n                });\n              `,\n            }}</span><span class=\"xml\"><span class=\"hljs-tag\">\n          /></span><span class=\"handlebars\"><span class=\"xml\">\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Head</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Main</span> /></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">NextScript</span> /></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Html</span>></span></span></span></span></span></span>\n    );\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> MyDocument;</code></pre>\n<p>If you've already got a custom <code>_document.js</code> then the key parts are within the <code>Head</code> component (remember to add the <code>GA_MEASUREMENT_ID</code> variable):</p>\n<pre><code class=\"hljs language-javascript\">&#x3C;Head>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>\n    <span class=\"hljs-attr\">async</span>\n    <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">{</span>`<span class=\"hljs-attr\">https:</span>//<span class=\"hljs-attr\">www.googletagmanager.com</span>/<span class=\"hljs-attr\">gtag</span>/<span class=\"hljs-attr\">js</span>?<span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">${GA_MEASUREMENT_ID}</span>`}\n  /></span></span>\n  <span class=\"xml\"><span class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>\n    // <span class=\"hljs-attr\">eslint-disable-next-line</span> <span class=\"hljs-attr\">react</span>/<span class=\"hljs-attr\">no-danger</span>\n    <span class=\"hljs-attr\">dangerouslySetInnerHTML</span>=</span></span><span class=\"hljs-template-variable\">{{\n      <span class=\"hljs-name\">__html:</span> `\n        window.dataLayer = window.dataLayer || [];\n        function gtag(){dataLayer.push(<span class=\"hljs-name\">arguments</span>);}\n        gtag(<span class=\"hljs-name\">'js'</span>, new Date());\n        gtag(<span class=\"hljs-name\">'config'</span>, <span class=\"hljs-string\">'${GA_MEASUREMENT_ID}'</span>, {\n          page_path: window.location.pathname,\n        });\n      `,\n    }}</span><span class=\"xml\"><span class=\"hljs-tag\">\n  /></span></span></span></span>\n&#x3C;/Head></code></pre>\n<p>Explanation:</p>\n<ul>\n<li>In the first <code>script</code> tag the Google Analytics JavaScript file is loaded into the browser.</li>\n<li>In the second <code>script</code> tag the Google Analytics code is initialised and tracking is started on the current page.</li>\n</ul>\n<p>Once you've added your <code>GA_MEASUREMENT_ID</code> and pushed your changes into a live environment such as Vercel, you should see data appearing on your Google Analytics dashboard - if you don't, try visiting your website!</p>\n<p>And that is all it takes to add Google Analytics to your Next.js application - told you it was easy!</p>\n<h2>FAQs</h2>\n<p><strong>What does the code above load onto my website?</strong>\nThe <code>gtag.js</code> is a script which allows you to send event data to Google, in this case it's used for Google Analytics. Read more about it and the <code>GA_MEASUREMENT_ID</code> at <a href=\"https://developers.google.com/analytics/devguides/collection/gtagjs\">Google Developers - <code>gtag.js</code></a>.</p>\n<p><strong>What is a <code>GA_MEASUREMENT_ID</code> and how do I get one?</strong>\nThe <code>GA_MEASUREMENT_ID</code> is the ID of the Google Analytics property that you want to collect data for. To get a <code>GA_MEASUREMENT_ID</code> you need to create a new property on Google Analytics - you can follow this <a href=\"https://support.google.com/analytics/answer/10269537\">Google Support article to learn how to sign up to Google Analytics and create a property</a>.</p>\n<p><strong>What are the <code>_document.js</code> and <code>_app.js</code> files in a Next.js project?</strong>\nThe Next.js specific <code>_document.js</code> and <code>_app.js</code> are two special files that live in the <code>pages</code> directory but are not rendered as pages by Next.js (you can't reach <code>/_document</code> in your browser).</p>\n<p><em>Note: The <code>Head</code> component used in <code>_document.js</code>'s <code>Head</code> different to <code>next/head</code> and should be used for common code on every page.</em></p>\n<p><code>_document.js</code> is rendered server-side only and controls the <code>&#x3C;html></code> and <code>&#x3C;body></code> tags of HTML. It can be used to add custom elements into your <code>&#x3C;html></code> tag that will be the same on every page such as the Google Analytics code or a favicon.</p>\n<p><code>_app.js</code> is rendered client-side, potentially on every page change. It's essentially a wrapper around each Next.js page that you have. It can be used to maintain a consistent layout on each page, add a custom CSS stylesheet or persist state on a page change.</p>\n<p>You can read more about these on the Next.js website:</p>\n<ul>\n<li><a href=\"https://nextjs.org/docs/advanced-features/custom-document\">Custom <code>_document.js</code></a></li>\n<li><a href=\"https://nextjs.org/docs/advanced-features/custom-app\">Custom <code>_app.js</code></a></li>\n</ul>\n<p><strong>Why use the <code>_document.js</code> file over <code>_app.js</code>?</strong>\nThe <code>Head</code> component (from <code>next/document</code>) that is used in <code>_document.js</code> is rendered serverside whereas the <code>Head</code> component (from <code>next/head</code>) in <code>_app.js</code> will update on each page change meaning that the Google Analytics script may be reloaded which could slow down the site.</p>\n"},{"type_of":"article","id":549550,"title":"What I learnt using TDD for Advent of Code (2020)","description":"2020 hasn't been great for anyone, but it has gifted me the ability to work from home and reduced my...","published":true,"published_at":"2020-12-23T10:25:35.309Z","slug":"what-i-learnt-using-tdd-for-advent-of-code-2020-14mc","path":"/jameswallis/what-i-learnt-using-tdd-for-advent-of-code-2020-14mc","url":"https://dev.to/jameswallis/what-i-learnt-using-tdd-for-advent-of-code-2020-14mc","comments_count":3,"public_reactions_count":9,"page_views_count":135,"published_timestamp":"2020-12-23T10:25:35Z","body_markdown":"2020 hasn't been great for anyone, but it has gifted me the ability to work from home and reduced my morning commute to about 30 seconds. As it's December now, I figured I could use the time I've gained from missing the commute and try my hand at this year's Advent of Code.\n\nI used Go and Test Driven Development to complete Advent of Code. I opted for Go over JavaScript, my *usual* language of choice for projects, as one of my goals for the year was to learn it and use it in a personal project. Although I had to pause this due to other comittments. AoC provided a great opportunity to use a different language and pick up some skills!\n\n### Real quick - What is Advent of Code?\n> Advent of Code is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like. People use them as a speed contest, interview prep, company training, university coursework, practice problems, or to challenge each other.\n\n*[Eric Wastl - creator of Advent of Code.](https://adventofcode.com/2020/about)*\n\n### Why did I use TDD?\nOriginally I had no intention of using Test Driven Development to complete Advent of Code. I figured that I could log on each day, write a program and submit the answer - because of course my code would always be 100% flawless. \n\nI found out pretty early on that this approach was wrong for myself as my code, like most, was not always going to work correctly on its first iteration. After attempting the first day and having an answer that *wasn't quite right*, I decided that blindly creating a program was not the correct approach, I needed to have more faith that I was on the right track before submitting my answer.\n\nMoreover, if you look at the way that each Advent of Code task is structured, you'll see that it favours a TDD approach.\n\n**General AoC task structure**\n1. Introduction\n2. Explanation of task\n3. Example input and output\n4. Your task and an input file (which you can copy and paste into a file locally on your machine)\n5. Answer submission box\n\nThe important section for TDD is the example input and output. While their primary function is to further explain the task, we can use them to base our TDD around - instead of using the input we're given for the actual solution, we can use the example input and ensure that when it is used by our program, it always returns the example output.\n\n### What I gained by using TDD\n\nThrough using Test Driven Development to complete tasks in Advent of Code I was able to gain:\n* Confidence that my solution was correct\n  * This was a **huge benefit**, AoC doesn't give you any hints if you supply an incorrect answer so it is easy to get lost trying to find tiny bugs in the program. Using TDD meant that I could have full faith that each function was working as expected.\n* Less time spent debugging the program.\n  * You'll have to debug when a test fails but splitting it up makes bugs so much easier to find.\n* Code quality is improved.\n  * Each function is better defined as time is spent focusing purely on it rather than the whole program.\n* Skills in Go\n  * Learning the language itself.\n  * Reinforcing how I could both write tests and develop using TDD.\n* Skills and experience using TDD to design and write a program.\n  * Obviously.\n\n### Example - How I used TDD for AoC day 4\n\nAs usual the code can be found on my GitHub: [Advent of Code, Day 4 solution - GitHub](https://github.com/james-wallis/adventofcode/tree/main/4).\n\n#### Task overview\n\nI won't go into huge detail to describe the task for day 4 and I'll only focus on part 1. I recommend you read the [brief for AoC day 4 (Passport Processing) on the AoC website.](https://adventofcode.com/2020/day/4)\n\nEssentially the task was to take an input consisting of multiple \"passports\" (if you are already lost - read the brief) and determine how many are valid when compared to the given set of rules.\n\nEach passport was represented by these items:\n```\nbyr (Birth Year)\niyr (Issue Year)\neyr (Expiration Year)\nhgt (Height)\nhcl (Hair Color)\necl (Eye Color)\npid (Passport ID)\ncid (Country ID) - not required to be a valid passport\n```\n\nThe given rules for part one state that each field is required in a passport apart from `cid` (Country ID) which is optional.\n\nSome example passports (separated by a blank line):\n```bash\n# Valid passport\necl:gry pid:860033327 eyr:2020 hcl:#fffffd\nbyr:1937 iyr:2017 cid:147 hgt:183cm\n\n# Invalid passport - missing hgt (height)\niyr:2013 ecl:amb cid:350 eyr:2023 pid:028048884\nhcl:#cfa07d byr:1929\n\n# Valid passport - missing cid (Country ID) but the rules state this isn't required\nhcl:#ae17e1 iyr:2013\neyr:2024\necl:brn pid:760753108 byr:1931\nhgt:179cm\n\n# Invalid passport - missing cid (fine) and byr (Birth Year)\nhcl:#cfa07d eyr:2025 pid:166559648\niyr:2011 ecl:brn hgt:59in\n```\n\n#### Using TDD to solve day 4\n\nI split up the task into separate parts like this:\n1. Read input and convert into a passport\n2. Determine which passports are valid according to the given rules\n3. Count valid passports\n4. Print answer (not tested)\n\nFor **part 1** I created a function called `ConvertLineToPassport` and [three test cases](https://github.com/james-wallis/adventofcode/blob/main/4/passportChecker_test.go#L12) which would convert a given string into a passport. Once the test were created, I implemented the `ConvertLineToPassport` function to read all known parameters (`ecl`, `hgt`, etc) and assign them either their provided value or an empty string if they were not present.\n\nOne of the tests:\n```go\nt.Run(\"converts a valid string into a Passport\", func(t *testing.T) {\n  line := \"ecl:gry pid:860033327 eyr:2020 hcl:#fffffd byr:1937 iyr:2017 cid:147 hgt:183cm\"\n\n  want := Passport{\n    eyeColor:       \"gry\",\n    passportID:     \"860033327\",\n    expirationYear: \"2020\",\n    hairColor:      \"#fffffd\",\n    birthYear:      \"1937\",\n    issueYear:      \"2017\",\n    countryID:      \"147\",\n    height:         \"183cm\",\n  }\n  got := ConvertLineToPassport(line)\n\n  if got != want {\n    t.Errorf(\"got %+v want %+v given, %s and\", got, want, line)\n  }\n})\n```\n\nOnce I had confidence that my code was 100% working, I moved onto part 2.\n\nFor **part 2** I needed to determine whether a given passport was valid. I created the `IsPassportValidPart1` function and [three test cases](https://github.com/james-wallis/adventofcode/blob/main/4/passportChecker_test.go#L74). \n\nAn example test:\n```go\nt.Run(\"returns false as passportID is blank (required)\", func(t *testing.T) {\n  want := false\n  got := IsPassportValidPart1(Passport{\n    eyeColor:       \"gry\",\n    passportID:     \"\",\n    expirationYear: \"2020\",\n    hairColor:      \"#fffffd\",\n    birthYear:      \"1937\",\n    issueYear:      \"2017\",\n    countryID:      \"147\",\n    height:         \"183cm\",\n  })\n\n  if got != want {\n    t.Errorf(\"got %t want %t\", got, want)\n  }\n})\n```\n\nUsing TDD for these parts gave me complete confidence that my code was working as expected meaning that once I'd counted the valid passports, I was sure that my answer would be correct - and it was!\n\nThis task may have been a little simple to highlight the benefits of TDD, but day 4 part 2 required stricter rules and TDD came into its own by ensuring that each rule was implemented correctly. [Check out the tests on GitHub if you don't believe me!](https://github.com/james-wallis/adventofcode/blob/main/4/passportChecker_test.go#L130)\n\n### Summary\n\nIf you check my GitHub you'll see that I've fallen behind on this years Advent of Code, I aim to complete it during the Christmas holidays! Nevertheless I've already gained more than enough skills and experience with Go, TDD and general programming to see that Advent of Code is definitely worth doing each year.\n\nIf you do take on Advent of Code I recommend:\n1. Using TDD and the examples given as input/output - it gives you so much confidence in your solution.\n2. Pick a language that you're not 100% confident in/are learning, you can always change later if the problems become too difficult - you'll gain a lot of skills at a relatively fast pace.\n\nHopefully this was an interesting read!\n\nLet me know in the comments why you took on the 2020 Advent of Code challenge, how far you've got and what approach you took!\n\n\n","positive_reactions_count":9,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--enY4_sOO--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/sm7wdlfj65mqh5u9trrz.png","tag_list":["adventofcode","tdd","go","devjournal"],"canonical_url":"https://wallis.dev/blog/advent-of-code","user":{"name":"James Wallis","username":"jameswallis","twitter_username":null,"github_username":"james-wallis","website_url":"https://wallis.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--aDpGiyQ3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436375/3c47ee9b-9ceb-4a43-b28a-3ac3e65d0173.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--Lbolzeyu--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436375/3c47ee9b-9ceb-4a43-b28a-3ac3e65d0173.jpeg"},"localSlug":"advent-of-code","markdown":"2020 hasn't been great for anyone, but it has gifted me the ability to work from home and reduced my morning commute to about 30 seconds. As it's December now, I figured I could use the time I've gained from missing the commute and try my hand at this year's Advent of Code.\n\nI used Go and Test Driven Development to complete Advent of Code. I opted for Go over JavaScript, my *usual* language of choice for projects, as one of my goals for the year was to learn it and use it in a personal project. Although I had to pause this due to other comittments. AoC provided a great opportunity to use a different language and pick up some skills!\n\n### Real quick - What is Advent of Code?\n> Advent of Code is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like. People use them as a speed contest, interview prep, company training, university coursework, practice problems, or to challenge each other.\n\n*[Eric Wastl - creator of Advent of Code.](https://adventofcode.com/2020/about)*\n\n### Why did I use TDD?\nOriginally I had no intention of using Test Driven Development to complete Advent of Code. I figured that I could log on each day, write a program and submit the answer - because of course my code would always be 100% flawless. \n\nI found out pretty early on that this approach was wrong for myself as my code, like most, was not always going to work correctly on its first iteration. After attempting the first day and having an answer that *wasn't quite right*, I decided that blindly creating a program was not the correct approach, I needed to have more faith that I was on the right track before submitting my answer.\n\nMoreover, if you look at the way that each Advent of Code task is structured, you'll see that it favours a TDD approach.\n\n**General AoC task structure**\n1. Introduction\n2. Explanation of task\n3. Example input and output\n4. Your task and an input file (which you can copy and paste into a file locally on your machine)\n5. Answer submission box\n\nThe important section for TDD is the example input and output. While their primary function is to further explain the task, we can use them to base our TDD around - instead of using the input we're given for the actual solution, we can use the example input and ensure that when it is used by our program, it always returns the example output.\n\n### What I gained by using TDD\n\nThrough using Test Driven Development to complete tasks in Advent of Code I was able to gain:\n* Confidence that my solution was correct\n  * This was a **huge benefit**, AoC doesn't give you any hints if you supply an incorrect answer so it is easy to get lost trying to find tiny bugs in the program. Using TDD meant that I could have full faith that each function was working as expected.\n* Less time spent debugging the program.\n  * You'll have to debug when a test fails but splitting it up makes bugs so much easier to find.\n* Code quality is improved.\n  * Each function is better defined as time is spent focusing purely on it rather than the whole program.\n* Skills in Go\n  * Learning the language itself.\n  * Reinforcing how I could both write tests and develop using TDD.\n* Skills and experience using TDD to design and write a program.\n  * Obviously.\n\n### Example - How I used TDD for AoC day 4\n\nAs usual the code can be found on my GitHub: [Advent of Code, Day 4 solution - GitHub](https://github.com/james-wallis/adventofcode/tree/main/4).\n\n#### Task overview\n\nI won't go into huge detail to describe the task for day 4 and I'll only focus on part 1. I recommend you read the [brief for AoC day 4 (Passport Processing) on the AoC website.](https://adventofcode.com/2020/day/4)\n\nEssentially the task was to take an input consisting of multiple \"passports\" (if you are already lost - read the brief) and determine how many are valid when compared to the given set of rules.\n\nEach passport was represented by these items:\n```\nbyr (Birth Year)\niyr (Issue Year)\neyr (Expiration Year)\nhgt (Height)\nhcl (Hair Color)\necl (Eye Color)\npid (Passport ID)\ncid (Country ID) - not required to be a valid passport\n```\n\nThe given rules for part one state that each field is required in a passport apart from `cid` (Country ID) which is optional.\n\nSome example passports (separated by a blank line):\n```bash\n# Valid passport\necl:gry pid:860033327 eyr:2020 hcl:#fffffd\nbyr:1937 iyr:2017 cid:147 hgt:183cm\n\n# Invalid passport - missing hgt (height)\niyr:2013 ecl:amb cid:350 eyr:2023 pid:028048884\nhcl:#cfa07d byr:1929\n\n# Valid passport - missing cid (Country ID) but the rules state this isn't required\nhcl:#ae17e1 iyr:2013\neyr:2024\necl:brn pid:760753108 byr:1931\nhgt:179cm\n\n# Invalid passport - missing cid (fine) and byr (Birth Year)\nhcl:#cfa07d eyr:2025 pid:166559648\niyr:2011 ecl:brn hgt:59in\n```\n\n#### Using TDD to solve day 4\n\nI split up the task into separate parts like this:\n1. Read input and convert into a passport\n2. Determine which passports are valid according to the given rules\n3. Count valid passports\n4. Print answer (not tested)\n\nFor **part 1** I created a function called `ConvertLineToPassport` and [three test cases](https://github.com/james-wallis/adventofcode/blob/main/4/passportChecker_test.go#L12) which would convert a given string into a passport. Once the test were created, I implemented the `ConvertLineToPassport` function to read all known parameters (`ecl`, `hgt`, etc) and assign them either their provided value or an empty string if they were not present.\n\nOne of the tests:\n```go\nt.Run(\"converts a valid string into a Passport\", func(t *testing.T) {\n  line := \"ecl:gry pid:860033327 eyr:2020 hcl:#fffffd byr:1937 iyr:2017 cid:147 hgt:183cm\"\n\n  want := Passport{\n    eyeColor:       \"gry\",\n    passportID:     \"860033327\",\n    expirationYear: \"2020\",\n    hairColor:      \"#fffffd\",\n    birthYear:      \"1937\",\n    issueYear:      \"2017\",\n    countryID:      \"147\",\n    height:         \"183cm\",\n  }\n  got := ConvertLineToPassport(line)\n\n  if got != want {\n    t.Errorf(\"got %+v want %+v given, %s and\", got, want, line)\n  }\n})\n```\n\nOnce I had confidence that my code was 100% working, I moved onto part 2.\n\nFor **part 2** I needed to determine whether a given passport was valid. I created the `IsPassportValidPart1` function and [three test cases](https://github.com/james-wallis/adventofcode/blob/main/4/passportChecker_test.go#L74). \n\nAn example test:\n```go\nt.Run(\"returns false as passportID is blank (required)\", func(t *testing.T) {\n  want := false\n  got := IsPassportValidPart1(Passport{\n    eyeColor:       \"gry\",\n    passportID:     \"\",\n    expirationYear: \"2020\",\n    hairColor:      \"#fffffd\",\n    birthYear:      \"1937\",\n    issueYear:      \"2017\",\n    countryID:      \"147\",\n    height:         \"183cm\",\n  })\n\n  if got != want {\n    t.Errorf(\"got %t want %t\", got, want)\n  }\n})\n```\n\nUsing TDD for these parts gave me complete confidence that my code was working as expected meaning that once I'd counted the valid passports, I was sure that my answer would be correct - and it was!\n\nThis task may have been a little simple to highlight the benefits of TDD, but day 4 part 2 required stricter rules and TDD came into its own by ensuring that each rule was implemented correctly. [Check out the tests on GitHub if you don't believe me!](https://github.com/james-wallis/adventofcode/blob/main/4/passportChecker_test.go#L130)\n\n### Summary\n\nIf you check my GitHub you'll see that I've fallen behind on this years Advent of Code, I aim to complete it during the Christmas holidays! Nevertheless I've already gained more than enough skills and experience with Go, TDD and general programming to see that Advent of Code is definitely worth doing each year.\n\nIf you do take on Advent of Code I recommend:\n1. Using TDD and the examples given as input/output - it gives you so much confidence in your solution.\n2. Pick a language that you're not 100% confident in/are learning, you can always change later if the problems become too difficult - you'll gain a lot of skills at a relatively fast pace.\n\nHopefully this was an interesting read!\n\nLet me know in the comments why you took on the 2020 Advent of Code challenge, how far you've got and what approach you took!\n\n\n","html":"<p>2020 hasn't been great for anyone, but it has gifted me the ability to work from home and reduced my morning commute to about 30 seconds. As it's December now, I figured I could use the time I've gained from missing the commute and try my hand at this year's Advent of Code.</p>\n<p>I used Go and Test Driven Development to complete Advent of Code. I opted for Go over JavaScript, my <em>usual</em> language of choice for projects, as one of my goals for the year was to learn it and use it in a personal project. Although I had to pause this due to other comittments. AoC provided a great opportunity to use a different language and pick up some skills!</p>\n<h3>Real quick - What is Advent of Code?</h3>\n<blockquote>\n<p>Advent of Code is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language you like. People use them as a speed contest, interview prep, company training, university coursework, practice problems, or to challenge each other.</p>\n</blockquote>\n<p><em><a href=\"https://adventofcode.com/2020/about\">Eric Wastl - creator of Advent of Code.</a></em></p>\n<h3>Why did I use TDD?</h3>\n<p>Originally I had no intention of using Test Driven Development to complete Advent of Code. I figured that I could log on each day, write a program and submit the answer - because of course my code would always be 100% flawless.</p>\n<p>I found out pretty early on that this approach was wrong for myself as my code, like most, was not always going to work correctly on its first iteration. After attempting the first day and having an answer that <em>wasn't quite right</em>, I decided that blindly creating a program was not the correct approach, I needed to have more faith that I was on the right track before submitting my answer.</p>\n<p>Moreover, if you look at the way that each Advent of Code task is structured, you'll see that it favours a TDD approach.</p>\n<p><strong>General AoC task structure</strong></p>\n<ol>\n<li>Introduction</li>\n<li>Explanation of task</li>\n<li>Example input and output</li>\n<li>Your task and an input file (which you can copy and paste into a file locally on your machine)</li>\n<li>Answer submission box</li>\n</ol>\n<p>The important section for TDD is the example input and output. While their primary function is to further explain the task, we can use them to base our TDD around - instead of using the input we're given for the actual solution, we can use the example input and ensure that when it is used by our program, it always returns the example output.</p>\n<h3>What I gained by using TDD</h3>\n<p>Through using Test Driven Development to complete tasks in Advent of Code I was able to gain:</p>\n<ul>\n<li>Confidence that my solution was correct\n<ul>\n<li>This was a <strong>huge benefit</strong>, AoC doesn't give you any hints if you supply an incorrect answer so it is easy to get lost trying to find tiny bugs in the program. Using TDD meant that I could have full faith that each function was working as expected.</li>\n</ul>\n</li>\n<li>Less time spent debugging the program.\n<ul>\n<li>You'll have to debug when a test fails but splitting it up makes bugs so much easier to find.</li>\n</ul>\n</li>\n<li>Code quality is improved.\n<ul>\n<li>Each function is better defined as time is spent focusing purely on it rather than the whole program.</li>\n</ul>\n</li>\n<li>Skills in Go\n<ul>\n<li>Learning the language itself.</li>\n<li>Reinforcing how I could both write tests and develop using TDD.</li>\n</ul>\n</li>\n<li>Skills and experience using TDD to design and write a program.\n<ul>\n<li>Obviously.</li>\n</ul>\n</li>\n</ul>\n<h3>Example - How I used TDD for AoC day 4</h3>\n<p>As usual the code can be found on my GitHub: <a href=\"https://github.com/james-wallis/adventofcode/tree/main/4\">Advent of Code, Day 4 solution - GitHub</a>.</p>\n<h4>Task overview</h4>\n<p>I won't go into huge detail to describe the task for day 4 and I'll only focus on part 1. I recommend you read the <a href=\"https://adventofcode.com/2020/day/4\">brief for AoC day 4 (Passport Processing) on the AoC website.</a></p>\n<p>Essentially the task was to take an input consisting of multiple \"passports\" (if you are already lost - read the brief) and determine how many are valid when compared to the given set of rules.</p>\n<p>Each passport was represented by these items:</p>\n<pre><code>byr (Birth Year)\niyr (Issue Year)\neyr (Expiration Year)\nhgt (Height)\nhcl (Hair Color)\necl (Eye Color)\npid (Passport ID)\ncid (Country ID) - not required to be a valid passport\n</code></pre>\n<p>The given rules for part one state that each field is required in a passport apart from <code>cid</code> (Country ID) which is optional.</p>\n<p>Some example passports (separated by a blank line):</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># Valid passport</span>\necl:gry pid:860033327 eyr:2020 hcl:<span class=\"hljs-comment\">#fffffd</span>\nbyr:1937 iyr:2017 cid:147 hgt:183cm\n\n<span class=\"hljs-comment\"># Invalid passport - missing hgt (height)</span>\niyr:2013 ecl:amb cid:350 eyr:2023 pid:028048884\nhcl:<span class=\"hljs-comment\">#cfa07d byr:1929</span>\n\n<span class=\"hljs-comment\"># Valid passport - missing cid (Country ID) but the rules state this isn't required</span>\nhcl:<span class=\"hljs-comment\">#ae17e1 iyr:2013</span>\neyr:2024\necl:brn pid:760753108 byr:1931\nhgt:179cm\n\n<span class=\"hljs-comment\"># Invalid passport - missing cid (fine) and byr (Birth Year)</span>\nhcl:<span class=\"hljs-comment\">#cfa07d eyr:2025 pid:166559648</span>\niyr:2011 ecl:brn hgt:59in</code></pre>\n<h4>Using TDD to solve day 4</h4>\n<p>I split up the task into separate parts like this:</p>\n<ol>\n<li>Read input and convert into a passport</li>\n<li>Determine which passports are valid according to the given rules</li>\n<li>Count valid passports</li>\n<li>Print answer (not tested)</li>\n</ol>\n<p>For <strong>part 1</strong> I created a function called <code>ConvertLineToPassport</code> and <a href=\"https://github.com/james-wallis/adventofcode/blob/main/4/passportChecker_test.go#L12\">three test cases</a> which would convert a given string into a passport. Once the test were created, I implemented the <code>ConvertLineToPassport</code> function to read all known parameters (<code>ecl</code>, <code>hgt</code>, etc) and assign them either their provided value or an empty string if they were not present.</p>\n<p>One of the tests:</p>\n<pre><code class=\"hljs language-go\">t.Run(<span class=\"hljs-string\">\"converts a valid string into a Passport\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(t *testing.T)</span></span> {\n  line := <span class=\"hljs-string\">\"ecl:gry pid:860033327 eyr:2020 hcl:#fffffd byr:1937 iyr:2017 cid:147 hgt:183cm\"</span>\n\n  want := Passport{\n    eyeColor:       <span class=\"hljs-string\">\"gry\"</span>,\n    passportID:     <span class=\"hljs-string\">\"860033327\"</span>,\n    expirationYear: <span class=\"hljs-string\">\"2020\"</span>,\n    hairColor:      <span class=\"hljs-string\">\"#fffffd\"</span>,\n    birthYear:      <span class=\"hljs-string\">\"1937\"</span>,\n    issueYear:      <span class=\"hljs-string\">\"2017\"</span>,\n    countryID:      <span class=\"hljs-string\">\"147\"</span>,\n    height:         <span class=\"hljs-string\">\"183cm\"</span>,\n  }\n  got := ConvertLineToPassport(line)\n\n  <span class=\"hljs-keyword\">if</span> got != want {\n    t.Errorf(<span class=\"hljs-string\">\"got %+v want %+v given, %s and\"</span>, got, want, line)\n  }\n})</code></pre>\n<p>Once I had confidence that my code was 100% working, I moved onto part 2.</p>\n<p>For <strong>part 2</strong> I needed to determine whether a given passport was valid. I created the <code>IsPassportValidPart1</code> function and <a href=\"https://github.com/james-wallis/adventofcode/blob/main/4/passportChecker_test.go#L74\">three test cases</a>.</p>\n<p>An example test:</p>\n<pre><code class=\"hljs language-go\">t.Run(<span class=\"hljs-string\">\"returns false as passportID is blank (required)\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(t *testing.T)</span></span> {\n  want := <span class=\"hljs-literal\">false</span>\n  got := IsPassportValidPart1(Passport{\n    eyeColor:       <span class=\"hljs-string\">\"gry\"</span>,\n    passportID:     <span class=\"hljs-string\">\"\"</span>,\n    expirationYear: <span class=\"hljs-string\">\"2020\"</span>,\n    hairColor:      <span class=\"hljs-string\">\"#fffffd\"</span>,\n    birthYear:      <span class=\"hljs-string\">\"1937\"</span>,\n    issueYear:      <span class=\"hljs-string\">\"2017\"</span>,\n    countryID:      <span class=\"hljs-string\">\"147\"</span>,\n    height:         <span class=\"hljs-string\">\"183cm\"</span>,\n  })\n\n  <span class=\"hljs-keyword\">if</span> got != want {\n    t.Errorf(<span class=\"hljs-string\">\"got %t want %t\"</span>, got, want)\n  }\n})</code></pre>\n<p>Using TDD for these parts gave me complete confidence that my code was working as expected meaning that once I'd counted the valid passports, I was sure that my answer would be correct - and it was!</p>\n<p>This task may have been a little simple to highlight the benefits of TDD, but day 4 part 2 required stricter rules and TDD came into its own by ensuring that each rule was implemented correctly. <a href=\"https://github.com/james-wallis/adventofcode/blob/main/4/passportChecker_test.go#L130\">Check out the tests on GitHub if you don't believe me!</a></p>\n<h3>Summary</h3>\n<p>If you check my GitHub you'll see that I've fallen behind on this years Advent of Code, I aim to complete it during the Christmas holidays! Nevertheless I've already gained more than enough skills and experience with Go, TDD and general programming to see that Advent of Code is definitely worth doing each year.</p>\n<p>If you do take on Advent of Code I recommend:</p>\n<ol>\n<li>Using TDD and the examples given as input/output - it gives you so much confidence in your solution.</li>\n<li>Pick a language that you're not 100% confident in/are learning, you can always change later if the problems become too difficult - you'll gain a lot of skills at a relatively fast pace.</li>\n</ol>\n<p>Hopefully this was an interesting read!</p>\n<p>Let me know in the comments why you took on the 2020 Advent of Code challenge, how far you've got and what approach you took!</p>\n"},{"type_of":"article","id":473822,"title":"Ensuring your OpenAPI (Swagger) Specification is never outdated through testing with Chai or Jest ","description":"Testing your OpenAPI Specification using Chai OpenAPI response validator or Jest OpenAPI. Additional...","published":true,"published_at":"2020-11-03T13:51:39.033Z","slug":"ensuring-your-openapi-swagger-specification-is-never-outdated-through-testing-4h9c","path":"/jameswallis/ensuring-your-openapi-swagger-specification-is-never-outdated-through-testing-4h9c","url":"https://dev.to/jameswallis/ensuring-your-openapi-swagger-specification-is-never-outdated-through-testing-4h9c","comments_count":0,"public_reactions_count":9,"page_views_count":125,"published_timestamp":"2020-11-03T13:51:39Z","body_markdown":"**Testing your OpenAPI Specification using [Chai OpenAPI response validator](https://www.npmjs.com/package/chai-openapi-response-validator) or [Jest OpenAPI](https://www.npmjs.com/package/jest-openapi). Additional Chai/Jest matchers for asserting that HTTP responses satisfy an OpenAPI spec.**\n\nThe OpenAPI Initiative, previously known as the Swagger Specification, is a machine readable specification to describe RESTful web services such as an API. It's used by many to describe what API queries an application can handle and when combined with the use of tools such as [Swagger UI](https://swagger.io/tools/swagger-ui/) can make even the most complex APIs easy for developers to understand.\n\nUsing an OpenAPI Specification in your project should make it more understandable and easier for new developers to consume it. It is, however, easy for it to become outdated when changes are made to the functionality of the application, an unfortunately common issue that is present in documentation all over the web. Even the smallest detachment between actual function and documentation can cause hours of frustration for a user of your product. \n\nIn fact, when developing an application which communicates with a third-party API, incorrect OpenAPI Specifications can make it impossible to carryout critical functionality and stop a project in its tracks. I have experienced this first hand when trying to use a certain bank's API to create a money handling application while at University.\n\n## So how can we ensure that OpenAPI Specifications are up-to-date?\n\nShort answer: **With tests!**\n\nLonger answer:\n\nThe [open source OpenAPIValidators](https://github.com/openapi-library/OpenAPIValidators) project on GitHub contains two packages that extend both the [Chai Assertion Library](https://www.chaijs.com/) and [Jest](https://jestjs.io/) two popular JavaScript testing frameworks.\n\nIt describes itself as a plugin that will \"automatically test whether your server's behaviour and documentation match\". It is as simple to use as it sounds, to make an assertion you add `expect(responseObject).toSatisfyApiSpec()` in your tests, pretty nice.\n\nIn addition to being used to ensure documentation is updated, the testing plugins can also aid Test Driven Development practices by introducing the opportunity to design your OpenAPI Specification first and implement the API second. This means that the team implementing the API will have strict documentation to follow with the plugins ensuring that the correct responses are sent with the correct response codes. Moreover, in a time where frontend and backend development teams are not co-located, both teams can agree on a specification and not worry that one will deviate from the agreed design.\n\nThe two plugins can be found on NPM:\n\n* [chai-openapi-response-validator](https://www.npmjs.com/package/chai-openapi-response-validator)\n\n* [jest-openapi](https://www.npmjs.com/package/jest-openapi)\n\n## How does it work?\n\n1. You pass it your OpenAPI Specification via an object or by absolute path.\n2. You add `expect(responseObject).toSatisfyApiSpec()` to each test where you want to validate the response.\n3. It matches the request path and HTTP response code returned from the API call with your OpenAPI Specification and then asserts that the response is what is defined in the Specification.\n4. If the response matches the Specification then the test passes, if it doesn't then the test will fail with a helpful error.\n\n## What does it look like to use?\n\nTake the test below and the Specification that follows, it makes a GET request, asserts that the HTTP response code will be 200 and then, using the OpenAPIValidators package, asserts that the response from the request matches exactly the OpenAPI Specification.\n\n```javascript\nit('should make a GET request and satisfy OpenAPI spec', async () => {\n  // Make request (supertest used here)\n  // /hello should return the code 200 with the body \"hello world\"\n  const res = await supertest(server).get('/hello');\n  // Make any assertions as normal\n  expect(res.status).toEqual(200);\n  // Assert that the HTTP response satisfies the OpenAPI spec\n  expect(res).toSatisfyApiSpec();\n});\n```\n\nThe OpenAPI Specification used for this test:\n```yaml\nopenapi: 3.0.3\ninfo:\n  title: Open Api Validator\n  version: 0.0.1\npaths:\n  /hello:\n    get:\n      responses:\n        200:\n          description: Response body should be a string\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: Hello World\n```\n\nWhen the response matches the OpenAPI Specification the test will pass as expected with no additional output:\n\n![Passing OpenAPI test](https://dev-to-uploads.s3.amazonaws.com/i/kyjifm1rqxt00przl6fi.png)\n\nbut when the response does not match the OpenAPI Specification the test fails and provides helpful output so you can either change the implementation or update the Specification:\n\n![Failing OpenAPI test](https://dev-to-uploads.s3.amazonaws.com/i/f9d6la5dh8xguh21t0g2.png)\n\nThe screenshot above shows a failure where the actual API response has returned an *object* rather than the *string* that is documented in the OpenAPI Specification.\n\nWhen the OpenAPI validator fails to match an API call to the Specification it fails with this error:\n\n![Unknown OpenAPI test](https://dev-to-uploads.s3.amazonaws.com/i/koa4rsj2qcm78i4d31yb.png)\n\nWhich will prompt you to either remove the assertion from the test or update the OpenAPI Specification to contain the new route, preferably the latter.\n\n## Round up\n\nIn this blog I've introduced the OpenAPI Validators which can be used in conjunction with Jest or Chai and an OpenAPI Specification to ensure that both your API documentation is kept up to date and that APIs are not accidentally modified to return incorrect responses. Additionally, frontend and backend developers can use the testing plugins to ensure that an agreed API Specification is implemented correctly.\n\nIn the future I will release another post where I demonstrate how the [jest-openapi](https://www.npmjs.com/package/jest-openapi) validator can be used with an Express API.\n\nDrop me a reaction if this post has helped or if outdated API documentation has inconvenienced you in the past!\n\n\n\n\n","positive_reactions_count":9,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--MBcGxP-f--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/z611f1xh7nxqlhh63bmr.png","tag_list":["javascript","testing","webdev","node"],"canonical_url":"https://wallis.dev/blog/openapi-validator","user":{"name":"James Wallis","username":"jameswallis","twitter_username":null,"github_username":"james-wallis","website_url":"https://wallis.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--aDpGiyQ3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436375/3c47ee9b-9ceb-4a43-b28a-3ac3e65d0173.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--Lbolzeyu--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436375/3c47ee9b-9ceb-4a43-b28a-3ac3e65d0173.jpeg"},"localSlug":"openapi-validator","markdown":"**Testing your OpenAPI Specification using [Chai OpenAPI response validator](https://www.npmjs.com/package/chai-openapi-response-validator) or [Jest OpenAPI](https://www.npmjs.com/package/jest-openapi). Additional Chai/Jest matchers for asserting that HTTP responses satisfy an OpenAPI spec.**\n\nThe OpenAPI Initiative, previously known as the Swagger Specification, is a machine readable specification to describe RESTful web services such as an API. It's used by many to describe what API queries an application can handle and when combined with the use of tools such as [Swagger UI](https://swagger.io/tools/swagger-ui/) can make even the most complex APIs easy for developers to understand.\n\nUsing an OpenAPI Specification in your project should make it more understandable and easier for new developers to consume it. It is, however, easy for it to become outdated when changes are made to the functionality of the application, an unfortunately common issue that is present in documentation all over the web. Even the smallest detachment between actual function and documentation can cause hours of frustration for a user of your product. \n\nIn fact, when developing an application which communicates with a third-party API, incorrect OpenAPI Specifications can make it impossible to carryout critical functionality and stop a project in its tracks. I have experienced this first hand when trying to use a certain bank's API to create a money handling application while at University.\n\n## So how can we ensure that OpenAPI Specifications are up-to-date?\n\nShort answer: **With tests!**\n\nLonger answer:\n\nThe [open source OpenAPIValidators](https://github.com/openapi-library/OpenAPIValidators) project on GitHub contains two packages that extend both the [Chai Assertion Library](https://www.chaijs.com/) and [Jest](https://jestjs.io/) two popular JavaScript testing frameworks.\n\nIt describes itself as a plugin that will \"automatically test whether your server's behaviour and documentation match\". It is as simple to use as it sounds, to make an assertion you add `expect(responseObject).toSatisfyApiSpec()` in your tests, pretty nice.\n\nIn addition to being used to ensure documentation is updated, the testing plugins can also aid Test Driven Development practices by introducing the opportunity to design your OpenAPI Specification first and implement the API second. This means that the team implementing the API will have strict documentation to follow with the plugins ensuring that the correct responses are sent with the correct response codes. Moreover, in a time where frontend and backend development teams are not co-located, both teams can agree on a specification and not worry that one will deviate from the agreed design.\n\nThe two plugins can be found on NPM:\n\n* [chai-openapi-response-validator](https://www.npmjs.com/package/chai-openapi-response-validator)\n\n* [jest-openapi](https://www.npmjs.com/package/jest-openapi)\n\n## How does it work?\n\n1. You pass it your OpenAPI Specification via an object or by absolute path.\n2. You add `expect(responseObject).toSatisfyApiSpec()` to each test where you want to validate the response.\n3. It matches the request path and HTTP response code returned from the API call with your OpenAPI Specification and then asserts that the response is what is defined in the Specification.\n4. If the response matches the Specification then the test passes, if it doesn't then the test will fail with a helpful error.\n\n## What does it look like to use?\n\nTake the test below and the Specification that follows, it makes a GET request, asserts that the HTTP response code will be 200 and then, using the OpenAPIValidators package, asserts that the response from the request matches exactly the OpenAPI Specification.\n\n```javascript\nit('should make a GET request and satisfy OpenAPI spec', async () => {\n  // Make request (supertest used here)\n  // /hello should return the code 200 with the body \"hello world\"\n  const res = await supertest(server).get('/hello');\n  // Make any assertions as normal\n  expect(res.status).toEqual(200);\n  // Assert that the HTTP response satisfies the OpenAPI spec\n  expect(res).toSatisfyApiSpec();\n});\n```\n\nThe OpenAPI Specification used for this test:\n```yaml\nopenapi: 3.0.3\ninfo:\n  title: Open Api Validator\n  version: 0.0.1\npaths:\n  /hello:\n    get:\n      responses:\n        200:\n          description: Response body should be a string\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: Hello World\n```\n\nWhen the response matches the OpenAPI Specification the test will pass as expected with no additional output:\n\n![Passing OpenAPI test](https://dev-to-uploads.s3.amazonaws.com/i/kyjifm1rqxt00przl6fi.png)\n\nbut when the response does not match the OpenAPI Specification the test fails and provides helpful output so you can either change the implementation or update the Specification:\n\n![Failing OpenAPI test](https://dev-to-uploads.s3.amazonaws.com/i/f9d6la5dh8xguh21t0g2.png)\n\nThe screenshot above shows a failure where the actual API response has returned an *object* rather than the *string* that is documented in the OpenAPI Specification.\n\nWhen the OpenAPI validator fails to match an API call to the Specification it fails with this error:\n\n![Unknown OpenAPI test](https://dev-to-uploads.s3.amazonaws.com/i/koa4rsj2qcm78i4d31yb.png)\n\nWhich will prompt you to either remove the assertion from the test or update the OpenAPI Specification to contain the new route, preferably the latter.\n\n## Round up\n\nIn this blog I've introduced the OpenAPI Validators which can be used in conjunction with Jest or Chai and an OpenAPI Specification to ensure that both your API documentation is kept up to date and that APIs are not accidentally modified to return incorrect responses. Additionally, frontend and backend developers can use the testing plugins to ensure that an agreed API Specification is implemented correctly.\n\nIn the future I will release another post where I demonstrate how the [jest-openapi](https://www.npmjs.com/package/jest-openapi) validator can be used with an Express API.\n\nDrop me a reaction if this post has helped or if outdated API documentation has inconvenienced you in the past!\n\n\n\n\n","html":"<p><strong>Testing your OpenAPI Specification using <a href=\"https://www.npmjs.com/package/chai-openapi-response-validator\">Chai OpenAPI response validator</a> or <a href=\"https://www.npmjs.com/package/jest-openapi\">Jest OpenAPI</a>. Additional Chai/Jest matchers for asserting that HTTP responses satisfy an OpenAPI spec.</strong></p>\n<p>The OpenAPI Initiative, previously known as the Swagger Specification, is a machine readable specification to describe RESTful web services such as an API. It's used by many to describe what API queries an application can handle and when combined with the use of tools such as <a href=\"https://swagger.io/tools/swagger-ui/\">Swagger UI</a> can make even the most complex APIs easy for developers to understand.</p>\n<p>Using an OpenAPI Specification in your project should make it more understandable and easier for new developers to consume it. It is, however, easy for it to become outdated when changes are made to the functionality of the application, an unfortunately common issue that is present in documentation all over the web. Even the smallest detachment between actual function and documentation can cause hours of frustration for a user of your product.</p>\n<p>In fact, when developing an application which communicates with a third-party API, incorrect OpenAPI Specifications can make it impossible to carryout critical functionality and stop a project in its tracks. I have experienced this first hand when trying to use a certain bank's API to create a money handling application while at University.</p>\n<h2>So how can we ensure that OpenAPI Specifications are up-to-date?</h2>\n<p>Short answer: <strong>With tests!</strong></p>\n<p>Longer answer:</p>\n<p>The <a href=\"https://github.com/openapi-library/OpenAPIValidators\">open source OpenAPIValidators</a> project on GitHub contains two packages that extend both the <a href=\"https://www.chaijs.com/\">Chai Assertion Library</a> and <a href=\"https://jestjs.io/\">Jest</a> two popular JavaScript testing frameworks.</p>\n<p>It describes itself as a plugin that will \"automatically test whether your server's behaviour and documentation match\". It is as simple to use as it sounds, to make an assertion you add <code>expect(responseObject).toSatisfyApiSpec()</code> in your tests, pretty nice.</p>\n<p>In addition to being used to ensure documentation is updated, the testing plugins can also aid Test Driven Development practices by introducing the opportunity to design your OpenAPI Specification first and implement the API second. This means that the team implementing the API will have strict documentation to follow with the plugins ensuring that the correct responses are sent with the correct response codes. Moreover, in a time where frontend and backend development teams are not co-located, both teams can agree on a specification and not worry that one will deviate from the agreed design.</p>\n<p>The two plugins can be found on NPM:</p>\n<ul>\n<li>\n<p><a href=\"https://www.npmjs.com/package/chai-openapi-response-validator\">chai-openapi-response-validator</a></p>\n</li>\n<li>\n<p><a href=\"https://www.npmjs.com/package/jest-openapi\">jest-openapi</a></p>\n</li>\n</ul>\n<h2>How does it work?</h2>\n<ol>\n<li>You pass it your OpenAPI Specification via an object or by absolute path.</li>\n<li>You add <code>expect(responseObject).toSatisfyApiSpec()</code> to each test where you want to validate the response.</li>\n<li>It matches the request path and HTTP response code returned from the API call with your OpenAPI Specification and then asserts that the response is what is defined in the Specification.</li>\n<li>If the response matches the Specification then the test passes, if it doesn't then the test will fail with a helpful error.</li>\n</ol>\n<h2>What does it look like to use?</h2>\n<p>Take the test below and the Specification that follows, it makes a GET request, asserts that the HTTP response code will be 200 and then, using the OpenAPIValidators package, asserts that the response from the request matches exactly the OpenAPI Specification.</p>\n<pre><code class=\"hljs language-javascript\">it(<span class=\"hljs-string\">'should make a GET request and satisfy OpenAPI spec'</span>, <span class=\"hljs-keyword\">async</span> () => {\n  <span class=\"hljs-comment\">// Make request (supertest used here)</span>\n  <span class=\"hljs-comment\">// /hello should return the code 200 with the body \"hello world\"</span>\n  <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> supertest(server).get(<span class=\"hljs-string\">'/hello'</span>);\n  <span class=\"hljs-comment\">// Make any assertions as normal</span>\n  expect(res.status).toEqual(<span class=\"hljs-number\">200</span>);\n  <span class=\"hljs-comment\">// Assert that the HTTP response satisfies the OpenAPI spec</span>\n  expect(res).toSatisfyApiSpec();\n});</code></pre>\n<p>The OpenAPI Specification used for this test:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">openapi:</span> <span class=\"hljs-number\">3.0</span><span class=\"hljs-number\">.3</span>\n<span class=\"hljs-attr\">info:</span>\n  <span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">Open</span> <span class=\"hljs-string\">Api</span> <span class=\"hljs-string\">Validator</span>\n  <span class=\"hljs-attr\">version:</span> <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.1</span>\n<span class=\"hljs-attr\">paths:</span>\n  <span class=\"hljs-string\">/hello:</span>\n    <span class=\"hljs-attr\">get:</span>\n      <span class=\"hljs-attr\">responses:</span>\n        <span class=\"hljs-attr\">200:</span>\n          <span class=\"hljs-attr\">description:</span> <span class=\"hljs-string\">Response</span> <span class=\"hljs-string\">body</span> <span class=\"hljs-string\">should</span> <span class=\"hljs-string\">be</span> <span class=\"hljs-string\">a</span> <span class=\"hljs-string\">string</span>\n          <span class=\"hljs-attr\">content:</span>\n            <span class=\"hljs-attr\">text/plain:</span>\n              <span class=\"hljs-attr\">schema:</span>\n                <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">string</span>\n                <span class=\"hljs-attr\">example:</span> <span class=\"hljs-string\">Hello</span> <span class=\"hljs-string\">World</span></code></pre>\n<p>When the response matches the OpenAPI Specification the test will pass as expected with no additional output:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/kyjifm1rqxt00przl6fi.png\" alt=\"Passing OpenAPI test\"></p>\n<p>but when the response does not match the OpenAPI Specification the test fails and provides helpful output so you can either change the implementation or update the Specification:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/f9d6la5dh8xguh21t0g2.png\" alt=\"Failing OpenAPI test\"></p>\n<p>The screenshot above shows a failure where the actual API response has returned an <em>object</em> rather than the <em>string</em> that is documented in the OpenAPI Specification.</p>\n<p>When the OpenAPI validator fails to match an API call to the Specification it fails with this error:</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/koa4rsj2qcm78i4d31yb.png\" alt=\"Unknown OpenAPI test\"></p>\n<p>Which will prompt you to either remove the assertion from the test or update the OpenAPI Specification to contain the new route, preferably the latter.</p>\n<h2>Round up</h2>\n<p>In this blog I've introduced the OpenAPI Validators which can be used in conjunction with Jest or Chai and an OpenAPI Specification to ensure that both your API documentation is kept up to date and that APIs are not accidentally modified to return incorrect responses. Additionally, frontend and backend developers can use the testing plugins to ensure that an agreed API Specification is implemented correctly.</p>\n<p>In the future I will release another post where I demonstrate how the <a href=\"https://www.npmjs.com/package/jest-openapi\">jest-openapi</a> validator can be used with an Express API.</p>\n<p>Drop me a reaction if this post has helped or if outdated API documentation has inconvenienced you in the past!</p>\n"},{"type_of":"article","id":412169,"title":"reCaptcha verification with EmailJS","description":"This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Boot...","published":true,"published_at":"2020-07-29T17:07:18.600Z","slug":"recaptcha-verification-with-emailjs-29ai","path":"/jameswallis/recaptcha-verification-with-emailjs-29ai","url":"https://dev.to/jameswallis/recaptcha-verification-with-emailjs-29ai","comments_count":8,"public_reactions_count":8,"page_views_count":451,"published_timestamp":"2020-07-29T17:07:18Z","body_markdown":"*This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.*\n\nThe finished website: https://wallisconsultancy.co.uk\nThe source code: https://github.com/james-wallis/wallisconsultancy\n\n## What is EmailJS\n\nIn the previous blog I introduced EmailJS, a service designed to send emails on behalf of websites with no backend server, and added to the Wallis Consultancy React.js application that is being built. \n\n## What is reCaptcha\n\n> reCAPTCHA is a free service from Google that helps protect websites from spam and abuse. A “CAPTCHA” is a turing test to tell human and bots apart. It is easy for humans to solve, but hard for “bots” and other malicious software to figure out. By adding reCAPTCHA to a site, you can block automated software while helping your welcome users to enter with ease.\n\n*[Source - support.google.com](https://support.google.com/recaptcha/answer/6080904?hl=en)*\n\nEmailJS supports Google reCaptcha verification before sending an email and you can restrict it to not send an email if a reCaptcha code is not sent in the request object.\n\nFor more detailed information see the topic on the EmailJS website: [Adding CAPTCHA verification | EmailJS](https://www.emailjs.com/docs/user-guide/adding-captcha-verification/)\n\n## Adding reCaptcha verification to EmailJS\n\nAn issue with the current wallisconsultancy.co.uk website is that the contact form can be easily abused by spam as it has no \"human verification\" method. \n\nLet's fix this issue by adding Google reCaptcha support to the website.\n\n### Setting up reCaptcha\n\n#### Creating a Google reCaptcha application\nTo setup EmailJS for my application we need to create a new application for Google reCaptcha.\n\nTo do this:\n1. Navigate to https://www.google.com/recaptcha\n1. Select `admin console` in the top right of the screen.\n1. Select `register a new site`\n1. Fill in the details\n  * Make sure you select `reCAPTCHA v2` as EmailJS does not support `v3`\n  * I gave `localhost` as the site URL so that I can use it in development. It’s recommended that you keep your development and production reCaptcha separate so I created another application with wallisconsultancy.co.uk as the site URL.\n\nOnce you've done this you will be given a `secret key`, keep this for the next step.\n\n![Google reCaptcha sign up form](https://dev-to-uploads.s3.amazonaws.com/i/lam7wueuigi6aq2n3tpt.png)\n*The Google reCaptcha sign up form*\n\n#### Connecting Google reCaptcha and EmailJS\nNext, we need to configure EmailJS to require a reCaptcha verification before sending an email by adding the secret key generated in the previous step to `CAPTCHA` tab of the [EmailJS template](https://dashboard.emailjs.com/admin/templates) section.\n\n![reCaptcha setup on EmailJS](https://dev-to-uploads.s3.amazonaws.com/i/mgrum9oi5ns1amezolgy.jpg)\n*Adding the reCaptcha secret key to the EmailJS template*\n\nEmailJS is now configured so that it won't send emails without the reCaptcha code.\n\n### Adding reCaptcha to React\n\nLet's modify the React application to send the reCaptcha code to EmailJS in the request object.\n\nI'm using the [react-google-recaptcha](https://www.npmjs.com/package/react-google-recaptcha) component to display the reCaptcha box. It supplies an `onChange` function that has the reCaptcha code as a parameter.\n\nI modified the flow of the contact form like so:\n1. User enters details\n1. On `send` the page changes to show the reCaptcha instead of the contact form\n1. User completes reCaptcha and the `onChange` function is called.\n1. React component combines the form values and reCaptcha code into a single `params` that is sent to EmailJS.\n\nExample usage:\n```javascript\nimport emailjs from 'emailjs-com';\nimport ReCAPTCHA from 'react-google-recaptcha';\n\nexport default function MessageForm() {\n  // This should be implemented as a form\n  const [name, email, message] = ['name', 'email', 'message'];\n\n\n  const sendEmail = (captchaValue) => {\n    const params = {\n      ...formState,\n      'g-recaptcha-response': captchaValue,\n    };\n\n    emailjs.send(\n      process.env.EMAIL_JS_SERVICE,\n      process.env.EMAIL_JS_TEMPLATE,\n      params,\n      process.env.EMAIL_JS_USER,\n    )\n      .then(({ status }) => {\n        console.log(\"EMAILJS SENT\", status.code);\n      }, (err) => {\n        console.log(\"EMAILJS ERROR\", err);\n      });\n  };\n\n  return (\n    <ReCAPTCHA\n      sitekey={process.env.CAPTCHA_SITE_KEY}\n      onChange={sendEmail}\n    />\n  );\n}\n```\n\n*The complete code for the contact form on the Wallis Consultancy React application can be found [on Github](https://github.com/james-wallis/wallisconsultancy/blob/master/components/messageForm.js).*\n\nThat's it, we've now setup an EmailJS powered contact form with Google reCaptcha so that we can safely deploy our application without the form being abused by bots to spam to the email recipient.\n\n## Round up\nIn this blog I’ve explored how reCaptcha can reduce the amount of spam sent from a contact form on a website and configured it to work with EmailJS.\n\nIn the next blog I will complete the development of wallisconsultancy.co.uk by using plugins to increase the performance of the website and the SEO score.","positive_reactions_count":8,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--QAGAuoII--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/r09vb642f8lj2p13u6rk.png","tag_list":["react","tutorial","javascript"],"canonical_url":"https://wallis.dev/blog/emailjs-with-recaptcha","user":{"name":"James Wallis","username":"jameswallis","twitter_username":null,"github_username":"james-wallis","website_url":"https://wallis.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--aDpGiyQ3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436375/3c47ee9b-9ceb-4a43-b28a-3ac3e65d0173.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--Lbolzeyu--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436375/3c47ee9b-9ceb-4a43-b28a-3ac3e65d0173.jpeg"},"localSlug":"emailjs-with-recaptcha","markdown":"*This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.*\n\nThe finished website: https://wallisconsultancy.co.uk\nThe source code: https://github.com/james-wallis/wallisconsultancy\n\n## What is EmailJS\n\nIn the previous blog I introduced EmailJS, a service designed to send emails on behalf of websites with no backend server, and added to the Wallis Consultancy React.js application that is being built. \n\n## What is reCaptcha\n\n> reCAPTCHA is a free service from Google that helps protect websites from spam and abuse. A “CAPTCHA” is a turing test to tell human and bots apart. It is easy for humans to solve, but hard for “bots” and other malicious software to figure out. By adding reCAPTCHA to a site, you can block automated software while helping your welcome users to enter with ease.\n\n*[Source - support.google.com](https://support.google.com/recaptcha/answer/6080904?hl=en)*\n\nEmailJS supports Google reCaptcha verification before sending an email and you can restrict it to not send an email if a reCaptcha code is not sent in the request object.\n\nFor more detailed information see the topic on the EmailJS website: [Adding CAPTCHA verification | EmailJS](https://www.emailjs.com/docs/user-guide/adding-captcha-verification/)\n\n## Adding reCaptcha verification to EmailJS\n\nAn issue with the current wallisconsultancy.co.uk website is that the contact form can be easily abused by spam as it has no \"human verification\" method. \n\nLet's fix this issue by adding Google reCaptcha support to the website.\n\n### Setting up reCaptcha\n\n#### Creating a Google reCaptcha application\nTo setup EmailJS for my application we need to create a new application for Google reCaptcha.\n\nTo do this:\n1. Navigate to https://www.google.com/recaptcha\n1. Select `admin console` in the top right of the screen.\n1. Select `register a new site`\n1. Fill in the details\n  * Make sure you select `reCAPTCHA v2` as EmailJS does not support `v3`\n  * I gave `localhost` as the site URL so that I can use it in development. It’s recommended that you keep your development and production reCaptcha separate so I created another application with wallisconsultancy.co.uk as the site URL.\n\nOnce you've done this you will be given a `secret key`, keep this for the next step.\n\n![Google reCaptcha sign up form](https://dev-to-uploads.s3.amazonaws.com/i/lam7wueuigi6aq2n3tpt.png)\n*The Google reCaptcha sign up form*\n\n#### Connecting Google reCaptcha and EmailJS\nNext, we need to configure EmailJS to require a reCaptcha verification before sending an email by adding the secret key generated in the previous step to `CAPTCHA` tab of the [EmailJS template](https://dashboard.emailjs.com/admin/templates) section.\n\n![reCaptcha setup on EmailJS](https://dev-to-uploads.s3.amazonaws.com/i/mgrum9oi5ns1amezolgy.jpg)\n*Adding the reCaptcha secret key to the EmailJS template*\n\nEmailJS is now configured so that it won't send emails without the reCaptcha code.\n\n### Adding reCaptcha to React\n\nLet's modify the React application to send the reCaptcha code to EmailJS in the request object.\n\nI'm using the [react-google-recaptcha](https://www.npmjs.com/package/react-google-recaptcha) component to display the reCaptcha box. It supplies an `onChange` function that has the reCaptcha code as a parameter.\n\nI modified the flow of the contact form like so:\n1. User enters details\n1. On `send` the page changes to show the reCaptcha instead of the contact form\n1. User completes reCaptcha and the `onChange` function is called.\n1. React component combines the form values and reCaptcha code into a single `params` that is sent to EmailJS.\n\nExample usage:\n```javascript\nimport emailjs from 'emailjs-com';\nimport ReCAPTCHA from 'react-google-recaptcha';\n\nexport default function MessageForm() {\n  // This should be implemented as a form\n  const [name, email, message] = ['name', 'email', 'message'];\n\n\n  const sendEmail = (captchaValue) => {\n    const params = {\n      ...formState,\n      'g-recaptcha-response': captchaValue,\n    };\n\n    emailjs.send(\n      process.env.EMAIL_JS_SERVICE,\n      process.env.EMAIL_JS_TEMPLATE,\n      params,\n      process.env.EMAIL_JS_USER,\n    )\n      .then(({ status }) => {\n        console.log(\"EMAILJS SENT\", status.code);\n      }, (err) => {\n        console.log(\"EMAILJS ERROR\", err);\n      });\n  };\n\n  return (\n    <ReCAPTCHA\n      sitekey={process.env.CAPTCHA_SITE_KEY}\n      onChange={sendEmail}\n    />\n  );\n}\n```\n\n*The complete code for the contact form on the Wallis Consultancy React application can be found [on Github](https://github.com/james-wallis/wallisconsultancy/blob/master/components/messageForm.js).*\n\nThat's it, we've now setup an EmailJS powered contact form with Google reCaptcha so that we can safely deploy our application without the form being abused by bots to spam to the email recipient.\n\n## Round up\nIn this blog I’ve explored how reCaptcha can reduce the amount of spam sent from a contact form on a website and configured it to work with EmailJS.\n\nIn the next blog I will complete the development of wallisconsultancy.co.uk by using plugins to increase the performance of the website and the SEO score.","html":"<p><em>This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.</em></p>\n<p>The finished website: <a href=\"https://wallisconsultancy.co.uk\">https://wallisconsultancy.co.uk</a>\nThe source code: <a href=\"https://github.com/james-wallis/wallisconsultancy\">https://github.com/james-wallis/wallisconsultancy</a></p>\n<h2>What is EmailJS</h2>\n<p>In the previous blog I introduced EmailJS, a service designed to send emails on behalf of websites with no backend server, and added to the Wallis Consultancy React.js application that is being built.</p>\n<h2>What is reCaptcha</h2>\n<blockquote>\n<p>reCAPTCHA is a free service from Google that helps protect websites from spam and abuse. A “CAPTCHA” is a turing test to tell human and bots apart. It is easy for humans to solve, but hard for “bots” and other malicious software to figure out. By adding reCAPTCHA to a site, you can block automated software while helping your welcome users to enter with ease.</p>\n</blockquote>\n<p><em><a href=\"https://support.google.com/recaptcha/answer/6080904?hl=en\">Source - support.google.com</a></em></p>\n<p>EmailJS supports Google reCaptcha verification before sending an email and you can restrict it to not send an email if a reCaptcha code is not sent in the request object.</p>\n<p>For more detailed information see the topic on the EmailJS website: <a href=\"https://www.emailjs.com/docs/user-guide/adding-captcha-verification/\">Adding CAPTCHA verification | EmailJS</a></p>\n<h2>Adding reCaptcha verification to EmailJS</h2>\n<p>An issue with the current wallisconsultancy.co.uk website is that the contact form can be easily abused by spam as it has no \"human verification\" method.</p>\n<p>Let's fix this issue by adding Google reCaptcha support to the website.</p>\n<h3>Setting up reCaptcha</h3>\n<h4>Creating a Google reCaptcha application</h4>\n<p>To setup EmailJS for my application we need to create a new application for Google reCaptcha.</p>\n<p>To do this:</p>\n<ol>\n<li>Navigate to <a href=\"https://www.google.com/recaptcha\">https://www.google.com/recaptcha</a></li>\n<li>Select <code>admin console</code> in the top right of the screen.</li>\n<li>Select <code>register a new site</code></li>\n<li>Fill in the details</li>\n</ol>\n<ul>\n<li>Make sure you select <code>reCAPTCHA v2</code> as EmailJS does not support <code>v3</code></li>\n<li>I gave <code>localhost</code> as the site URL so that I can use it in development. It’s recommended that you keep your development and production reCaptcha separate so I created another application with wallisconsultancy.co.uk as the site URL.</li>\n</ul>\n<p>Once you've done this you will be given a <code>secret key</code>, keep this for the next step.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/lam7wueuigi6aq2n3tpt.png\" alt=\"Google reCaptcha sign up form\">\n<em>The Google reCaptcha sign up form</em></p>\n<h4>Connecting Google reCaptcha and EmailJS</h4>\n<p>Next, we need to configure EmailJS to require a reCaptcha verification before sending an email by adding the secret key generated in the previous step to <code>CAPTCHA</code> tab of the <a href=\"https://dashboard.emailjs.com/admin/templates\">EmailJS template</a> section.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/mgrum9oi5ns1amezolgy.jpg\" alt=\"reCaptcha setup on EmailJS\">\n<em>Adding the reCaptcha secret key to the EmailJS template</em></p>\n<p>EmailJS is now configured so that it won't send emails without the reCaptcha code.</p>\n<h3>Adding reCaptcha to React</h3>\n<p>Let's modify the React application to send the reCaptcha code to EmailJS in the request object.</p>\n<p>I'm using the <a href=\"https://www.npmjs.com/package/react-google-recaptcha\">react-google-recaptcha</a> component to display the reCaptcha box. It supplies an <code>onChange</code> function that has the reCaptcha code as a parameter.</p>\n<p>I modified the flow of the contact form like so:</p>\n<ol>\n<li>User enters details</li>\n<li>On <code>send</code> the page changes to show the reCaptcha instead of the contact form</li>\n<li>User completes reCaptcha and the <code>onChange</code> function is called.</li>\n<li>React component combines the form values and reCaptcha code into a single <code>params</code> that is sent to EmailJS.</li>\n</ol>\n<p>Example usage:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> emailjs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'emailjs-com'</span>;\n<span class=\"hljs-keyword\">import</span> ReCAPTCHA <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-google-recaptcha'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MessageForm</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// This should be implemented as a form</span>\n  <span class=\"hljs-keyword\">const</span> [name, email, message] = [<span class=\"hljs-string\">'name'</span>, <span class=\"hljs-string\">'email'</span>, <span class=\"hljs-string\">'message'</span>];\n\n\n  <span class=\"hljs-keyword\">const</span> sendEmail = <span class=\"hljs-function\">(<span class=\"hljs-params\">captchaValue</span>) =></span> {\n    <span class=\"hljs-keyword\">const</span> params = {\n      ...formState,\n      <span class=\"hljs-string\">'g-recaptcha-response'</span>: captchaValue,\n    };\n\n    emailjs.send(\n      process.env.EMAIL_JS_SERVICE,\n      process.env.EMAIL_JS_TEMPLATE,\n      params,\n      process.env.EMAIL_JS_USER,\n    )\n      .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ status }</span>) =></span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"EMAILJS SENT\"</span>, status.code);\n      }, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =></span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"EMAILJS ERROR\"</span>, err);\n      });\n  };\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">ReCAPTCHA</span>\n      <span class=\"hljs-attr\">sitekey</span>=<span class=\"hljs-string\">{process.env.CAPTCHA_SITE_KEY}</span>\n      <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{sendEmail}</span>\n    /></span></span>\n  );\n}</code></pre>\n<p><em>The complete code for the contact form on the Wallis Consultancy React application can be found <a href=\"https://github.com/james-wallis/wallisconsultancy/blob/master/components/messageForm.js\">on Github</a>.</em></p>\n<p>That's it, we've now setup an EmailJS powered contact form with Google reCaptcha so that we can safely deploy our application without the form being abused by bots to spam to the email recipient.</p>\n<h2>Round up</h2>\n<p>In this blog I’ve explored how reCaptcha can reduce the amount of spam sent from a contact form on a website and configured it to work with EmailJS.</p>\n<p>In the next blog I will complete the development of wallisconsultancy.co.uk by using plugins to increase the performance of the website and the SEO score.</p>\n"},{"type_of":"article","id":411505,"title":"Using EmailJS with Next.js","description":"This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Boot...","published":true,"published_at":"2020-07-28T13:28:40.681Z","slug":"using-emailjs-with-captcha-verification-in-a-next-js-application-1g1g","path":"/jameswallis/using-emailjs-with-captcha-verification-in-a-next-js-application-1g1g","url":"https://dev.to/jameswallis/using-emailjs-with-captcha-verification-in-a-next-js-application-1g1g","comments_count":2,"public_reactions_count":19,"page_views_count":1131,"published_timestamp":"2020-07-28T13:28:40Z","body_markdown":"*This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.*\n\nThe finished website: https://wallisconsultancy.co.uk\nThe source code: https://github.com/james-wallis/wallisconsultancy\n\nIn the previous blog I had completed the social bar for the top of the website. Since then I've created the rest of the website and it now looks like the current implementation.\n\n![Current implementation](https://dev-to-uploads.s3.amazonaws.com/i/yhwqk8md7bcicwq4nc87.jpg)\n*Current implementation*\n\n![New react implementation](https://dev-to-uploads.s3.amazonaws.com/i/lcp0ks2st7e891vowq5v.jpg)\n*New React implementation*\n\nYou can see the contact form has been implemented in the screenshot but it doesn’t work. One way to activate it would be to make an API request to a backend server and use a service such as `nodemailer` to send the email. As this will be a static site, another method of sending emails must be used. EmailJS to the rescue!\n\n## [EmailJS](https://www.emailjs.com/)\nEmailJS is a service designed to help send emails using client side technologies only. It utilises templates that can be programatically changed through variables that are supplied when making the request.\n\nUsing EmailJS with React is easy due to the [emailjs-com](https://www.npmjs.com/package/emailjs-com) NPM package. This will be used in the new website as it seems perfect for a small site.\n\n## Register and setup EmailJS\nTo use EmailJS you need to setup a free account, this gives you:\n* 200 emails a month\n* 2 templates\n* Data Size of 50kb\n* Limited contacts history\n*There are other plans but for this project the free plan is fine*\n\nOnce your account is created, navigate to the email services page and select \"Add new service\" - this authorises EmailJS to send emails on your behalf from your email account.\n\n![EmailJS providers](https://dev-to-uploads.s3.amazonaws.com/i/4obaenx2rrkkal20q03x.jpg)\n*EmailJS provider selection screen*\n\nNext we need to setup a template. Navigate to the Email Templates page and select “Create new template”, give it a name and an ID. You will then be taken to the template creation screen, from here you can configure exactly how you want the email to look, who you want it sent to and what you want the subject to be. \n\nMy template looks like this:\n![EmailJS template](https://dev-to-uploads.s3.amazonaws.com/i/0a131necp5kjb2e3mafe.jpg)\n\nand gives the output:\n![EmailJS output](https://dev-to-uploads.s3.amazonaws.com/i/diq52s3te7f65odv6yli.jpg)\n\nTo use variables which you can supply to EmailJS you use curly bracket notation. So for a variable called name I’d use `{{name}}`.\nFor more information on using variables visit [Dynamic variables in templates](https://www.emailjs.com/docs/user-guide/dynamic-variables-templates/)\n\n## Using EmailJS in a React.js application\nWe’re now ready to add EmailJS into our React application.\nSteps:\n1. Run `npm install -s emailjs-com`\n2. Follow the instructions on how to [use EmailJS with React](https://www.emailjs.com/docs/examples/reactjs/)\n\nYou’ll need to change the `YOUR*` variables to their actual values.\n\nTo get the SERVICE_ID and TEMPLATE_ID, go to the template overview and select `copy code` - this will show you their values.\n\n![EmailJS template copy code output](https://dev-to-uploads.s3.amazonaws.com/i/vma7o64vyxrog9c4ijnf.jpg)\n*An example output for the `copy code` overview*\n\nTo get the `USER_ID`, go to your account overview and click on the API KEYS tab.\n\n*Note: It’s best practice to keep these in a `.env` file and not commit them to your source repository.*\n\nSee how I've implemented using EmailJS in a React application on [my Github - messageForm.js](https://github.com/james-wallis/wallisconsultancy/blob/master/components/messageForm.js).\n\n[Key snippet](https://github.com/james-wallis/wallisconsultancy/blob/master/components/messageForm.js#L48):\n```javascript\nemailjs.send(\n      process.env.EMAIL_JS_SERVICE,\n      process.env.EMAIL_JS_TEMPLATE,\n      params, // the values in your EmailJS template\n      process.env.EMAIL_JS_USER,\n    )\n      .then(({ status }) => {\n        // Show success message\n        setFormSubmitted({ title: 'Message has been sent', paragraph: 'Mike will be in contact with you soon.' });\n      }, () => {\n        // Show error message\n        setFormSubmitted({ title: 'Error sending message, try again later', paragraph: 'Please contact Mike either by phone or email.' });\n      });\n```\n\nThat’s it! You are now able to send emails from your React application without requiring a backend server.\n\n## Round up\nIn this blog I’ve demonstrated how EmailJS can be used to send emails from React application with no requirement for a backend service.\n \nIn the next blog I will explore how Google reCaptcha can reduce the amount of spam sent from a contact form on a website and configured it to work with EmailJS.\n\n\n\n","positive_reactions_count":19,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--vboWEFSB--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/429cqnnnc4651hytiuly.png","tag_list":["tutorial","react","refactorit","javascript"],"canonical_url":"https://wallis.dev/blog/using-emailjs-with-nextjs","user":{"name":"James Wallis","username":"jameswallis","twitter_username":null,"github_username":"james-wallis","website_url":"https://wallis.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--aDpGiyQ3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436375/3c47ee9b-9ceb-4a43-b28a-3ac3e65d0173.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--Lbolzeyu--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436375/3c47ee9b-9ceb-4a43-b28a-3ac3e65d0173.jpeg"},"localSlug":"using-emailjs-with-nextjs","markdown":"*This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.*\n\nThe finished website: https://wallisconsultancy.co.uk\nThe source code: https://github.com/james-wallis/wallisconsultancy\n\nIn the previous blog I had completed the social bar for the top of the website. Since then I've created the rest of the website and it now looks like the current implementation.\n\n![Current implementation](https://dev-to-uploads.s3.amazonaws.com/i/yhwqk8md7bcicwq4nc87.jpg)\n*Current implementation*\n\n![New react implementation](https://dev-to-uploads.s3.amazonaws.com/i/lcp0ks2st7e891vowq5v.jpg)\n*New React implementation*\n\nYou can see the contact form has been implemented in the screenshot but it doesn’t work. One way to activate it would be to make an API request to a backend server and use a service such as `nodemailer` to send the email. As this will be a static site, another method of sending emails must be used. EmailJS to the rescue!\n\n## [EmailJS](https://www.emailjs.com/)\nEmailJS is a service designed to help send emails using client side technologies only. It utilises templates that can be programatically changed through variables that are supplied when making the request.\n\nUsing EmailJS with React is easy due to the [emailjs-com](https://www.npmjs.com/package/emailjs-com) NPM package. This will be used in the new website as it seems perfect for a small site.\n\n## Register and setup EmailJS\nTo use EmailJS you need to setup a free account, this gives you:\n* 200 emails a month\n* 2 templates\n* Data Size of 50kb\n* Limited contacts history\n*There are other plans but for this project the free plan is fine*\n\nOnce your account is created, navigate to the email services page and select \"Add new service\" - this authorises EmailJS to send emails on your behalf from your email account.\n\n![EmailJS providers](https://dev-to-uploads.s3.amazonaws.com/i/4obaenx2rrkkal20q03x.jpg)\n*EmailJS provider selection screen*\n\nNext we need to setup a template. Navigate to the Email Templates page and select “Create new template”, give it a name and an ID. You will then be taken to the template creation screen, from here you can configure exactly how you want the email to look, who you want it sent to and what you want the subject to be. \n\nMy template looks like this:\n![EmailJS template](https://dev-to-uploads.s3.amazonaws.com/i/0a131necp5kjb2e3mafe.jpg)\n\nand gives the output:\n![EmailJS output](https://dev-to-uploads.s3.amazonaws.com/i/diq52s3te7f65odv6yli.jpg)\n\nTo use variables which you can supply to EmailJS you use curly bracket notation. So for a variable called name I’d use `{{name}}`.\nFor more information on using variables visit [Dynamic variables in templates](https://www.emailjs.com/docs/user-guide/dynamic-variables-templates/)\n\n## Using EmailJS in a React.js application\nWe’re now ready to add EmailJS into our React application.\nSteps:\n1. Run `npm install -s emailjs-com`\n2. Follow the instructions on how to [use EmailJS with React](https://www.emailjs.com/docs/examples/reactjs/)\n\nYou’ll need to change the `YOUR*` variables to their actual values.\n\nTo get the SERVICE_ID and TEMPLATE_ID, go to the template overview and select `copy code` - this will show you their values.\n\n![EmailJS template copy code output](https://dev-to-uploads.s3.amazonaws.com/i/vma7o64vyxrog9c4ijnf.jpg)\n*An example output for the `copy code` overview*\n\nTo get the `USER_ID`, go to your account overview and click on the API KEYS tab.\n\n*Note: It’s best practice to keep these in a `.env` file and not commit them to your source repository.*\n\nSee how I've implemented using EmailJS in a React application on [my Github - messageForm.js](https://github.com/james-wallis/wallisconsultancy/blob/master/components/messageForm.js).\n\n[Key snippet](https://github.com/james-wallis/wallisconsultancy/blob/master/components/messageForm.js#L48):\n```javascript\nemailjs.send(\n      process.env.EMAIL_JS_SERVICE,\n      process.env.EMAIL_JS_TEMPLATE,\n      params, // the values in your EmailJS template\n      process.env.EMAIL_JS_USER,\n    )\n      .then(({ status }) => {\n        // Show success message\n        setFormSubmitted({ title: 'Message has been sent', paragraph: 'Mike will be in contact with you soon.' });\n      }, () => {\n        // Show error message\n        setFormSubmitted({ title: 'Error sending message, try again later', paragraph: 'Please contact Mike either by phone or email.' });\n      });\n```\n\nThat’s it! You are now able to send emails from your React application without requiring a backend server.\n\n## Round up\nIn this blog I’ve demonstrated how EmailJS can be used to send emails from React application with no requirement for a backend service.\n \nIn the next blog I will explore how Google reCaptcha can reduce the amount of spam sent from a contact form on a website and configured it to work with EmailJS.\n\n\n\n","html":"<p><em>This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.</em></p>\n<p>The finished website: <a href=\"https://wallisconsultancy.co.uk\">https://wallisconsultancy.co.uk</a>\nThe source code: <a href=\"https://github.com/james-wallis/wallisconsultancy\">https://github.com/james-wallis/wallisconsultancy</a></p>\n<p>In the previous blog I had completed the social bar for the top of the website. Since then I've created the rest of the website and it now looks like the current implementation.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/yhwqk8md7bcicwq4nc87.jpg\" alt=\"Current implementation\">\n<em>Current implementation</em></p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/lcp0ks2st7e891vowq5v.jpg\" alt=\"New react implementation\">\n<em>New React implementation</em></p>\n<p>You can see the contact form has been implemented in the screenshot but it doesn’t work. One way to activate it would be to make an API request to a backend server and use a service such as <code>nodemailer</code> to send the email. As this will be a static site, another method of sending emails must be used. EmailJS to the rescue!</p>\n<h2><a href=\"https://www.emailjs.com/\">EmailJS</a></h2>\n<p>EmailJS is a service designed to help send emails using client side technologies only. It utilises templates that can be programatically changed through variables that are supplied when making the request.</p>\n<p>Using EmailJS with React is easy due to the <a href=\"https://www.npmjs.com/package/emailjs-com\">emailjs-com</a> NPM package. This will be used in the new website as it seems perfect for a small site.</p>\n<h2>Register and setup EmailJS</h2>\n<p>To use EmailJS you need to setup a free account, this gives you:</p>\n<ul>\n<li>200 emails a month</li>\n<li>2 templates</li>\n<li>Data Size of 50kb</li>\n<li>Limited contacts history</li>\n</ul>\n<p><em>There are other plans but for this project the free plan is fine</em></p>\n<p>Once your account is created, navigate to the email services page and select \"Add new service\" - this authorises EmailJS to send emails on your behalf from your email account.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/4obaenx2rrkkal20q03x.jpg\" alt=\"EmailJS providers\">\n<em>EmailJS provider selection screen</em></p>\n<p>Next we need to setup a template. Navigate to the Email Templates page and select “Create new template”, give it a name and an ID. You will then be taken to the template creation screen, from here you can configure exactly how you want the email to look, who you want it sent to and what you want the subject to be.</p>\n<p>My template looks like this:\n<img src=\"https://dev-to-uploads.s3.amazonaws.com/i/0a131necp5kjb2e3mafe.jpg\" alt=\"EmailJS template\"></p>\n<p>and gives the output:\n<img src=\"https://dev-to-uploads.s3.amazonaws.com/i/diq52s3te7f65odv6yli.jpg\" alt=\"EmailJS output\"></p>\n<p>To use variables which you can supply to EmailJS you use curly bracket notation. So for a variable called name I’d use <code>{{name}}</code>.\nFor more information on using variables visit <a href=\"https://www.emailjs.com/docs/user-guide/dynamic-variables-templates/\">Dynamic variables in templates</a></p>\n<h2>Using EmailJS in a React.js application</h2>\n<p>We’re now ready to add EmailJS into our React application.\nSteps:</p>\n<ol>\n<li>Run <code>npm install -s emailjs-com</code></li>\n<li>Follow the instructions on how to <a href=\"https://www.emailjs.com/docs/examples/reactjs/\">use EmailJS with React</a></li>\n</ol>\n<p>You’ll need to change the <code>YOUR*</code> variables to their actual values.</p>\n<p>To get the SERVICE_ID and TEMPLATE_ID, go to the template overview and select <code>copy code</code> - this will show you their values.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/vma7o64vyxrog9c4ijnf.jpg\" alt=\"EmailJS template copy code output\">\n<em>An example output for the <code>copy code</code> overview</em></p>\n<p>To get the <code>USER_ID</code>, go to your account overview and click on the API KEYS tab.</p>\n<p><em>Note: It’s best practice to keep these in a <code>.env</code> file and not commit them to your source repository.</em></p>\n<p>See how I've implemented using EmailJS in a React application on <a href=\"https://github.com/james-wallis/wallisconsultancy/blob/master/components/messageForm.js\">my Github - messageForm.js</a>.</p>\n<p><a href=\"https://github.com/james-wallis/wallisconsultancy/blob/master/components/messageForm.js#L48\">Key snippet</a>:</p>\n<pre><code class=\"hljs language-javascript\">emailjs.send(\n      process.env.EMAIL_JS_SERVICE,\n      process.env.EMAIL_JS_TEMPLATE,\n      params, <span class=\"hljs-comment\">// the values in your EmailJS template</span>\n      process.env.EMAIL_JS_USER,\n    )\n      .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ status }</span>) =></span> {\n        <span class=\"hljs-comment\">// Show success message</span>\n        setFormSubmitted({ <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'Message has been sent'</span>, <span class=\"hljs-attr\">paragraph</span>: <span class=\"hljs-string\">'Mike will be in contact with you soon.'</span> });\n      }, <span class=\"hljs-function\">() =></span> {\n        <span class=\"hljs-comment\">// Show error message</span>\n        setFormSubmitted({ <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'Error sending message, try again later'</span>, <span class=\"hljs-attr\">paragraph</span>: <span class=\"hljs-string\">'Please contact Mike either by phone or email.'</span> });\n      });</code></pre>\n<p>That’s it! You are now able to send emails from your React application without requiring a backend server.</p>\n<h2>Round up</h2>\n<p>In this blog I’ve demonstrated how EmailJS can be used to send emails from React application with no requirement for a backend service.</p>\n<p>In the next blog I will explore how Google reCaptcha can reduce the amount of spam sent from a contact form on a website and configured it to work with EmailJS.</p>\n"},{"type_of":"article","id":411344,"title":"Using Tailwind CSS, Google Fonts and React-icons with a Next.js application","description":"This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Boot...","published":true,"published_at":"2020-07-27T20:55:52.557Z","slug":"using-tailwind-css-google-fonts-and-react-icons-with-a-next-js-application-50l5","path":"/jameswallis/using-tailwind-css-google-fonts-and-react-icons-with-a-next-js-application-50l5","url":"https://dev.to/jameswallis/using-tailwind-css-google-fonts-and-react-icons-with-a-next-js-application-50l5","comments_count":0,"public_reactions_count":21,"page_views_count":3955,"published_timestamp":"2020-07-27T20:55:52Z","body_markdown":"*This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.*\n\nThe finished website: https://wallisconsultancy.co.uk\nThe source code: https://github.com/james-wallis/wallisconsultancy\n\nAs discussed in the previous blog, this project will use Next.js and Tailwind CSS and will be based on the [with-tailwindcss](https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss) example that is supplied by the Next.js team.\n\nIn this blog I will: \n1. Use `create-next-app` to create and setup a Next.js application with Tailwind CSS\n2. Add a Google Font to a Next.js application using a custom document\n3. Add Font Awesome icons through React-icons\n4. Create a React component and style it using Tailwind CSS. It will be styled to look identical to wallisconsultancy.co.uk website shown below\n\n![The current Wallis Consultancy website](https://dev-to-uploads.s3.amazonaws.com/i/fu0ur32xm9z8gknu43ne.jpg)\n*The current Wallis Consultancy website*\n\n## Creating a Next.js application with Tailwind CSS\n\nCreating a Next.js application couldn't be easier as they have a wide range of starter apps available through their `create-next-app` utility. This project uses the [with-tailwindcss](https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss) as its base.\nThese are the steps I took to setup and run the starter app:\n1. Run `npx create-next-app --example with-tailwindcss wallisconsultancy`\n2. Install the required packages  `cd wallisconsultancy && npm install`\n3. Run `npm run dev` to start the development server\n4. Open `http://localhost:3000` in a browser to see the example running\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/h9hfgs9yxzvb0vikai61.jpg)\n\nThat’s it, we now have a running Next.js application and can use the Tailwind CSS styles without having to do any configuration thanks to the example Next.js provides.\n\n## Adding a Google font to Next.js\n\nThe current Wallis Consultancy website uses the \"Open Sans\" font that is available from Google Fonts. It needs to be added to the Next.js application to ensure that the website keeps the same appearance.\n\nNext.js exposes a `Head` component which can be added to a page to modify the `head` HTML tag on an individual basis. The font is required to be available throughout the website so instead of adding a `Head` to every page we can utilise a [custom _document.js](https://nextjs.org/docs/advanced-features/custom-document) and only add the Google Font into the `Head` in a single place.\n\n```javascript\nimport Document, {\n  Html, Head, Main, NextScript,\n} from 'next/document';\n\nclass MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    const initialProps = await Document.getInitialProps(ctx);\n    return { ...initialProps };\n  }\n\n  render() {\n    return (\n      <Html lang=\"en\">\n        <Head>\n          <link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400&display=swap\" rel=\"stylesheet\" />\n        </Head>\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n\nexport default MyDocument;\n```\n\n## Adding [react-icons](https://www.npmjs.com/package/react-icons)\nIn addition to the Next.js and Google Font setup I also need to add React Icons which includes Font Awesome for the various icons used on the page to the website.\n\nTo add [react-icons](https://www.npmjs.com/package/react-icons) to the project I ran `npm install -s react-icons` - React Icons provides the ability to use ES6 imports to include icons such as Font Awesome.\n\nTo use the [Thumbs Up](https://fontawesome.com/v4.7.0/icon/thumbs-up) icon you would add the following:\n```javascript\n// Import\nimport { FaThumbsUp } from 'react-icons/fa';\n\n// Usage\n<FaThumbsUp />\n```\n\n\n## Building a Component that uses Tailwind CSS\n*Note: Before beginning development I deleted the content from the `index.js` file in the `pages` directory and cleared out the `components` directory. So I had an `index.js` page that looks like*\n```javascript\nexport default function IndexPage() {\n  return (\n    <></>\n  )\n}\n```\n\nNow that the project is setup the first component can be created based on the Wallis Consultancy website. \n\nI split the current website up into sections to represent the different components that I would be building, they are not the final components as sections such as the `contact form` can be split into the `contact me` and `send me a message` components, but they give me a good overview to get started.\n\n![Wallis Consultancy split up into components](https://dev-to-uploads.s3.amazonaws.com/i/6ocm0s8cepaad1jztul2.jpg)\n*Splitting the website into components*\n\nFor this blog, I’ll only document my process creating the `social icon` bar at the top of the page in React using Tailwind CSS to avoid being overly repetitive. The source code for the other components can be viewed on [Github](https://github.com/james-wallis/wallisconsultancy/tree/master/components).\n\n### Social Icon Component\nI split the social icon component into three further sections:\n1. Call Me\n2. Email\n3. Social icons (currently only Linkedin)\n\nImportant style aspects to recreate:\n* Background colour is `#fbfbfb`\n* Font colour is `#999`\n* Font used is `Open Sans` - Can get this from Google fonts\n* Border bottom is `1px solid #e9e9e9`\n* Icons used are from Font Awesome and are\n  * Phone - `fa-phone`\n  * Email - `fa-envelope`\n  * LinkedIn - `fa-linkedin` - has a `border: 2px solid #999` and full `border-radius`\n\n![Finished Social Bar](https://dev-to-uploads.s3.amazonaws.com/i/l6itp6yz0e5m9j6f8vx9.png)\n*The Finished Social Bar*\n\nLooks pretty similar! It is only a simple component so the code is simple too - and with Tailwind CSS there are no complex classes to match with elements.\n\nThe next two snippets show the minimal effort required to style a component using Tailwind CSS, note the `className` attribute given to the `div` in the `SocialBar` component and the `a` and `p` tags in the `Email` component.\n\nSocialBar.js:\n```javascript\nimport Phone from './phone'\nimport Email from './email'\nimport SocialIcons from './socialIcons'\n\nexport default function SocialBar() {\n  return (\n    // bg-gray-fb === Background-color defined in Tailwind config\n    // w-screen === width: 100vw;\n    // font-open-sans === Custom font defined in Tailwind Config\n    <div\n      className=\"bg-gray-fb flex items-center w-screen justify-between px-8 text-gray-999 text-sm font-open-sans border-b border-gray-e9\"\n    >\n      <div className=\"flex\">\n        <Phone />\n        <Email />\n      </div>\n      <div>\n        <SocialIcons />\n      </div>\n    </div>\n  )\n}\n```\n\nEmail.js:\n```javascript\n// The Font Awesome Envelope Icon\nimport { FaEnvelope } from 'react-icons/fa';\n\nexport default function Email() {\n  return (\n    // flex === display: flex;\n    // items-center === align-items: center;\n    // m-2 === margin: 0.5rem;\n    <a href=\"mailto:mw@wallisconsultancy.co.uk\"\nclassName=\"flex items-center m-2\">\n      <FaEnvelope />\n      // ml-2 === margin-left: 0.5rem;\n      <p className=\"ml-2\">\n        Email: mw@wallisconsultancy.co.uk\n      </p>\n    </a>\n  )\n}\n```\n\nYou can see in the snippets a few custom classes that are defined in my `tailwind.config.js` such as the `font-gray-999`.\n\n```javascript\nmodule.exports = {\n  purge: ['./components/**/*.{js,ts,jsx,tsx}', './pages/**/*.{js,ts,jsx,tsx}'],\n  theme: {\n    extend: {\n      textColor: {\n        'gray-999': '#999',\n      },\n      backgroundColor: {\n        // Shown in the SocialBar component as bg-gray-fb\n        'gray-fb': '#fbfbfb',\n      },\n      borderColor: {\n        'gray-e9': '#e9e9e9',\n        'gray-999': '#999',\n      },\n      fontFamily: {\n        // Shown in the SocialBar component as font-open-sans\n        'open-sans': '\"Open Sans\", Helvetica, Arial, sans-serif',\n      },\n    },\n  },\n  variants: {},\n  plugins: [],\n}\n```\n\nThe other components were implemented in the same way and can be seen [on Github](https://github.com/james-wallis/wallisconsultancy/tree/master/components).\n\n## Round up\nIn this blog I’ve shown how to setup a Next.js application with Tailwind CSS, Google Fonts and React-icons. I provided two example components demonstrating how they can be used together. \n\nI highly recommend you try out the [with-tailwindcss](https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss) example from Next.js as it provides a nice introduction to both frameworks.\n\nIn the next blog in this series I’ll be using [EmailJS](https://www.emailjs.com/) to power the contact form to remove the requirement for a backend server.\n\n\n\n","positive_reactions_count":21,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--N8UrzmWi--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/bhq5mokftis1sf7ln60n.png","tag_list":["javascript","react","refactorit","tutorial"],"canonical_url":"https://wallis.dev/blog/wallis-consultancy-rebuild-setup","user":{"name":"James Wallis","username":"jameswallis","twitter_username":null,"github_username":"james-wallis","website_url":"https://wallis.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--aDpGiyQ3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436375/3c47ee9b-9ceb-4a43-b28a-3ac3e65d0173.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--Lbolzeyu--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436375/3c47ee9b-9ceb-4a43-b28a-3ac3e65d0173.jpeg"},"localSlug":"wallis-consultancy-rebuild-setup","markdown":"*This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.*\n\nThe finished website: https://wallisconsultancy.co.uk\nThe source code: https://github.com/james-wallis/wallisconsultancy\n\nAs discussed in the previous blog, this project will use Next.js and Tailwind CSS and will be based on the [with-tailwindcss](https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss) example that is supplied by the Next.js team.\n\nIn this blog I will: \n1. Use `create-next-app` to create and setup a Next.js application with Tailwind CSS\n2. Add a Google Font to a Next.js application using a custom document\n3. Add Font Awesome icons through React-icons\n4. Create a React component and style it using Tailwind CSS. It will be styled to look identical to wallisconsultancy.co.uk website shown below\n\n![The current Wallis Consultancy website](https://dev-to-uploads.s3.amazonaws.com/i/fu0ur32xm9z8gknu43ne.jpg)\n*The current Wallis Consultancy website*\n\n## Creating a Next.js application with Tailwind CSS\n\nCreating a Next.js application couldn't be easier as they have a wide range of starter apps available through their `create-next-app` utility. This project uses the [with-tailwindcss](https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss) as its base.\nThese are the steps I took to setup and run the starter app:\n1. Run `npx create-next-app --example with-tailwindcss wallisconsultancy`\n2. Install the required packages  `cd wallisconsultancy && npm install`\n3. Run `npm run dev` to start the development server\n4. Open `http://localhost:3000` in a browser to see the example running\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/i/h9hfgs9yxzvb0vikai61.jpg)\n\nThat’s it, we now have a running Next.js application and can use the Tailwind CSS styles without having to do any configuration thanks to the example Next.js provides.\n\n## Adding a Google font to Next.js\n\nThe current Wallis Consultancy website uses the \"Open Sans\" font that is available from Google Fonts. It needs to be added to the Next.js application to ensure that the website keeps the same appearance.\n\nNext.js exposes a `Head` component which can be added to a page to modify the `head` HTML tag on an individual basis. The font is required to be available throughout the website so instead of adding a `Head` to every page we can utilise a [custom _document.js](https://nextjs.org/docs/advanced-features/custom-document) and only add the Google Font into the `Head` in a single place.\n\n```javascript\nimport Document, {\n  Html, Head, Main, NextScript,\n} from 'next/document';\n\nclass MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    const initialProps = await Document.getInitialProps(ctx);\n    return { ...initialProps };\n  }\n\n  render() {\n    return (\n      <Html lang=\"en\">\n        <Head>\n          <link href=\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400&display=swap\" rel=\"stylesheet\" />\n        </Head>\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n\nexport default MyDocument;\n```\n\n## Adding [react-icons](https://www.npmjs.com/package/react-icons)\nIn addition to the Next.js and Google Font setup I also need to add React Icons which includes Font Awesome for the various icons used on the page to the website.\n\nTo add [react-icons](https://www.npmjs.com/package/react-icons) to the project I ran `npm install -s react-icons` - React Icons provides the ability to use ES6 imports to include icons such as Font Awesome.\n\nTo use the [Thumbs Up](https://fontawesome.com/v4.7.0/icon/thumbs-up) icon you would add the following:\n```javascript\n// Import\nimport { FaThumbsUp } from 'react-icons/fa';\n\n// Usage\n<FaThumbsUp />\n```\n\n\n## Building a Component that uses Tailwind CSS\n*Note: Before beginning development I deleted the content from the `index.js` file in the `pages` directory and cleared out the `components` directory. So I had an `index.js` page that looks like*\n```javascript\nexport default function IndexPage() {\n  return (\n    <></>\n  )\n}\n```\n\nNow that the project is setup the first component can be created based on the Wallis Consultancy website. \n\nI split the current website up into sections to represent the different components that I would be building, they are not the final components as sections such as the `contact form` can be split into the `contact me` and `send me a message` components, but they give me a good overview to get started.\n\n![Wallis Consultancy split up into components](https://dev-to-uploads.s3.amazonaws.com/i/6ocm0s8cepaad1jztul2.jpg)\n*Splitting the website into components*\n\nFor this blog, I’ll only document my process creating the `social icon` bar at the top of the page in React using Tailwind CSS to avoid being overly repetitive. The source code for the other components can be viewed on [Github](https://github.com/james-wallis/wallisconsultancy/tree/master/components).\n\n### Social Icon Component\nI split the social icon component into three further sections:\n1. Call Me\n2. Email\n3. Social icons (currently only Linkedin)\n\nImportant style aspects to recreate:\n* Background colour is `#fbfbfb`\n* Font colour is `#999`\n* Font used is `Open Sans` - Can get this from Google fonts\n* Border bottom is `1px solid #e9e9e9`\n* Icons used are from Font Awesome and are\n  * Phone - `fa-phone`\n  * Email - `fa-envelope`\n  * LinkedIn - `fa-linkedin` - has a `border: 2px solid #999` and full `border-radius`\n\n![Finished Social Bar](https://dev-to-uploads.s3.amazonaws.com/i/l6itp6yz0e5m9j6f8vx9.png)\n*The Finished Social Bar*\n\nLooks pretty similar! It is only a simple component so the code is simple too - and with Tailwind CSS there are no complex classes to match with elements.\n\nThe next two snippets show the minimal effort required to style a component using Tailwind CSS, note the `className` attribute given to the `div` in the `SocialBar` component and the `a` and `p` tags in the `Email` component.\n\nSocialBar.js:\n```javascript\nimport Phone from './phone'\nimport Email from './email'\nimport SocialIcons from './socialIcons'\n\nexport default function SocialBar() {\n  return (\n    // bg-gray-fb === Background-color defined in Tailwind config\n    // w-screen === width: 100vw;\n    // font-open-sans === Custom font defined in Tailwind Config\n    <div\n      className=\"bg-gray-fb flex items-center w-screen justify-between px-8 text-gray-999 text-sm font-open-sans border-b border-gray-e9\"\n    >\n      <div className=\"flex\">\n        <Phone />\n        <Email />\n      </div>\n      <div>\n        <SocialIcons />\n      </div>\n    </div>\n  )\n}\n```\n\nEmail.js:\n```javascript\n// The Font Awesome Envelope Icon\nimport { FaEnvelope } from 'react-icons/fa';\n\nexport default function Email() {\n  return (\n    // flex === display: flex;\n    // items-center === align-items: center;\n    // m-2 === margin: 0.5rem;\n    <a href=\"mailto:mw@wallisconsultancy.co.uk\"\nclassName=\"flex items-center m-2\">\n      <FaEnvelope />\n      // ml-2 === margin-left: 0.5rem;\n      <p className=\"ml-2\">\n        Email: mw@wallisconsultancy.co.uk\n      </p>\n    </a>\n  )\n}\n```\n\nYou can see in the snippets a few custom classes that are defined in my `tailwind.config.js` such as the `font-gray-999`.\n\n```javascript\nmodule.exports = {\n  purge: ['./components/**/*.{js,ts,jsx,tsx}', './pages/**/*.{js,ts,jsx,tsx}'],\n  theme: {\n    extend: {\n      textColor: {\n        'gray-999': '#999',\n      },\n      backgroundColor: {\n        // Shown in the SocialBar component as bg-gray-fb\n        'gray-fb': '#fbfbfb',\n      },\n      borderColor: {\n        'gray-e9': '#e9e9e9',\n        'gray-999': '#999',\n      },\n      fontFamily: {\n        // Shown in the SocialBar component as font-open-sans\n        'open-sans': '\"Open Sans\", Helvetica, Arial, sans-serif',\n      },\n    },\n  },\n  variants: {},\n  plugins: [],\n}\n```\n\nThe other components were implemented in the same way and can be seen [on Github](https://github.com/james-wallis/wallisconsultancy/tree/master/components).\n\n## Round up\nIn this blog I’ve shown how to setup a Next.js application with Tailwind CSS, Google Fonts and React-icons. I provided two example components demonstrating how they can be used together. \n\nI highly recommend you try out the [with-tailwindcss](https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss) example from Next.js as it provides a nice introduction to both frameworks.\n\nIn the next blog in this series I’ll be using [EmailJS](https://www.emailjs.com/) to power the contact form to remove the requirement for a backend server.\n\n\n\n","html":"<p><em>This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.</em></p>\n<p>The finished website: <a href=\"https://wallisconsultancy.co.uk\">https://wallisconsultancy.co.uk</a>\nThe source code: <a href=\"https://github.com/james-wallis/wallisconsultancy\">https://github.com/james-wallis/wallisconsultancy</a></p>\n<p>As discussed in the previous blog, this project will use Next.js and Tailwind CSS and will be based on the <a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss\">with-tailwindcss</a> example that is supplied by the Next.js team.</p>\n<p>In this blog I will:</p>\n<ol>\n<li>Use <code>create-next-app</code> to create and setup a Next.js application with Tailwind CSS</li>\n<li>Add a Google Font to a Next.js application using a custom document</li>\n<li>Add Font Awesome icons through React-icons</li>\n<li>Create a React component and style it using Tailwind CSS. It will be styled to look identical to wallisconsultancy.co.uk website shown below</li>\n</ol>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/fu0ur32xm9z8gknu43ne.jpg\" alt=\"The current Wallis Consultancy website\">\n<em>The current Wallis Consultancy website</em></p>\n<h2>Creating a Next.js application with Tailwind CSS</h2>\n<p>Creating a Next.js application couldn't be easier as they have a wide range of starter apps available through their <code>create-next-app</code> utility. This project uses the <a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss\">with-tailwindcss</a> as its base.\nThese are the steps I took to setup and run the starter app:</p>\n<ol>\n<li>Run <code>npx create-next-app --example with-tailwindcss wallisconsultancy</code></li>\n<li>Install the required packages  <code>cd wallisconsultancy &#x26;&#x26; npm install</code></li>\n<li>Run <code>npm run dev</code> to start the development server</li>\n<li>Open <code>http://localhost:3000</code> in a browser to see the example running</li>\n</ol>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/h9hfgs9yxzvb0vikai61.jpg\" alt=\"Alt Text\"></p>\n<p>That’s it, we now have a running Next.js application and can use the Tailwind CSS styles without having to do any configuration thanks to the example Next.js provides.</p>\n<h2>Adding a Google font to Next.js</h2>\n<p>The current Wallis Consultancy website uses the \"Open Sans\" font that is available from Google Fonts. It needs to be added to the Next.js application to ensure that the website keeps the same appearance.</p>\n<p>Next.js exposes a <code>Head</code> component which can be added to a page to modify the <code>head</code> HTML tag on an individual basis. The font is required to be available throughout the website so instead of adding a <code>Head</code> to every page we can utilise a <a href=\"https://nextjs.org/docs/advanced-features/custom-document\">custom _document.js</a> and only add the Google Font into the <code>Head</code> in a single place.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> Document, {\n  Html, Head, Main, NextScript,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next/document'</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyDocument</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Document</span> </span>{\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-title\">getInitialProps</span>(<span class=\"hljs-params\">ctx</span>)</span> {\n    <span class=\"hljs-keyword\">const</span> initialProps = <span class=\"hljs-keyword\">await</span> Document.getInitialProps(ctx);\n    <span class=\"hljs-keyword\">return</span> { ...initialProps };\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Head</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400&#x26;display=swap\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> /></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Head</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Main</span> /></span>\n          <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">NextScript</span> /></span>\n        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Html</span>></span></span>\n    );\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> MyDocument;</code></pre>\n<h2>Adding <a href=\"https://www.npmjs.com/package/react-icons\">react-icons</a></h2>\n<p>In addition to the Next.js and Google Font setup I also need to add React Icons which includes Font Awesome for the various icons used on the page to the website.</p>\n<p>To add <a href=\"https://www.npmjs.com/package/react-icons\">react-icons</a> to the project I ran <code>npm install -s react-icons</code> - React Icons provides the ability to use ES6 imports to include icons such as Font Awesome.</p>\n<p>To use the <a href=\"https://fontawesome.com/v4.7.0/icon/thumbs-up\">Thumbs Up</a> icon you would add the following:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Import</span>\n<span class=\"hljs-keyword\">import</span> { FaThumbsUp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-icons/fa'</span>;\n\n<span class=\"hljs-comment\">// Usage</span>\n<span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">FaThumbsUp</span> /></span></span></code></pre>\n<h2>Building a Component that uses Tailwind CSS</h2>\n<p><em>Note: Before beginning development I deleted the content from the <code>index.js</code> file in the <code>pages</code> directory and cleared out the <code>components</code> directory. So I had an <code>index.js</code> page that looks like</em></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">IndexPage</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;></span><span class=\"hljs-tag\">&#x3C;/></span></span>\n  )\n}</code></pre>\n<p>Now that the project is setup the first component can be created based on the Wallis Consultancy website.</p>\n<p>I split the current website up into sections to represent the different components that I would be building, they are not the final components as sections such as the <code>contact form</code> can be split into the <code>contact me</code> and <code>send me a message</code> components, but they give me a good overview to get started.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/6ocm0s8cepaad1jztul2.jpg\" alt=\"Wallis Consultancy split up into components\">\n<em>Splitting the website into components</em></p>\n<p>For this blog, I’ll only document my process creating the <code>social icon</code> bar at the top of the page in React using Tailwind CSS to avoid being overly repetitive. The source code for the other components can be viewed on <a href=\"https://github.com/james-wallis/wallisconsultancy/tree/master/components\">Github</a>.</p>\n<h3>Social Icon Component</h3>\n<p>I split the social icon component into three further sections:</p>\n<ol>\n<li>Call Me</li>\n<li>Email</li>\n<li>Social icons (currently only Linkedin)</li>\n</ol>\n<p>Important style aspects to recreate:</p>\n<ul>\n<li>Background colour is <code>#fbfbfb</code></li>\n<li>Font colour is <code>#999</code></li>\n<li>Font used is <code>Open Sans</code> - Can get this from Google fonts</li>\n<li>Border bottom is <code>1px solid #e9e9e9</code></li>\n<li>Icons used are from Font Awesome and are\n<ul>\n<li>Phone - <code>fa-phone</code></li>\n<li>Email - <code>fa-envelope</code></li>\n<li>LinkedIn - <code>fa-linkedin</code> - has a <code>border: 2px solid #999</code> and full <code>border-radius</code></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/l6itp6yz0e5m9j6f8vx9.png\" alt=\"Finished Social Bar\">\n<em>The Finished Social Bar</em></p>\n<p>Looks pretty similar! It is only a simple component so the code is simple too - and with Tailwind CSS there are no complex classes to match with elements.</p>\n<p>The next two snippets show the minimal effort required to style a component using Tailwind CSS, note the <code>className</code> attribute given to the <code>div</code> in the <code>SocialBar</code> component and the <code>a</code> and <code>p</code> tags in the <code>Email</code> component.</p>\n<p>SocialBar.js:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> Phone <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./phone'</span>\n<span class=\"hljs-keyword\">import</span> Email <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./email'</span>\n<span class=\"hljs-keyword\">import</span> SocialIcons <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./socialIcons'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">SocialBar</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"hljs-comment\">// bg-gray-fb === Background-color defined in Tailwind config</span>\n    <span class=\"hljs-comment\">// w-screen === width: 100vw;</span>\n    <span class=\"hljs-comment\">// font-open-sans === Custom font defined in Tailwind Config</span>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>\n      <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"bg-gray-fb flex items-center w-screen justify-between px-8 text-gray-999 text-sm font-open-sans border-b border-gray-e9\"</span>\n    ></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"flex\"</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Phone</span> /></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Email</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">SocialIcons</span> /></span>\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n  )\n}</code></pre>\n<p>Email.js:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// The Font Awesome Envelope Icon</span>\n<span class=\"hljs-keyword\">import</span> { FaEnvelope } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-icons/fa'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Email</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"hljs-comment\">// flex === display: flex;</span>\n    <span class=\"hljs-comment\">// items-center === align-items: center;</span>\n    <span class=\"hljs-comment\">// m-2 === margin: 0.5rem;</span>\n    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"mailto:mw@wallisconsultancy.co.uk\"</span>\n<span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"flex items-center m-2\"</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">FaEnvelope</span> /></span>\n      // ml-2 === margin-left: 0.5rem;\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"ml-2\"</span>></span>\n        Email: mw@wallisconsultancy.co.uk\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span></span>\n  )\n}</code></pre>\n<p>You can see in the snippets a few custom classes that are defined in my <code>tailwind.config.js</code> such as the <code>font-gray-999</code>.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-built_in\">module</span>.exports = {\n  <span class=\"hljs-attr\">purge</span>: [<span class=\"hljs-string\">'./components/**/*.{js,ts,jsx,tsx}'</span>, <span class=\"hljs-string\">'./pages/**/*.{js,ts,jsx,tsx}'</span>],\n  <span class=\"hljs-attr\">theme</span>: {\n    <span class=\"hljs-attr\">extend</span>: {\n      <span class=\"hljs-attr\">textColor</span>: {\n        <span class=\"hljs-string\">'gray-999'</span>: <span class=\"hljs-string\">'#999'</span>,\n      },\n      <span class=\"hljs-attr\">backgroundColor</span>: {\n        <span class=\"hljs-comment\">// Shown in the SocialBar component as bg-gray-fb</span>\n        <span class=\"hljs-string\">'gray-fb'</span>: <span class=\"hljs-string\">'#fbfbfb'</span>,\n      },\n      <span class=\"hljs-attr\">borderColor</span>: {\n        <span class=\"hljs-string\">'gray-e9'</span>: <span class=\"hljs-string\">'#e9e9e9'</span>,\n        <span class=\"hljs-string\">'gray-999'</span>: <span class=\"hljs-string\">'#999'</span>,\n      },\n      <span class=\"hljs-attr\">fontFamily</span>: {\n        <span class=\"hljs-comment\">// Shown in the SocialBar component as font-open-sans</span>\n        <span class=\"hljs-string\">'open-sans'</span>: <span class=\"hljs-string\">'\"Open Sans\", Helvetica, Arial, sans-serif'</span>,\n      },\n    },\n  },\n  <span class=\"hljs-attr\">variants</span>: {},\n  <span class=\"hljs-attr\">plugins</span>: [],\n}</code></pre>\n<p>The other components were implemented in the same way and can be seen <a href=\"https://github.com/james-wallis/wallisconsultancy/tree/master/components\">on Github</a>.</p>\n<h2>Round up</h2>\n<p>In this blog I’ve shown how to setup a Next.js application with Tailwind CSS, Google Fonts and React-icons. I provided two example components demonstrating how they can be used together.</p>\n<p>I highly recommend you try out the <a href=\"https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss\">with-tailwindcss</a> example from Next.js as it provides a nice introduction to both frameworks.</p>\n<p>In the next blog in this series I’ll be using <a href=\"https://www.emailjs.com/\">EmailJS</a> to power the contact form to remove the requirement for a backend server.</p>\n"},{"type_of":"article","id":410482,"title":"Modernising an existing Bootstrap website using Next.js and Tailwind CSS","description":"In this introductory article I discuss why I modernised the Wallis Consultancy website by rebuilding it from the ground up using Next.js and Tailwind CSS.","published":true,"published_at":"2020-07-26T22:05:00.071Z","slug":"modernising-an-existing-bootstrap-website-using-next-js-and-tailwind-css-c2g","path":"/jameswallis/modernising-an-existing-bootstrap-website-using-next-js-and-tailwind-css-c2g","url":"https://dev.to/jameswallis/modernising-an-existing-bootstrap-website-using-next-js-and-tailwind-css-c2g","comments_count":0,"public_reactions_count":16,"page_views_count":1628,"published_timestamp":"2020-07-26T22:05:00Z","body_markdown":"---\ndescription: \"In this introductory article I discuss why I modernised the Wallis Consultancy website by rebuilding it from the ground up using Next.js and Tailwind CSS.\"\n---\n*This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.*\n\nThe finished website: https://wallisconsultancy.co.uk\nThe source code: https://github.com/james-wallis/wallisconsultancy\n\n# Motivation\n\nWallisconsultancy.co.uk is a website that I developed in 2016, just after I finished my first year at the University of Portsmouth. One of my modules was a Web Fundamentals course which explained the basics of HTML & CSS with a sprinkling of JavaScript at the end. I wanted a summer project with the aim that I would be a much better HTML and CSS developer next year when I was asked to build a web-based dashboard as a part of the Web Programming coursework.\n\n![Original Wallis Consultancy website](https://dev-to-uploads.s3.amazonaws.com/i/pztz2awi7nptq69pykhc.jpg)\n*The original Wallis Consultancy website*\n\n\nThe original website was written using in 2011 in HTML and CSS using a PHP backend. As of 2016 the design was outdated and was not responsive rendering it unusable for anyone on a device with a small screen. Over the summer I rewrote the site using HTML, CSS and the Bootstrap framework and gave it a PHP backend so that I could reuse certain aspects of the page and make a general layout. Given that it was my first professional website, I was pretty happy with the result. In 2018 I moved it from a GoDaddy server to a Docker container to make it cheaper to run and easier for me to maintain.\n\n![Current Wallis Consultancy website](https://dev-to-uploads.s3.amazonaws.com/i/60cw56z459foymy2v9vy.jpg)\n*The current Wallis Consultancy website*\n\n\nIt’s now 2020 and I have been requested to make changes to the website. While it can be said that it’s working perfectly in its current condition, adding new pages and subtle features are difficult due to its reliance on HTML. Additionally, my skillset has improved know that this site will benefit from my experience using Next.js, a React.js framework that specialises in building server rendered, SEO friendly sites. In addition, as uses a Bootstrap Template, it came with a lot of CSS and JavaScript that is unused and in no way optimised. Next.js does a nice job of minifying the JavaScript and Tailwind CSS, a CSS framework, will help to reduce the amount of CSS I need to create and remove anything that is unused.\n\n## Why Next.js\nWhen a website is built using React.js the clients browser is required to run JavaScript and construct the page itself, this is bad for two reasons. \n1. There might be a few seconds before the website can be used by the client.  - Bad user experience.\n1. For SEO - although search engines are being improved to handle JavaScript applications there is no guarantee that the search bot will render the application correctly. For this reason it is still preferred to send static HTML to the client.\n\nNext.js solves these problems by statically generating and server-rendering a React application meaning we can send rendered HTML to the client as opposed to large JavaScript files. \n\nNext.js has other noteworthy features such as:\n* Automatic Code Splitting - Rendered pages only contain the JavaScript they need, rather than a single JavaScript file for all pages.\n* Built in Routing - To create a new page, just add a file in the `pages` folder\n* Prefetching - Using the `Link` component we can tell Next what pages the user is able to visit, Next responds by pre-fetching the content required for the page in the background so there is no load times between pages.\n* A Next app can be exported to static HTML - This is a huge feature that was released in [Next.js 9.3](https://nextjs.org/blog/next-9-3#next-gen-static-site-generation-ssg-support) websites to be run through Github pages.\n\n[Next.js](https://nextjs.org/)\n\n## Why Tailwind CSS\nTailwind CSS describes itself as a utility-first CSS framework for rapidly building custom designs. It works by having an existing library of CSS classes that you can add to a React.js component using the `className` prop. To add a height of 100% you add the class `h-full` to the component, this is an improvement to giving a component a classname and then opening a CSS file to define what you want the class to do - it makes styling a component a fast process.\n\nFor responsive sites, there exists the intuitive `{screen}:` prefix which makes it easy to control responsive classes, for a desktop all that is the `lg` prefix next to the styling e.g. `lg:h-full` .\n\nThe default configuration can be overridden using a `tailwind.config.js` file and additional classes can be added to the framework so that there is never a need to use the  `style`  attribute.\n\nFinally, TailwindCSS.com has a search utility that makes finding a class name extremely easy. If you need to know how to use a border radius, you can search it on the website and within seconds make the change to your code. This means that there is nothing to learn when picking up Tailwind CSS for the first time as its so easy to find on their website.\n![](Rewriting%20HTMLCSS%20Bootstrap%20website%20in%20React%20using%20Next.js%20and%20hosting%20on%20Github%20Pages%20(1)/9C20D553-A94C-40D6-9A9C-1FC7CD366F00.png)\n\n[Tailwind CSS - A Utility-First CSS Framework for Rapidly Building Custom Designs](https://tailwindcss.com/)\n\n## The Plan\nIn the next few posts, I will rewrite wallisconsultancy.co.uk using Next.js and TailwindCSS in order to achieve the following goals:\n* Make it easier to maintain\n* Enhance the SEO using Next.js third-party libraries such as next-seo and next-image-optimizer \n* Host on Github pages to save money\n* Add a Recaptcha to reduce the amount of email spam received\nAnd I’ll do all this while ensuring that the look of the page stays the same - with a few subtle tweaks.\n\n## Round up\nIn this blog I introduced wallisconsultancy.co.uk and explained that over the next few blogs I am going to rebuild it using Next.js and Tailwind CSS.\n","positive_reactions_count":16,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--zoKDwtp1--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/j8x0kwe2to4woy3vsfys.png","tag_list":["javascript","webdev","nextjs","showdev"],"canonical_url":"https://wallis.dev/blog/wallis-consultancy-rebuild-intro","user":{"name":"James Wallis","username":"jameswallis","twitter_username":null,"github_username":"james-wallis","website_url":"https://wallis.dev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--aDpGiyQ3--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436375/3c47ee9b-9ceb-4a43-b28a-3ac3e65d0173.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--Lbolzeyu--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/436375/3c47ee9b-9ceb-4a43-b28a-3ac3e65d0173.jpeg"},"flare_tag":{"name":"showdev","bg_color_hex":"#091b47","text_color_hex":"#b2ffe1"},"localSlug":"wallis-consultancy-rebuild-intro","markdown":"---\ndescription: \"In this introductory article I discuss why I modernised the Wallis Consultancy website by rebuilding it from the ground up using Next.js and Tailwind CSS.\"\n---\n*This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.*\n\nThe finished website: https://wallisconsultancy.co.uk\nThe source code: https://github.com/james-wallis/wallisconsultancy\n\n# Motivation\n\nWallisconsultancy.co.uk is a website that I developed in 2016, just after I finished my first year at the University of Portsmouth. One of my modules was a Web Fundamentals course which explained the basics of HTML & CSS with a sprinkling of JavaScript at the end. I wanted a summer project with the aim that I would be a much better HTML and CSS developer next year when I was asked to build a web-based dashboard as a part of the Web Programming coursework.\n\n![Original Wallis Consultancy website](https://dev-to-uploads.s3.amazonaws.com/i/pztz2awi7nptq69pykhc.jpg)\n*The original Wallis Consultancy website*\n\n\nThe original website was written using in 2011 in HTML and CSS using a PHP backend. As of 2016 the design was outdated and was not responsive rendering it unusable for anyone on a device with a small screen. Over the summer I rewrote the site using HTML, CSS and the Bootstrap framework and gave it a PHP backend so that I could reuse certain aspects of the page and make a general layout. Given that it was my first professional website, I was pretty happy with the result. In 2018 I moved it from a GoDaddy server to a Docker container to make it cheaper to run and easier for me to maintain.\n\n![Current Wallis Consultancy website](https://dev-to-uploads.s3.amazonaws.com/i/60cw56z459foymy2v9vy.jpg)\n*The current Wallis Consultancy website*\n\n\nIt’s now 2020 and I have been requested to make changes to the website. While it can be said that it’s working perfectly in its current condition, adding new pages and subtle features are difficult due to its reliance on HTML. Additionally, my skillset has improved know that this site will benefit from my experience using Next.js, a React.js framework that specialises in building server rendered, SEO friendly sites. In addition, as uses a Bootstrap Template, it came with a lot of CSS and JavaScript that is unused and in no way optimised. Next.js does a nice job of minifying the JavaScript and Tailwind CSS, a CSS framework, will help to reduce the amount of CSS I need to create and remove anything that is unused.\n\n## Why Next.js\nWhen a website is built using React.js the clients browser is required to run JavaScript and construct the page itself, this is bad for two reasons. \n1. There might be a few seconds before the website can be used by the client.  - Bad user experience.\n1. For SEO - although search engines are being improved to handle JavaScript applications there is no guarantee that the search bot will render the application correctly. For this reason it is still preferred to send static HTML to the client.\n\nNext.js solves these problems by statically generating and server-rendering a React application meaning we can send rendered HTML to the client as opposed to large JavaScript files. \n\nNext.js has other noteworthy features such as:\n* Automatic Code Splitting - Rendered pages only contain the JavaScript they need, rather than a single JavaScript file for all pages.\n* Built in Routing - To create a new page, just add a file in the `pages` folder\n* Prefetching - Using the `Link` component we can tell Next what pages the user is able to visit, Next responds by pre-fetching the content required for the page in the background so there is no load times between pages.\n* A Next app can be exported to static HTML - This is a huge feature that was released in [Next.js 9.3](https://nextjs.org/blog/next-9-3#next-gen-static-site-generation-ssg-support) websites to be run through Github pages.\n\n[Next.js](https://nextjs.org/)\n\n## Why Tailwind CSS\nTailwind CSS describes itself as a utility-first CSS framework for rapidly building custom designs. It works by having an existing library of CSS classes that you can add to a React.js component using the `className` prop. To add a height of 100% you add the class `h-full` to the component, this is an improvement to giving a component a classname and then opening a CSS file to define what you want the class to do - it makes styling a component a fast process.\n\nFor responsive sites, there exists the intuitive `{screen}:` prefix which makes it easy to control responsive classes, for a desktop all that is the `lg` prefix next to the styling e.g. `lg:h-full` .\n\nThe default configuration can be overridden using a `tailwind.config.js` file and additional classes can be added to the framework so that there is never a need to use the  `style`  attribute.\n\nFinally, TailwindCSS.com has a search utility that makes finding a class name extremely easy. If you need to know how to use a border radius, you can search it on the website and within seconds make the change to your code. This means that there is nothing to learn when picking up Tailwind CSS for the first time as its so easy to find on their website.\n![](Rewriting%20HTMLCSS%20Bootstrap%20website%20in%20React%20using%20Next.js%20and%20hosting%20on%20Github%20Pages%20(1)/9C20D553-A94C-40D6-9A9C-1FC7CD366F00.png)\n\n[Tailwind CSS - A Utility-First CSS Framework for Rapidly Building Custom Designs](https://tailwindcss.com/)\n\n## The Plan\nIn the next few posts, I will rewrite wallisconsultancy.co.uk using Next.js and TailwindCSS in order to achieve the following goals:\n* Make it easier to maintain\n* Enhance the SEO using Next.js third-party libraries such as next-seo and next-image-optimizer \n* Host on Github pages to save money\n* Add a Recaptcha to reduce the amount of email spam received\nAnd I’ll do all this while ensuring that the look of the page stays the same - with a few subtle tweaks.\n\n## Round up\nIn this blog I introduced wallisconsultancy.co.uk and explained that over the next few blogs I am going to rebuild it using Next.js and Tailwind CSS.\n","html":"<p><em>This blog is part of a series where I document rebuilding a website that relies on HTML, CSS and Bootstrap in React.js using the Next.js framework to improve performance, reduce costs and increase my workflow for future changes.</em></p>\n<p>The finished website: <a href=\"https://wallisconsultancy.co.uk\">https://wallisconsultancy.co.uk</a>\nThe source code: <a href=\"https://github.com/james-wallis/wallisconsultancy\">https://github.com/james-wallis/wallisconsultancy</a></p>\n<h1>Motivation</h1>\n<p>Wallisconsultancy.co.uk is a website that I developed in 2016, just after I finished my first year at the University of Portsmouth. One of my modules was a Web Fundamentals course which explained the basics of HTML &#x26; CSS with a sprinkling of JavaScript at the end. I wanted a summer project with the aim that I would be a much better HTML and CSS developer next year when I was asked to build a web-based dashboard as a part of the Web Programming coursework.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/pztz2awi7nptq69pykhc.jpg\" alt=\"Original Wallis Consultancy website\">\n<em>The original Wallis Consultancy website</em></p>\n<p>The original website was written using in 2011 in HTML and CSS using a PHP backend. As of 2016 the design was outdated and was not responsive rendering it unusable for anyone on a device with a small screen. Over the summer I rewrote the site using HTML, CSS and the Bootstrap framework and gave it a PHP backend so that I could reuse certain aspects of the page and make a general layout. Given that it was my first professional website, I was pretty happy with the result. In 2018 I moved it from a GoDaddy server to a Docker container to make it cheaper to run and easier for me to maintain.</p>\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/i/60cw56z459foymy2v9vy.jpg\" alt=\"Current Wallis Consultancy website\">\n<em>The current Wallis Consultancy website</em></p>\n<p>It’s now 2020 and I have been requested to make changes to the website. While it can be said that it’s working perfectly in its current condition, adding new pages and subtle features are difficult due to its reliance on HTML. Additionally, my skillset has improved know that this site will benefit from my experience using Next.js, a React.js framework that specialises in building server rendered, SEO friendly sites. In addition, as uses a Bootstrap Template, it came with a lot of CSS and JavaScript that is unused and in no way optimised. Next.js does a nice job of minifying the JavaScript and Tailwind CSS, a CSS framework, will help to reduce the amount of CSS I need to create and remove anything that is unused.</p>\n<h2>Why Next.js</h2>\n<p>When a website is built using React.js the clients browser is required to run JavaScript and construct the page itself, this is bad for two reasons.</p>\n<ol>\n<li>There might be a few seconds before the website can be used by the client.  - Bad user experience.</li>\n<li>For SEO - although search engines are being improved to handle JavaScript applications there is no guarantee that the search bot will render the application correctly. For this reason it is still preferred to send static HTML to the client.</li>\n</ol>\n<p>Next.js solves these problems by statically generating and server-rendering a React application meaning we can send rendered HTML to the client as opposed to large JavaScript files.</p>\n<p>Next.js has other noteworthy features such as:</p>\n<ul>\n<li>Automatic Code Splitting - Rendered pages only contain the JavaScript they need, rather than a single JavaScript file for all pages.</li>\n<li>Built in Routing - To create a new page, just add a file in the <code>pages</code> folder</li>\n<li>Prefetching - Using the <code>Link</code> component we can tell Next what pages the user is able to visit, Next responds by pre-fetching the content required for the page in the background so there is no load times between pages.</li>\n<li>A Next app can be exported to static HTML - This is a huge feature that was released in <a href=\"https://nextjs.org/blog/next-9-3#next-gen-static-site-generation-ssg-support\">Next.js 9.3</a> websites to be run through Github pages.</li>\n</ul>\n<p><a href=\"https://nextjs.org/\">Next.js</a></p>\n<h2>Why Tailwind CSS</h2>\n<p>Tailwind CSS describes itself as a utility-first CSS framework for rapidly building custom designs. It works by having an existing library of CSS classes that you can add to a React.js component using the <code>className</code> prop. To add a height of 100% you add the class <code>h-full</code> to the component, this is an improvement to giving a component a classname and then opening a CSS file to define what you want the class to do - it makes styling a component a fast process.</p>\n<p>For responsive sites, there exists the intuitive <code>{screen}:</code> prefix which makes it easy to control responsive classes, for a desktop all that is the <code>lg</code> prefix next to the styling e.g. <code>lg:h-full</code> .</p>\n<p>The default configuration can be overridden using a <code>tailwind.config.js</code> file and additional classes can be added to the framework so that there is never a need to use the  <code>style</code>  attribute.</p>\n<p>Finally, TailwindCSS.com has a search utility that makes finding a class name extremely easy. If you need to know how to use a border radius, you can search it on the website and within seconds make the change to your code. This means that there is nothing to learn when picking up Tailwind CSS for the first time as its so easy to find on their website.\n<img src=\"Rewriting%20HTMLCSS%20Bootstrap%20website%20in%20React%20using%20Next.js%20and%20hosting%20on%20Github%20Pages%20(1)/9C20D553-A94C-40D6-9A9C-1FC7CD366F00.png\" alt=\"\"></p>\n<p><a href=\"https://tailwindcss.com/\">Tailwind CSS - A Utility-First CSS Framework for Rapidly Building Custom Designs</a></p>\n<h2>The Plan</h2>\n<p>In the next few posts, I will rewrite wallisconsultancy.co.uk using Next.js and TailwindCSS in order to achieve the following goals:</p>\n<ul>\n<li>Make it easier to maintain</li>\n<li>Enhance the SEO using Next.js third-party libraries such as next-seo and next-image-optimizer</li>\n<li>Host on Github pages to save money</li>\n<li>Add a Recaptcha to reduce the amount of email spam received</li>\n</ul>\n<p>And I’ll do all this while ensuring that the look of the page stays the same - with a few subtle tweaks.</p>\n<h2>Round up</h2>\n<p>In this blog I introduced wallisconsultancy.co.uk and explained that over the next few blogs I am going to rebuild it using Next.js and Tailwind CSS.</p>\n"}]